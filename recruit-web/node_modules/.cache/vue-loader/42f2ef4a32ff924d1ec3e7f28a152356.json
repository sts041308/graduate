{"remainingRequest":"E:\\graduateproject\\recruit\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\graduateproject\\recruit\\recruit-web\\src\\view\\admin\\user\\user-list.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\graduateproject\\recruit\\recruit-web\\src\\view\\admin\\user\\user-list.vue","mtime":1682848612000},{"path":"E:\\graduateproject\\recruit\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\graduateproject\\recruit\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\graduateproject\\recruit\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\graduateproject\\recruit\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\nimport Admin from '@/lin/model/admin'\nimport LinTable from '@/component/base/table/lin-table'\nimport UserInfo from './user-info'\nimport UserPassword from './user-password'\n\nexport default {\n  components: { LinTable, UserInfo, UserPassword },\n  inject: ['eventBus'],\n  data() {\n    return {\n      id: 0, // 用户id\n      refreshPagination: true, // 页数增加的时候，因为缓存的缘故，需要刷新Pagination组件\n      editIndex: null, // 编辑的行\n      total_nums: 0, // 分组内的用户总数\n      currentPage: 1, // 默认获取第一页的数据\n      pageCount: 10, // 每页10条数据\n      tableData: [], // 表格数据\n      tableColumn: [], // 表头数据\n      operate: [], // 表格按键操作区\n      dialogFormVisible: false, // 控制弹窗显示\n      selectGroup: '', // 选中的分组Id\n      groups: [], // 所有分组\n      group_id: undefined,\n      activeTab: '修改信息',\n      form: {\n        // 表单信息\n        username: '',\n        password: '',\n        confirm_password: '',\n        email: '',\n        tel: '',\n        group_ids: [],\n      },\n      loading: false,\n    }\n  },\n  methods: {\n    // 根据分组 刷新/获取分组内的用户\n    async getAdminUsers() {\n      let res\n      const currentPage = this.currentPage - 1\n      try {\n        this.loading = true\n        res = await Admin.getAdminUsers({ group_id: this.group_id, count: this.pageCount, page: currentPage }) // eslint-disable-line\n        this.loading = false\n        this.tableData = this.shuffleList(res.items)\n        this.total_nums = res.total\n      } catch (e) {\n        this.loading = false\n        console.log(e)\n      }\n    },\n    // 获取所有分组\n    async getAllGroups() {\n      try {\n        this.loading = true\n        this.groups = await Admin.getAllGroups()\n        this.loading = false\n      } catch (e) {\n        this.loading = false\n        console.log(e)\n      }\n    },\n    // 获取所拥有的权限并渲染  由子组件提供\n    async handleEdit(val) {\n      this.editIndex = val.index\n      let selectedData\n      // 单击 编辑按键\n      if (val.index >= 0) {\n        selectedData = val.row\n      } else {\n        // 单击 table row\n        selectedData = val\n      }\n      this.id = selectedData.id\n      this.form.tel = selectedData.tel\n      this.form.username = selectedData.username\n      this.form.email = selectedData.email\n      this.form.group_ids = selectedData.groups\n      this.dialogFormVisible = true\n    },\n    // 下拉框选择分组\n    async handleChange() {\n      this.currentPage = 1\n      this.loading = true\n      await this.getAdminUsers()\n      this.loading = false\n    },\n    // 切换table页\n    async handleCurrentChange(val) {\n      this.currentPage = val\n      this.loading = true\n      await this.getAdminUsers('changePage')\n      this.loading = false\n    },\n    handleDelete(val) {\n      let res\n      this.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n      }).then(async () => {\n        try {\n          this.loading = true\n          res = await Admin.deleteOneUser(val.row.id)\n        } catch (e) {\n          this.loading = false\n          console.log(e)\n        }\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.loading = false\n          if (this.total_nums % this.pageCount === 1 && this.currentPage !== 1) {\n            // 判断删除的是不是每一页的最后一条数据\n            this.currentPage--\n          }\n          await this.getAdminUsers()\n          this.$message({\n            type: 'success',\n            message: `${res.message}`,\n          })\n        } else {\n          this.loading = false\n          this.$message.error(`${res.message}`)\n        }\n      })\n    },\n    // 提交表单信息\n    async confirmEdit() {\n      if (this.activeTab === '修改信息') {\n        await this.$refs.userInfo.submitForm('form')\n      } else {\n        await this.$refs.password.submitForm('form')\n      }\n    },\n    // 重置\n    resetForm() {\n      if (this.activeTab === '修改信息') {\n        this.$refs.userInfo.resetForm('form')\n      } else {\n        this.$refs.password.resetForm('form')\n      }\n    },\n    // 双击 table ro\n    rowClick(row) {\n      this.handleEdit(row)\n    },\n    // 弹框 右上角 X\n    handleClose(done) {\n      this.dialogFormVisible = false\n      done()\n    },\n    // 切换tab栏\n    handleClick(tab) {\n      this.activeTab = tab.name\n    },\n    // 监听子组件更新用户信息是否成功\n    async handleInfoResult(flag) {\n      this.dialogFormVisible = false\n      if (flag === true) {\n        this.getAdminUsers()\n      }\n    },\n    // 监听子组件更新密码是否成功\n    handlePasswordResult(result) {\n      if (result === true) {\n        this.dialogFormVisible = false\n      }\n    },\n    // 监听添加用户是否成功\n    async addUser(flag) {\n      if (flag === true) {\n        if (this.total_nums % this.pageCount === 0) {\n          // 判断当前页的数据是不是满了，需要增加新的页码\n          this.currentPage++\n        }\n        await this.getAdminUsers()\n        this.refreshPagination = false // 刷新pagination组件\n        this.$nextTick(() => {\n          this.refreshPagination = true\n        })\n      }\n    },\n    shuffleList(users) {\n      const list = []\n      users.forEach(element => {\n        const groups = []\n        element.groups.forEach(item => {\n          groups.push(item.name)\n        })\n        element.groupNames = groups.join(',')\n        list.push(element)\n      })\n      return list\n    },\n  },\n  async created() {\n    await this.getAdminUsers()\n    this.getAllGroups()\n    this.tableColumn = [\n      { prop: 'username', label: '名称' },\n      { prop: 'groupNames', label: '所属角色' },\n    ] // 设置表头信息\n    this.operate = [\n      { name: '编辑', func: 'handleEdit', type: 'primary' },\n      { name: '删除', func: 'handleDelete', type: 'danger' },\n    ]\n    this.eventBus.$on('addUser', this.addUser)\n  },\n  beforeDestroy() {\n    this.eventBus.$off('addUser', this.addUser)\n  },\n}\n",{"version":3,"sources":["user-list.vue"],"names":[],"mappingsfile":"user-list.vue","sourceRoot":"src/view/admin/user","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"header\">\n      <div class=\"title\">用户列表</div>\n      <!-- 分组选择下拉框 -->\n      <el-select size=\"medium\" filterable v-model=\"group_id\" placeholder=\"请选择角色\" @change=\"handleChange\" clearable>\n        <el-option v-for=\"(group, index) in groups\" :key=\"index\" :label=\"group.name\" :value=\"group.id\"></el-option>\n      </el-select>\n    </div>\n    <!-- 表格 -->\n    <lin-table :tableColumn=\"tableColumn\" :tableData=\"tableData\" :operate=\"operate\" @handleEdit=\"handleEdit\"\n      @handleDelete=\"handleDelete\" @row-click=\"rowClick\" v-loading=\"loading\"></lin-table>\n    <!-- 分页 -->\n    <div class=\"pagination\">\n      <el-pagination @current-change=\"handleCurrentChange\" :background=\"true\" :page-size=\"pageCount\"\n        :current-page=\"currentPage\" v-if=\"refreshPagination\" layout=\"prev, pager, next, jumper\" :total=\"total_nums\">\n      </el-pagination>\n    </div>\n    <!-- 弹窗 -->\n    <el-dialog title=\"用户信息\" :append-to-body=\"true\" :before-close=\"handleClose\" :visible.sync=\"dialogFormVisible\">\n      <div style=\"margin-top:-25px;\">\n        <el-tabs v-model=\"activeTab\" @tab-click=\"handleClick\">\n          <el-tab-pane label=\"修改信息\" name=\"修改信息\">\n            <user-info ref=\"userInfo\" v-if=\"dialogFormVisible\" @handleInfoResult=\"handleInfoResult\"\n              labelPosition=\"right\" pageType=\"edit\" :id=\"id\" :groups=\"groups\" :info=\"form\" :submit=\"false\"\n              class=\"info\" />\n          </el-tab-pane>\n          <el-tab-pane label=\"修改密码\" name=\"修改密码\">\n            <user-password @handlePasswordResult=\"handlePasswordResult\" ref=\"password\" :id=\"id\" class=\"password\" />\n          </el-tab-pane>\n        </el-tabs>\n      </div>\n      <!-- 按键操作 -->\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"confirmEdit\">确 定</el-button>\n        <el-button @click=\"resetForm\">重 置</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport Admin from '@/lin/model/admin'\nimport LinTable from '@/component/base/table/lin-table'\nimport UserInfo from './user-info'\nimport UserPassword from './user-password'\n\nexport default {\n  components: { LinTable, UserInfo, UserPassword },\n  inject: ['eventBus'],\n  data() {\n    return {\n      id: 0, // 用户id\n      refreshPagination: true, // 页数增加的时候，因为缓存的缘故，需要刷新Pagination组件\n      editIndex: null, // 编辑的行\n      total_nums: 0, // 分组内的用户总数\n      currentPage: 1, // 默认获取第一页的数据\n      pageCount: 10, // 每页10条数据\n      tableData: [], // 表格数据\n      tableColumn: [], // 表头数据\n      operate: [], // 表格按键操作区\n      dialogFormVisible: false, // 控制弹窗显示\n      selectGroup: '', // 选中的分组Id\n      groups: [], // 所有分组\n      group_id: undefined,\n      activeTab: '修改信息',\n      form: {\n        // 表单信息\n        username: '',\n        password: '',\n        confirm_password: '',\n        email: '',\n        tel: '',\n        group_ids: [],\n      },\n      loading: false,\n    }\n  },\n  methods: {\n    // 根据分组 刷新/获取分组内的用户\n    async getAdminUsers() {\n      let res\n      const currentPage = this.currentPage - 1\n      try {\n        this.loading = true\n        res = await Admin.getAdminUsers({ group_id: this.group_id, count: this.pageCount, page: currentPage }) // eslint-disable-line\n        this.loading = false\n        this.tableData = this.shuffleList(res.items)\n        this.total_nums = res.total\n      } catch (e) {\n        this.loading = false\n        console.log(e)\n      }\n    },\n    // 获取所有分组\n    async getAllGroups() {\n      try {\n        this.loading = true\n        this.groups = await Admin.getAllGroups()\n        this.loading = false\n      } catch (e) {\n        this.loading = false\n        console.log(e)\n      }\n    },\n    // 获取所拥有的权限并渲染  由子组件提供\n    async handleEdit(val) {\n      this.editIndex = val.index\n      let selectedData\n      // 单击 编辑按键\n      if (val.index >= 0) {\n        selectedData = val.row\n      } else {\n        // 单击 table row\n        selectedData = val\n      }\n      this.id = selectedData.id\n      this.form.tel = selectedData.tel\n      this.form.username = selectedData.username\n      this.form.email = selectedData.email\n      this.form.group_ids = selectedData.groups\n      this.dialogFormVisible = true\n    },\n    // 下拉框选择分组\n    async handleChange() {\n      this.currentPage = 1\n      this.loading = true\n      await this.getAdminUsers()\n      this.loading = false\n    },\n    // 切换table页\n    async handleCurrentChange(val) {\n      this.currentPage = val\n      this.loading = true\n      await this.getAdminUsers('changePage')\n      this.loading = false\n    },\n    handleDelete(val) {\n      let res\n      this.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n      }).then(async () => {\n        try {\n          this.loading = true\n          res = await Admin.deleteOneUser(val.row.id)\n        } catch (e) {\n          this.loading = false\n          console.log(e)\n        }\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.loading = false\n          if (this.total_nums % this.pageCount === 1 && this.currentPage !== 1) {\n            // 判断删除的是不是每一页的最后一条数据\n            this.currentPage--\n          }\n          await this.getAdminUsers()\n          this.$message({\n            type: 'success',\n            message: `${res.message}`,\n          })\n        } else {\n          this.loading = false\n          this.$message.error(`${res.message}`)\n        }\n      })\n    },\n    // 提交表单信息\n    async confirmEdit() {\n      if (this.activeTab === '修改信息') {\n        await this.$refs.userInfo.submitForm('form')\n      } else {\n        await this.$refs.password.submitForm('form')\n      }\n    },\n    // 重置\n    resetForm() {\n      if (this.activeTab === '修改信息') {\n        this.$refs.userInfo.resetForm('form')\n      } else {\n        this.$refs.password.resetForm('form')\n      }\n    },\n    // 双击 table ro\n    rowClick(row) {\n      this.handleEdit(row)\n    },\n    // 弹框 右上角 X\n    handleClose(done) {\n      this.dialogFormVisible = false\n      done()\n    },\n    // 切换tab栏\n    handleClick(tab) {\n      this.activeTab = tab.name\n    },\n    // 监听子组件更新用户信息是否成功\n    async handleInfoResult(flag) {\n      this.dialogFormVisible = false\n      if (flag === true) {\n        this.getAdminUsers()\n      }\n    },\n    // 监听子组件更新密码是否成功\n    handlePasswordResult(result) {\n      if (result === true) {\n        this.dialogFormVisible = false\n      }\n    },\n    // 监听添加用户是否成功\n    async addUser(flag) {\n      if (flag === true) {\n        if (this.total_nums % this.pageCount === 0) {\n          // 判断当前页的数据是不是满了，需要增加新的页码\n          this.currentPage++\n        }\n        await this.getAdminUsers()\n        this.refreshPagination = false // 刷新pagination组件\n        this.$nextTick(() => {\n          this.refreshPagination = true\n        })\n      }\n    },\n    shuffleList(users) {\n      const list = []\n      users.forEach(element => {\n        const groups = []\n        element.groups.forEach(item => {\n          groups.push(item.name)\n        })\n        element.groupNames = groups.join(',')\n        list.push(element)\n      })\n      return list\n    },\n  },\n  async created() {\n    await this.getAdminUsers()\n    this.getAllGroups()\n    this.tableColumn = [\n      { prop: 'username', label: '名称' },\n      { prop: 'groupNames', label: '所属角色' },\n    ] // 设置表头信息\n    this.operate = [\n      { name: '编辑', func: 'handleEdit', type: 'primary' },\n      { name: '删除', func: 'handleDelete', type: 'danger' },\n    ]\n    this.eventBus.$on('addUser', this.addUser)\n  },\n  beforeDestroy() {\n    this.eventBus.$off('addUser', this.addUser)\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  padding: 0 30px;\n\n  .header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    .title {\n      height: 59px;\n      line-height: 59px;\n      color: $parent-title-color;\n      font-size: 16px;\n      font-weight: 500;\n    }\n  }\n\n  .pagination {\n    display: flex;\n    justify-content: flex-end;\n    margin: 20px;\n  }\n}\n\n.info {\n  margin-left: -55px;\n  margin-bottom: -30px;\n}\n\n.password {\n  margin-top: 20px;\n  margin-left: -55px;\n  margin-bottom: -20px;\n}\n</style>\n"]}]}