{"remainingRequest":"E:\\graduateproject\\recruit\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!E:\\graduateproject\\recruit\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\graduateproject\\recruit\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\graduateproject\\recruit\\recruit-web\\src\\component\\base\\upload-image\\index.vue?vue&type=script&lang=js","dependencies":[{"path":"E:\\graduateproject\\recruit\\recruit-web\\src\\component\\base\\upload-image\\index.vue","mtime":1682848612000},{"path":"E:\\graduateproject\\recruit\\recruit-web\\babel.config.js","mtime":1682848612000},{"path":"E:\\graduateproject\\recruit\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\graduateproject\\recruit\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"E:\\graduateproject\\recruit\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\graduateproject\\recruit\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator.return && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, catch: function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nimport { getFileType, checkIsAnimated, isEmptyObj, createId } from './utils';\n\n/**\n * 本地图像通过验证后构造的信息对象\n * @typedef {Object<string, number, any>} LocalFileInfo\n * @property {string} localSrc 本地图像预览地址\n * @property {File} file 本地图像文件\n * @property {number} width 宽\n * @property {number} height 高\n * @property {string} name 文件名\n * @property {number} size 文件大小\n * @property {string} type 文件的媒体类型 (MIME)\n * @property {Date} lastModified 文件最后修改时间\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * 初始化的图片如果没有传入字段, 则值为空 null\n * @typedef {Object<string, number>} ReturnItem\n * @property {number|string} id 初始化数据的 id\n * @property {number|string} imgId 图像资源 id\n * @property {string} src 文件相对路径\n * @property {string} display 图像完整地址\n * @property {number} height 高\n * @property {number} width 宽\n * @property {string} fileName 文件名\n * @property {string} fileType 文件的媒体类型 (MIME), 针对部分文件类型做了检测\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * @typedef {Object} ValidateRule\n * @property {array|number} ratio 比例 [宽，高], 或者 宽/高 的数值\n * @property {number} width 宽度必需等于\n * @property {number} height 高度必需等于\n * @property {number} minWidth 最小宽\n * @property {number} minHeight 最小高\n * @property {number} minSize 最小 size（Mb)\n * @property {number} maxSize 最大 size（Mb)\n * @property {number} allowAnimated 是否允许上传动图, 0 不检测, 1 不允许动图, 2 只允许动图. 要检查此项, 需设置属性 animated-check 为 true\n */\n\nvar ONE_KB = 1024;\nvar ONE_MB = ONE_KB * 1024;\n\n/**\n * 创建项, 如不传入参数则创建空项\n * status 状态转换说明:\n *  - 如果不传入参数, 创建上传空项, status: input\n *  - 如果只传入 data, 不传入 oldData\n *    - data 是本地数据(数据中是否携带id), status: new\n *    - data 不是本地数据(来源可能是初始化或是其他), status 与原状态保持一致, 如果没有原状态就是 init\n *  - data 与 oldData 都传入\n *    - data 为本地数据, oldData 是 input/new, status: new\n *    - data 为本地数据, oldData 是 init/edit, status: edit\n *    - data 不是本地数据, status 与原状态保持一致, 如果没有原状态就是 init\n * @returns {Item}\n */\nfunction createItem() {\n  var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  var oldData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var item = {\n    loading: false,\n    id: createId(),\n    status: 'input',\n    // new/edit/del/init/input\n    src: '',\n    // 图像相对地址\n    display: '',\n    // 图像完整地址, 用于显示\n    imgId: '' // 图像资源 id\n  };\n  // 未传入data, 说明是单纯新建, 单纯新建的值是输入框状态\n  if (!data) {\n    return item;\n  }\n  // 判断是否是本地图片\n  if (data.file && !data.id) {\n    if (!isEmptyObj(oldData)) {\n      // 如果旧数据状态是输入框, 则为新图片\n      if (oldData.status === 'input' || oldData.status === 'new') {\n        item.status = 'new';\n      }\n      // 如果旧数据状态是初始化 init, 则为修改\n      if (oldData.status === 'init' || oldData.status === 'edit') {\n        item.status = 'edit';\n      }\n    } else {\n      item.status = 'new';\n    }\n\n    // 本地数据初始化\n    item.id = oldData.id || item.id;\n    item.src = '';\n    item.imgId = '';\n    item.display = data.localSrc || item.display;\n    item = Object.assign({}, data, item);\n    return item;\n  }\n\n  // 存在id, 说明是传入已存在数据\n  item.id = data.id || createId();\n  item.imgId = data.imgId || item.imgId;\n  item.src = data.src || item.src;\n  item.display = data.display || item.display;\n  item.status = data.status || 'init';\n  item = Object.assign({}, data, item);\n  return item;\n}\n\n/**\n * 获取范围类型限制的提示文本\n * @param {String} prx 提示前缀\n * @param {Number} min 范围下限\n * @param {Number} max 范围上限\n * @param {String} unit 单位\n */\nfunction getRangeTip(prx, min, max) {\n  var unit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var str = prx;\n  if (min && max) {\n    // 有范围限制\n    str += \" \".concat(min).concat(unit, \"~\").concat(max).concat(unit);\n  } else if (min) {\n    // 只有最小范围\n    str += \" \\u2265 \".concat(min).concat(unit);\n  } else if (max) {\n    // 只有最大范围\n    str += \" \\u2264 \".concat(max).concat(unit);\n  } else {\n    // 无限制\n    str += '无限制';\n  }\n  return str;\n}\n\n/** for originUpload: 一次请求最多的文件数量 */\nvar uploadLimit = 10;\n/** for originUpload: 文件对象缓存 */\nvar catchData = [];\n/** for originUpload: 计时器缓存 */\nvar time;\nexport default {\n  name: 'UploadImgs',\n  data: function data() {\n    return {\n      itemList: [],\n      loading: false,\n      currentId: '',\n      // 正在操作项的id\n      globalImgPriview: '$imagePreview' // 全局图片预览方法名\n    };\n  },\n  props: {\n    /** 每一项宽度 */\n    width: {\n      type: [Number, String],\n      default: 160\n    },\n    /** 每一项高度 */\n    height: {\n      type: [Number, String],\n      default: 160\n    },\n    /** 是否开启自动上传 */\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n    /** 初始化数据 */\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    /** 接受的文件类型 */\n    accept: {\n      type: String,\n      default: 'image/*'\n    },\n    /** 最少图片数量 */\n    minNum: {\n      type: Number,\n      default: 0\n    },\n    /** 最多图片数量, 0 表示无限制 */\n    maxNum: {\n      type: Number,\n      default: 0\n    },\n    /** 是否可排序 */\n    sortable: {\n      type: Boolean,\n      default: false\n    },\n    /** 是否可预览 */\n    preview: {\n      type: Boolean,\n      default: true\n    },\n    /** 是否可以一次多选 */\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    /** 图像验证规则 */\n    rules: {\n      type: [Object, Function],\n      default: function _default() {\n        return {\n          maxSize: 2\n        };\n      }\n    },\n    /** 是否禁用, 禁用后只可展示 不可进行编辑操作, 包括: 新增, 修改, 删除, 改变顺序 */\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    /** 上传前插入方法, 属于高级用法 */\n    beforeUpload: {\n      type: Function,\n      default: null\n    },\n    /** 重写上传方法, 如果重写则覆盖组件内上传方法 */\n    remoteFuc: {\n      type: Function,\n      default: null\n    },\n    /** 图像显示模式 */\n    fit: {\n      type: String,\n      default: 'contain'\n    },\n    /** 检测是否是动图 */\n    animatedCheck: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    /** 每项容器样式 */boxStyle: function boxStyle() {\n      var width = this.width,\n        height = this.height,\n        disabled = this.disabled;\n      var style = {};\n      if (typeof width === 'number') {\n        style.width = \"\".concat(width, \"px\");\n      } else if (typeof width === 'string') {\n        style.width = width;\n      }\n      if (typeof height === 'number') {\n        style.height = \"\".concat(height, \"px\");\n      } else if (typeof height === 'string') {\n        style.height = height;\n      }\n      if (disabled) {\n        style.cursor = 'not-allowed';\n      } else {\n        style.cursor = 'pointer';\n      }\n\n      /** 提示字体最大尺寸 */\n      var fontSize = 12;\n      /** 每行提示预设 */\n      var maxText = 8;\n      if (typeof width === 'number' && width / maxText < fontSize) {\n        fontSize = (width / maxText).toFixed(2);\n      }\n      style.fontSize = \"\".concat(fontSize, \"px\");\n      style.textAlign = 'center';\n      style.position = 'relative';\n      style.display = 'flex';\n      style.alignItems = 'center';\n      style.justifyContent = 'center';\n      style.overflow = 'hidden';\n      style.lineHeight = '1.3';\n      style.flexDirection = 'column';\n      return style;\n    },\n    /**\n     * 上传图像数量下限\n     * @returns {Number}\n     */\n    min: function min() {\n      var minNum = this.minNum;\n      return minNum < 0 ? 0 : parseInt(minNum, 10);\n    },\n    /**\n     * 上传图像数量上限\n     * @returns {Number}\n     */\n    max: function max() {\n      var min = this.min,\n        maxNum = this.maxNum;\n      // 兼容用最大值小于最小值情况\n      return maxNum < min ? min : parseInt(maxNum, 10);\n    },\n    /**\n     * 是否是固定数量(最小等于最大)\n     * @returns {Boolean}\n     */\n    isStable: function isStable() {\n      var min = this.min,\n        max = this.max;\n      return max !== 0 && min === max;\n    },\n    /** 构造图像规范提示 */rulesTip: function rulesTip() {\n      var rules = this.rules;\n      var tips = [];\n\n      /** 图像验证规则 */\n      var basicRule;\n      // 针对动态规则模式, 获取输入为空时的规则\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n      if (typeof rules === 'function') {\n        try {\n          basicRule = rules();\n        } catch (err) {\n          basicRule = {};\n        }\n      } else {\n        basicRule = rules || {};\n      }\n\n      // 宽高限制提示语\n      if (basicRule.width && basicRule.height) {\n        // 固定宽高限制\n        tips.push(\"\\u5BBD\\u9AD8 \".concat(basicRule.width, \"x\").concat(basicRule.height));\n      } else if (basicRule.width) {\n        // 固定宽限制\n        tips.push(\"\\u5BBD\\u5EA6 \".concat(basicRule.width));\n        tips.push(\"\".concat(getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)));\n      } else if (basicRule.height) {\n        // 固定高限制\n        tips.push(\"\\u9AD8\\u5EA6 \".concat(basicRule.height));\n        tips.push(\"\".concat(getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)));\n      } else {\n        // 宽高都不固定\n        tips.push(\"\".concat(getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)));\n        tips.push(\"\".concat(getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)));\n      }\n\n      // 宽高比限制提示语\n      if (basicRule.ratio) {\n        if (Array.isArray(basicRule.ratio)) {\n          tips.push(\"\\u5BBD\\u9AD8\\u6BD4 \".concat(basicRule.ratio.join(':')));\n        } else {\n          tips.push(\"\\u5BBD\\u9AD8\\u6BD4 \".concat(basicRule.ratio));\n        }\n      }\n\n      // 文件大小\n      if (basicRule.minSize || basicRule.maxSize) {\n        tips.push(getRangeTip('文件大小', basicRule.minSize, basicRule.maxSize, 'Mb'));\n      }\n\n      // 是否动态图\n      if (basicRule.allowAnimated && basicRule.allowAnimated > 0) {\n        if (basicRule.allowAnimated === 1) {\n          tips.push('不允许上传动图');\n        } else if (basicRule.allowAnimated === 1) {\n          tips.push('只允许上传动图');\n        }\n      }\n      return tips;\n    }\n  },\n  watch: {\n    /** 初始化值修改时重新初始化, 并且清空当前的编辑状态 */value: function value(val) {\n      // 初始化数据\n      this.initItemList(val);\n    }\n  },\n  mounted: function mounted() {\n    this.initItemList(this.value);\n  },\n  methods: {\n    // 处理一下上传的图片\n    // getImgUrl(url){\n    //   console.log(\"传进来的参数:\",url);\n    //   let path = url.replace(\"https://localhost\",\"/\")\n    //   console.log(\"path是:\",path);\n    //   return require(\"@/assets/image/company\"+path)\n    // },\n    /**\n     * 上传缓存中的图片\n     * @param {Array} uploadList 需要上传的缓存集合, 集合中包含回调函数\n     */\n    uploadCatch: function uploadCatch(uploadList) {\n      var _this = this;\n      var data = {};\n      uploadList.forEach(function (item, index) {\n        data[\"file_\".concat(index)] = item.img.file;\n      });\n      return this.$axios({\n        method: 'post',\n        url: '/recruit/file',\n        data: data\n      }).then(function (res) {\n        if (!Array.isArray(res) || res.length === 0) {\n          throw new Error('图像上传失败');\n        }\n        var resObj = res.reduce(function (acc, item) {\n          acc[item.key] = item;\n          return acc;\n        }, {});\n        uploadList.forEach(function (item, index) {\n          var remoteData = resObj[\"file_\".concat(index)];\n          item.cb(remoteData);\n        });\n      }).catch(function (err) {\n        uploadList.forEach(function (item) {\n          item.cb(false);\n        });\n        var msg = '图像上传失败, 请重试';\n        if (err.message) {\n          // eslint-disable-next-line\n          msg = err.message;\n        }\n        console.error(err);\n        _this.$message.error(msg);\n      });\n    },\n    /**\n     * 内置上传文件方法, 使用 debounce 优化提交效率\n     * 此处只能使用回调模式, 因为涉及 debounce 处理, promise 不可在外部改变其状态\n     * @param {Object} img 需要上传的数据项\n     * @param {Function} cb 回调函数\n     */\n    originUpload: function originUpload(img, cb) {\n      var _this2 = this;\n      // 并且一次最多上传文件数量设为可配置\n      // 添加缓存\n      catchData.push({\n        img: img,\n        cb: cb\n      });\n\n      // 等于上限, 立即上传\n      if (catchData.length === uploadLimit) {\n        var data = _toConsumableArray(catchData);\n        catchData = [];\n        clearTimeout(time);\n        time = null;\n        return this.uploadCatch(data);\n      }\n\n      // 清除上次一的定时器\n      if (time && catchData.length < uploadLimit) {\n        clearTimeout(time);\n        // 此时修改上一个 promise 状态为reslove\n      }\n\n      // 等待100ms\n      time = setTimeout(function () {\n        _this2.uploadCatch(_toConsumableArray(catchData));\n        catchData = [];\n        time = null;\n      }, 50);\n    },\n    /**\n     * 上传图像文件\n     * @param {Object} 需要上传的项, 包含文化和其它信息\n     */\n    uploadImg: function () {\n      var _uploadImg = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(item) {\n        var _this3 = this;\n        var reduceResult, result, _result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // 远程结果处理\n              reduceResult = function reduceResult(imgItem, res) {\n                // eslint-disable-next-line\n                imgItem.loading = false;\n                if (!res) {\n                  return;\n                }\n                // eslint-disable-next-line\n                imgItem.display = res.url;\n                // eslint-disable-next-line\n                imgItem.src = res.path;\n                // eslint-disable-next-line\n                imgItem.imgId = res.id;\n                // eslint-disable-next-line\n                imgItem.file = null;\n                window.URL.revokeObjectURL(imgItem.display);\n              };\n              if (!(item.status === 'input' || !item.file)) {\n                _context.next = 3;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 3:\n              // eslint-disable-next-line\n              item.loading = true;\n              if (!(this.beforeUpload && typeof this.beforeUpload === 'function')) {\n                _context.next = 12;\n                break;\n              }\n              if (!(typeof this.beforeUpload === 'function')) {\n                _context.next = 12;\n                break;\n              }\n              _context.next = 8;\n              return new Promise(function (resolve) {\n                var beforeUploadResult;\n                try {\n                  beforeUploadResult = _this3.beforeUpload(item, function (data) {\n                    resolve(!!data);\n                  });\n                } catch (err) {\n                  resolve(false);\n                }\n                // promise 模式\n                if (beforeUploadResult != null && typeof beforeUploadResult.then === 'function') {\n                  beforeUploadResult.then(function (remoteData) {\n                    resolve(!!remoteData);\n                  }).catch(function () {\n                    resolve(false);\n                  });\n                }\n              });\n            case 8:\n              result = _context.sent;\n              if (result) {\n                _context.next = 12;\n                break;\n              }\n              reduceResult(item, false);\n              return _context.abrupt(\"return\", false);\n            case 12:\n              if (!(this.remoteFuc && typeof this.remoteFuc === 'function')) {\n                _context.next = 20;\n                break;\n              }\n              _context.next = 15;\n              return new Promise(function (resolve) {\n                var remoteFucResult;\n                try {\n                  remoteFucResult = _this3.remoteFuc(item.file, function (remoteData) {\n                    resolve(remoteData || false);\n                  });\n                } catch (err) {\n                  _this3.$message.error('执行自定义上传出错');\n                  resolve(false);\n                }\n                // promise 模式\n                if (remoteFucResult != null && typeof remoteFucResult.then === 'function') {\n                  remoteFucResult.then(function (remoteData) {\n                    resolve(remoteData || false);\n                  }).catch(function () {\n                    resolve(false);\n                  });\n                }\n              });\n            case 15:\n              _result = _context.sent;\n              reduceResult(item, _result);\n              if (_result) {\n                _context.next = 19;\n                break;\n              }\n              return _context.abrupt(\"return\", false);\n            case 19:\n              return _context.abrupt(\"return\", item);\n            case 20:\n              return _context.abrupt(\"return\", new Promise(function (resolve) {\n                _this3.originUpload(item, function (data) {\n                  reduceResult(item, data);\n                  if (!data) {\n                    resolve(false);\n                  } else {\n                    resolve(item);\n                  }\n                });\n              }));\n            case 21:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function uploadImg(_x) {\n        return _uploadImg.apply(this, arguments);\n      }\n      return uploadImg;\n    }(),\n    /**\n     * 获取当前组件数据\n     */\n    getValue: function () {\n      var _getValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var itemList, isStable, min, l, i, asyncList, _i, imgInfoList, result;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              itemList = this.itemList, isStable = this.isStable, min = this.min; // 检查是否有不符合要求的空项\n              l = isStable ? itemList.length : itemList.length - 1;\n              i = 0;\n            case 3:\n              if (!(i < l)) {\n                _context2.next = 10;\n                break;\n              }\n              if (!(itemList[i].status === 'input')) {\n                _context2.next = 7;\n                break;\n              }\n              this.$message.error('当前存在未选择图片, 请全部选择');\n              return _context2.abrupt(\"return\", false);\n            case 7:\n              i += 1;\n              _context2.next = 3;\n              break;\n            case 10:\n              if (!(l < min)) {\n                _context2.next = 13;\n                break;\n              }\n              this.$message.error(\"\\u81F3\\u5C11\\u9009\\u62E9\".concat(min, \"\\u5F20\\u56FE\\u7247\"));\n              return _context2.abrupt(\"return\", false);\n            case 13:\n              // 提取需要上传文件\n              asyncList = [];\n              for (_i = 0; _i < itemList.length; _i += 1) {\n                // 跳过上传组件\n                if (itemList[_i].status !== 'input') {\n                  if (!itemList[_i].file) {\n                    asyncList.push(Promise.resolve(itemList[_i]));\n                  } else {\n                    // 上传文件后获取对应key值\n                    asyncList.push(this.uploadImg(itemList[_i]));\n                  }\n                }\n              }\n              _context2.next = 17;\n              return Promise.all(asyncList);\n            case 17:\n              imgInfoList = _context2.sent;\n              if (!imgInfoList.some(function (item) {\n                return !item;\n              })) {\n                _context2.next = 20;\n                break;\n              }\n              return _context2.abrupt(\"return\", false);\n            case 20:\n              // 如无错误, 表示图像都以上传, 开始构造数据\n              /**\n               * @type {array<ReturnItem>}\n               */\n              result = imgInfoList.map(function (item) {\n                /** @type {ReturnItem} */\n                var val = {\n                  id: item.status === 'new' ? '' : item.id,\n                  imgId: item.imgId || null,\n                  src: item.src || null,\n                  display: item.display,\n                  width: item.width || null,\n                  height: item.height || null,\n                  fileSize: item.size || null,\n                  fileName: item.name || null,\n                  fileType: item.type || null,\n                  isAnimated: item.isAnimated || null\n                };\n                return val;\n              }); // 获取数据成功后发出\n              this.$emit('upload', result);\n              return _context2.abrupt(\"return\", result);\n            case 23:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getValue() {\n        return _getValue.apply(this, arguments);\n      }\n      return getValue;\n    }(),\n    /**\n     * 删除某项\n     * @param {Number|String} id 删除项 id\n     */\n    delItem: function delItem(id) {\n      var itemList = this.itemList,\n        isStable = this.isStable;\n      // 根据id找到对应项\n      var index = itemList.findIndex(function (item) {\n        return item.id === id;\n      });\n      var blobUrl = itemList[index].display;\n      if (isStable) {\n        // 固定数量图片, 删除后留下空项\n        itemList[index] = createItem();\n        this.itemList = _toConsumableArray(itemList);\n      } else {\n        itemList.splice(index, 1);\n      }\n      // 释放内存\n      window.URL.revokeObjectURL(blobUrl);\n      this.initItemList(this.itemList);\n    },\n    /**\n     * 预览图像\n     * @param {Object} data 需要预览的项的数据\n     * @param {Number} index 索引序号\n     */\n    previewImg: function previewImg(data, index) {\n      // 如果有全局预览方法\n      if (this[this.globalImgPriview]) {\n        var images = [];\n        this.itemList.forEach(function (element) {\n          if (element.display) {\n            images.push(element.display);\n          }\n        });\n        this[this.globalImgPriview]({\n          images: images,\n          index: index\n        });\n      } else {\n        // element 原生粗糙模式\n        this.$confirm(\"<img src=\\\"\".concat(data.display, \"\\\" style=\\\"width: 100%;\\\" />\"), '预览', {\n          dangerouslyUseHTMLString: true\n        });\n      }\n    },\n    /**\n     * 移动图像位置\n     * @param {Number|String} id 操作项的 id\n     * @param {Number} step 移动的偏移量\n     */\n    move: function move(id, step) {\n      var itemList = this.itemList,\n        isStable = this.isStable;\n      // 找到操作的元素\n      var index = itemList.findIndex(function (item) {\n        return item.id === id;\n      });\n      // 边界检测\n      if (index + step < 0 || index + step >= itemList.length) return;\n      // 非固定项时, 不可和最后一项输入换位子\n      if (!isStable && index + step === itemList.length - 1) {\n        if (itemList[itemList.length - 1].status === 'input') return;\n      }\n      var i = itemList[index];\n      var j = itemList[index + step];\n      itemList[index] = j;\n      itemList[index + step] = i;\n      this.itemList = _toConsumableArray(itemList);\n    },\n    /**\n     * 验证上传的图像是否符合要求\n     * @param {LocalFileInfo} imgInfo 图像信息, 包括文件名, 宽高\n     */\n    validateImg: function () {\n      var _validateImg = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(imgInfo) {\n        var rules, rule, ratio;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              rules = this.rules;\n              /** @type ValidateRule */\n              // 针对动态规则模式, 获取输入为空时的规则\n              // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n              if (typeof rules === 'function') {\n                try {\n                  rule = rules(imgInfo);\n                } catch (err) {\n                  rule = {};\n                }\n              } else {\n                rule = rules;\n              }\n              if (!(rule.allowAnimated && rule.allowAnimated > 0)) {\n                _context3.next = 11;\n                break;\n              }\n              if (!(imgInfo.isAnimated === null)) {\n                _context3.next = 7;\n                break;\n              }\n              this.$message.error('要进行是否动图验证需要配置 \"animated-check\" 属性为 true');\n              _context3.next = 11;\n              break;\n            case 7:\n              if (!(rule.allowAnimated === 1 && imgInfo.isAnimated)) {\n                _context3.next = 9;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u4E3A\\u52A8\\u6001\\u56FE, \\u4E0D\\u5141\\u8BB8\\u4E0A\\u4F20\"));\n            case 9:\n              if (!(rule.allowAnimated === 2 && !imgInfo.isAnimated)) {\n                _context3.next = 11;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u4E3A\\u9759\\u6001\\u56FE, \\u53EA\\u5141\\u8BB8\\u4E0A\\u4F20\\u52A8\\u6001\\u56FE\"));\n            case 11:\n              if (!rule.width) {\n                _context3.next = 16;\n                break;\n              }\n              if (!(imgInfo.width !== rule.width)) {\n                _context3.next = 14;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u9700\\u4E3A\").concat(rule.width));\n            case 14:\n              _context3.next = 20;\n              break;\n            case 16:\n              if (!(rule.minWidth && imgInfo.width < rule.minWidth)) {\n                _context3.next = 18;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u5C11\\u4E3A\").concat(rule.minWidth));\n            case 18:\n              if (!(rule.maxWidth && imgInfo.width > rule.maxWidth)) {\n                _context3.next = 20;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u591A\\u4E3A\").concat(rule.maxWidth));\n            case 20:\n              if (!rule.height) {\n                _context3.next = 25;\n                break;\n              }\n              if (!(imgInfo.height !== rule.height)) {\n                _context3.next = 23;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u9AD8\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u9700\\u4E3A\").concat(rule.height));\n            case 23:\n              _context3.next = 29;\n              break;\n            case 25:\n              if (!(rule.minHeight && imgInfo.height < rule.minHeight)) {\n                _context3.next = 27;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u9AD8\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u5C11\\u4E3A\").concat(rule.minHeight));\n            case 27:\n              if (!(rule.maxHeight && imgInfo.height > rule.maxHeight)) {\n                _context3.next = 29;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u9AD8\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u591A\\u4E3A\").concat(rule.maxHeight));\n            case 29:\n              if (!rule.ratio) {\n                _context3.next = 34;\n                break;\n              }\n              if (Array.isArray(rule.ratio)) {\n                ratio = rule.ratio[0] / rule.ratio[1];\n              } else {\n                // eslint-disable-next-line\n                ratio = rule.ratio;\n              }\n              ratio = ratio.toFixed(2);\n              if (!((imgInfo.width / imgInfo.height).toFixed(2) !== ratio)) {\n                _context3.next = 34;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u5BBD\\u9AD8\\u6BD4\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u9700\\u4E3A\").concat(ratio));\n            case 34:\n              if (!(rule.minSize && imgInfo.size < rule.minSize * ONE_MB)) {\n                _context3.next = 36;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u6587\\u4EF6\\u5927\\u5C0F\\u6BD4\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u5C11\\u4E3A\").concat(rule.minSize, \"Mb\"));\n            case 36:\n              if (!(rule.maxSize && imgInfo.size > rule.maxSize * ONE_MB)) {\n                _context3.next = 38;\n                break;\n              }\n              throw new Error(\"\\\"\".concat(imgInfo.name, \"\\\"\\u56FE\\u50CF\\u6587\\u4EF6\\u5927\\u5C0F\\u6BD4\\u4E0D\\u7B26\\u5408\\u8981\\u6C42, \\u81F3\\u591A\\u4E3A\").concat(rule.maxSize, \"Mb\"));\n            case 38:\n              return _context3.abrupt(\"return\", true);\n            case 39:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function validateImg(_x2) {\n        return _validateImg.apply(this, arguments);\n      }\n      return validateImg;\n    }(),\n    /**\n     * 选择图像文件后处理, 包括获取图像信息, 验证图像等\n     * @param {Event} e input change 事件对象\n     */\n    handleChange: function () {\n      var _handleChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(e) {\n        var _this4 = this;\n        var currentId, autoUpload, files, imgInfoList, cache, handleImg, asyncList, i, _i2;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              currentId = this.currentId, autoUpload = this.autoUpload;\n              files = e.target.files;\n              if (files) {\n                _context5.next = 4;\n                break;\n              }\n              return _context5.abrupt(\"return\");\n            case 4:\n              /** 中间步骤缓存, 在出错时用于释放 createObjectURL 的内存 */\n              cache = [];\n              /**\n               * 处理单个图片, 返回处理成功的图片数据\n               * @param {File} file 图片文件\n               */\n              handleImg = /*#__PURE__*/function () {\n                var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(file) {\n                  var info;\n                  return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                    while (1) switch (_context4.prev = _context4.next) {\n                      case 0:\n                        _context4.prev = 0;\n                        _context4.next = 3;\n                        return _this4.getImgInfo(file);\n                      case 3:\n                        info = _context4.sent;\n                        cache.push(info);\n                        // 验证图像信息\n                        _context4.next = 7;\n                        return _this4.validateImg(info);\n                      case 7:\n                        return _context4.abrupt(\"return\", info);\n                      case 10:\n                        _context4.prev = 10;\n                        _context4.t0 = _context4[\"catch\"](0);\n                        throw _context4.t0;\n                      case 13:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }, _callee4, null, [[0, 10]]);\n                }));\n                return function handleImg(_x4) {\n                  return _ref.apply(this, arguments);\n                };\n              }();\n              asyncList = [];\n              for (i = 0; i < files.length; i += 1) {\n                asyncList.push(handleImg(files[i]));\n              }\n              _context5.prev = 8;\n              _context5.next = 11;\n              return Promise.all(asyncList);\n            case 11:\n              imgInfoList = _context5.sent;\n              // 设置图片信息\n              this.setImgInfo(imgInfoList, currentId);\n              // 开启自动上传\n              if (autoUpload) {\n                this.itemList.forEach(function (ele) {\n                  _this4.uploadImg(ele);\n                });\n              }\n              _context5.next = 22;\n              break;\n            case 16:\n              _context5.prev = 16;\n              _context5.t0 = _context5[\"catch\"](8);\n              // 清空缓存\n              for (_i2 = 0; _i2 < cache.length; _i2 += 1) {\n                window.URL.revokeObjectURL(cache[_i2].localSrc);\n              }\n              cache = null;\n              console.error(_context5.t0);\n              this.$message.error(_context5.t0.message);\n            case 22:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this, [[8, 16]]);\n      }));\n      function handleChange(_x3) {\n        return _handleChange.apply(this, arguments);\n      }\n      return handleChange;\n    }(),\n    /**\n     * 根据信息列表设置图像信息\n     * 用户选择图片, 图片通过验证后可获取到图像信息数组\n     * 将这一组图像信息数据设置在 itemList 中\n     * @param {Array<LocalFileInfo>} imgInfoList 需要设置的图像数组\n     * @param {Number|String} id 操作项的 id\n     */\n    setImgInfo: function setImgInfo() {\n      var imgInfoList = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var currentId = arguments.length > 1 ? arguments[1] : undefined;\n      var max = this.max,\n        itemList = this.itemList;\n      // 找到特定图像位置\n      var index = this.itemList.findIndex(function (item) {\n        return item.id === currentId;\n      });\n      // 释放内存\n      window.URL.revokeObjectURL(this.itemList[index].display);\n      // 替换图片\n      this.itemList[index] = createItem(imgInfoList[0], this.itemList[index]);\n      // 如果需要设置的图像数量大于1, 需要执行追加图片逻辑\n      if (imgInfoList.length > 1) {\n        // 最大图片数量限制\n        var l = imgInfoList.length;\n        if (this.isStable) {\n          // 固定数量模式, 按次序插入空项\n          for (var i = 0, k = 1; i < max && k < l; i += 1) {\n            if (itemList[i].status === 'input') {\n              this.itemList[i] = createItem(imgInfoList[k]);\n              k += 1;\n            }\n          }\n        } else {\n          var empty = max - itemList.length;\n          if (max && l > empty) {\n            l = empty;\n          }\n          if (itemList[itemList.length - 1].status === 'input') {\n            this.itemList.pop();\n          }\n          for (var _i3 = 1; _i3 <= l; _i3 += 1) {\n            this.itemList.push(createItem(imgInfoList[_i3]));\n          }\n        }\n      }\n\n      // 初始化图片\n      this.initItemList(this.itemList);\n    },\n    /**\n     * 支持键盘操作\n     * @param {Event} e 键盘事件对象\n     * @param {Number|String} id 操作项的 id\n     */\n    handleKeydown: function handleKeydown(e, id) {\n      if (e.target !== e.currentTarget) return;\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick(id);\n      }\n    },\n    /**\n     * 处理点击事件, 并转移到文件上传元素\n     * 并记录当前操作元素 id\n     * @param {Number|String} id 操作项的 id\n     */\n    handleClick: function handleClick(id) {\n      if (!this.disabled) {\n        this.currentId = id || '';\n        this.$refs.input.value = null;\n        this.$refs.input.click();\n      }\n    },\n    /**\n     * 初始化 itemList\n     * @param {Array} val 初始化的数据数组\n     */\n    initItemList: function initItemList(val) {\n      var max = this.max,\n        isStable = this.isStable,\n        disabled = this.disabled;\n      var result = [];\n\n      // 初始值不存在情况\n      // 包括初始值不合法\n      if (!val || !Array.isArray(val) || val.length === 0) {\n        // 固定数量图像上传, 直接初始化固定数量的上传控件\n        if (isStable) {\n          for (var i = 0; i < max; i += 1) {\n            result.push(createItem());\n          }\n          this.itemList = result;\n          return;\n        }\n        // 如果不是固定上传数量, 则仅创建一个空项\n        result.push(createItem());\n        this.itemList = result;\n        return;\n      }\n\n      // 存在初始值\n      for (var _i4 = 0; _i4 < val.length; _i4 += 1) {\n        result.push(createItem(val[_i4]));\n      }\n      // 初始项小于最大数量限制, 并且处于可编辑状态, 并且最后一项不是input\n      if ((max === 0 || val.length < max) && !disabled && val[val.length - 1].status !== 'input') {\n        // 后面添加空项\n        result.push(createItem());\n      }\n      this.itemList = result;\n    },\n    /**\n     * 获取图像信息\n     * @param {File} file 文件对象\n     * @returns {LocalFileInfo} 信息对象\n     */\n    getImgInfo: function () {\n      var _getImgInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(file) {\n        var animatedCheck, localSrc, fileType, isAnimated;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              animatedCheck = this.animatedCheck;\n              localSrc = window.URL.createObjectURL(file); // 严格检测文件类型\n              _context6.next = 4;\n              return getFileType(file);\n            case 4:\n              fileType = _context6.sent;\n              // 检测是否是动图\n              isAnimated = null;\n              if (!animatedCheck) {\n                _context6.next = 10;\n                break;\n              }\n              _context6.next = 9;\n              return checkIsAnimated({\n                file: file,\n                fileType: fileType,\n                fileUrl: localSrc\n              });\n            case 9:\n              isAnimated = _context6.sent;\n            case 10:\n              return _context6.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var image = new Image();\n                image.src = localSrc;\n                image.onload = function () {\n                  /**\n                   * @type {LocalFileInfo}\n                   */\n                  var localFileInfo = {\n                    localSrc: localSrc,\n                    file: file,\n                    width: image.width,\n                    height: image.height,\n                    name: file.name,\n                    size: file.size,\n                    type: fileType === 'unknow' ? file.type : fileType,\n                    lastModified: file.lastModified,\n                    isAnimated: isAnimated\n                  };\n                  resolve(localFileInfo);\n                  image = null;\n                };\n                image.onerror = function () {\n                  reject(new Error('图像加载失败'));\n                  image = null;\n                };\n              }));\n            case 11:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function getImgInfo(_x5) {\n        return _getImgInfo.apply(this, arguments);\n      }\n      return getImgInfo;\n    }(),\n    /** 清空全部图片 */clear: function clear() {\n      this.initItemList([]);\n      this.getValue();\n    },\n    /** 重置图片数据传入属性 */reset: function reset() {\n      this.initItemList(this.value);\n    }\n  }\n};",{"version":3,"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","return","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","catch","_catch","delegateYield","asyncGeneratorStep","gen","reject","_next","_throw","key","info","error","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","minLen","_arrayLikeToArray","toString","Array","from","test","iter","isArray","len","arr2","getFileType","checkIsAnimated","isEmptyObj","createId","ONE_KB","ONE_MB","createItem","data","oldData","item","loading","id","status","src","display","imgId","file","localSrc","assign","getRangeTip","prx","min","max","unit","str","concat","uploadLimit","catchData","time","itemList","currentId","globalImgPriview","props","width","Number","String","default","height","autoUpload","Boolean","_default","accept","minNum","maxNum","sortable","preview","multiple","rules","Function","maxSize","disabled","beforeUpload","remoteFuc","fit","animatedCheck","computed","boxStyle","style","cursor","fontSize","maxText","toFixed","textAlign","position","alignItems","justifyContent","overflow","lineHeight","flexDirection","parseInt","isStable","rulesTip","tips","basicRule","minHeight","maxHeight","minWidth","maxWidth","ratio","join","minSize","allowAnimated","watch","val","initItemList","mounted","methods","uploadCatch","uploadList","_this","index","img","$axios","url","res","resObj","reduce","acc","remoteData","cb","msg","message","console","$message","originUpload","_this2","clearTimeout","setTimeout","uploadImg","_uploadImg","_callee","_this3","reduceResult","result","_result","_callee$","_context","imgItem","path","window","URL","revokeObjectURL","beforeUploadResult","remoteFucResult","_x","getValue","_getValue","_callee2","asyncList","_i","imgInfoList","_callee2$","_context2","all","some","map","fileSize","size","fileName","fileType","isAnimated","$emit","delItem","findIndex","blobUrl","splice","previewImg","images","element","$confirm","dangerouslyUseHTMLString","move","step","j","validateImg","_validateImg","_callee3","imgInfo","rule","_callee3$","_context3","_x2","handleChange","_handleChange","_callee5","_this4","files","cache","handleImg","_i2","_callee5$","_context5","target","_ref","_callee4","_callee4$","_context4","getImgInfo","t0","_x4","setImgInfo","ele","_x3","k","empty","handleKeydown","currentTarget","keyCode","handleClick","$refs","input","click","_getImgInfo","_callee6","_callee6$","_context6","createObjectURL","fileUrl","image","Image","onload","localFileInfo","lastModified","onerror","_x5","clear"],"sources":["src/component/base/upload-image/index.vue"],"sourcesContent":["<!--\n Component: UploadImgs\n Describe: 多图片上传组件, 附有预览, 排序, 验证等功能\n\ntodo: 使用中间件模式优化信息装载和验证功能\ntodo: 文件判断使用 serveWorker 优化性能\n-->\n\n<template>\n  <div class=\"upload-imgs-container\" v-loading=\"loading\">\n    <template v-for=\"(item, i) in itemList\">\n      <template v-if=\"item.display\">\n        <div class=\"thumb-item\" :key=\"item.id\" :style=\"boxStyle\" v-loading=\"item.loading\">\n          <el-image class=\"thumb-item-img\" :src=\"item.display\" :fit=\"fit\" style=\"width: 100%; height: 100%;\"></el-image>\n          <div class=\"info\">\n            <i v-if=\"item.file\" class=\"el-icon-upload wait-upload\" @click.prevent.stop=\"delItem(item.id)\"\n              title=\"等待上传\"></i>\n          </div>\n          <div class=\"control\">\n            <i v-if=\"!disabled\" class=\"el-icon-close del\" @click.prevent.stop=\"delItem(item.id)\" title=\"删除\"></i>\n            <div v-if=\"!disabled\" class=\"preview\" title=\"更换图片\" @click.prevent.stop=\"handleClick(item.id)\">\n              <i class=\"el-icon-edit\"></i>\n            </div>\n            <div class=\"control-bottom\" v-if=\"sortable || preview\">\n              <i v-if=\"sortable && !disabled\" title=\"前移\" class=\"control-bottom-btn el-icon-back\"\n                :class=\"{ disabled: i === 0 }\" @click.stop=\"move(item.id, -1)\"></i>\n              <i v-if=\"preview\" class=\"control-bottom-btn el-icon-view\" title=\"预览\" style=\"cursor: pointer;\"\n                @click.stop=\"previewImg(item, i)\"></i>\n              <i v-if=\"sortable && !disabled\" title=\"后移\" class=\"control-bottom-btn el-icon-right\"\n                :class=\"{ disabled: i === itemList.length - 1 }\" @click.stop=\"move(item.id, 1)\"></i>\n            </div>\n          </div>\n        </div>\n      </template>\n      <template v-else>\n        <div class=\"upload-item\" :class=\"{ disabled: disabled }\" :key=\"item.id\" :style=\"boxStyle\"\n          @click=\"handleClick(item.id)\" @keydown=\"handleKeydown($event, item.id)\">\n          <i class=\"el-icon-plus\" style=\"font-size: 3em;\"></i>\n          <div v-html=\"rulesTip.join('<br>')\" style=\"margin-top: 1em;\"></div>\n        </div>\n      </template>\n    </template>\n    <input class=\"upload-imgs__input\" type=\"file\" ref=\"input\" @change=\"handleChange\" :multiple=\"multiple\"\n      :accept=\"accept\" />\n  </div>\n</template>\n\n<script>\nimport { getFileType, checkIsAnimated, isEmptyObj, createId } from './utils'\n\n/**\n * 本地图像通过验证后构造的信息对象\n * @typedef {Object<string, number, any>} LocalFileInfo\n * @property {string} localSrc 本地图像预览地址\n * @property {File} file 本地图像文件\n * @property {number} width 宽\n * @property {number} height 高\n * @property {string} name 文件名\n * @property {number} size 文件大小\n * @property {string} type 文件的媒体类型 (MIME)\n * @property {Date} lastModified 文件最后修改时间\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * 初始化的图片如果没有传入字段, 则值为空 null\n * @typedef {Object<string, number>} ReturnItem\n * @property {number|string} id 初始化数据的 id\n * @property {number|string} imgId 图像资源 id\n * @property {string} src 文件相对路径\n * @property {string} display 图像完整地址\n * @property {number} height 高\n * @property {number} width 宽\n * @property {string} fileName 文件名\n * @property {string} fileType 文件的媒体类型 (MIME), 针对部分文件类型做了检测\n * @property {boolean} isAnimated 是否是动态图, 如果不进行检测则为 null\n */\n\n/**\n * 返回数据对象\n * @typedef {Object} ValidateRule\n * @property {array|number} ratio 比例 [宽，高], 或者 宽/高 的数值\n * @property {number} width 宽度必需等于\n * @property {number} height 高度必需等于\n * @property {number} minWidth 最小宽\n * @property {number} minHeight 最小高\n * @property {number} minSize 最小 size（Mb)\n * @property {number} maxSize 最大 size（Mb)\n * @property {number} allowAnimated 是否允许上传动图, 0 不检测, 1 不允许动图, 2 只允许动图. 要检查此项, 需设置属性 animated-check 为 true\n */\n\nconst ONE_KB = 1024\nconst ONE_MB = ONE_KB * 1024\n\n/**\n * 创建项, 如不传入参数则创建空项\n * status 状态转换说明:\n *  - 如果不传入参数, 创建上传空项, status: input\n *  - 如果只传入 data, 不传入 oldData\n *    - data 是本地数据(数据中是否携带id), status: new\n *    - data 不是本地数据(来源可能是初始化或是其他), status 与原状态保持一致, 如果没有原状态就是 init\n *  - data 与 oldData 都传入\n *    - data 为本地数据, oldData 是 input/new, status: new\n *    - data 为本地数据, oldData 是 init/edit, status: edit\n *    - data 不是本地数据, status 与原状态保持一致, 如果没有原状态就是 init\n * @returns {Item}\n */\nfunction createItem(data = null, oldData = {}) {\n  let item = {\n    loading: false,\n    id: createId(),\n    status: 'input', // new/edit/del/init/input\n    src: '', // 图像相对地址\n    display: '', // 图像完整地址, 用于显示\n    imgId: '', // 图像资源 id\n  }\n  // 未传入data, 说明是单纯新建, 单纯新建的值是输入框状态\n  if (!data) {\n    return item\n  }\n  // 判断是否是本地图片\n  if (data.file && !data.id) {\n    if (!isEmptyObj(oldData)) {\n      // 如果旧数据状态是输入框, 则为新图片\n      if (oldData.status === 'input' || oldData.status === 'new') {\n        item.status = 'new'\n      }\n      // 如果旧数据状态是初始化 init, 则为修改\n      if (oldData.status === 'init' || oldData.status === 'edit') {\n        item.status = 'edit'\n      }\n    } else {\n      item.status = 'new'\n    }\n\n    // 本地数据初始化\n    item.id = oldData.id || item.id\n    item.src = ''\n    item.imgId = ''\n    item.display = data.localSrc || item.display\n    item = Object.assign({}, data, item)\n    return item\n  }\n\n  // 存在id, 说明是传入已存在数据\n  item.id = data.id || createId()\n  item.imgId = data.imgId || item.imgId\n  item.src = data.src || item.src\n  item.display = data.display || item.display\n  item.status = data.status || 'init'\n  item = Object.assign({}, data, item)\n  return item\n}\n\n/**\n * 获取范围类型限制的提示文本\n * @param {String} prx 提示前缀\n * @param {Number} min 范围下限\n * @param {Number} max 范围上限\n * @param {String} unit 单位\n */\nfunction getRangeTip(prx, min, max, unit = '') {\n  let str = prx\n  if (min && max) {\n    // 有范围限制\n    str += ` ${min}${unit}~${max}${unit}`\n  } else if (min) {\n    // 只有最小范围\n    str += ` ≥ ${min}${unit}`\n  } else if (max) {\n    // 只有最大范围\n    str += ` ≤ ${max}${unit}`\n  } else {\n    // 无限制\n    str += '无限制'\n  }\n  return str\n}\n\n/** for originUpload: 一次请求最多的文件数量 */\nconst uploadLimit = 10\n/** for originUpload: 文件对象缓存 */\nlet catchData = []\n/** for originUpload: 计时器缓存 */\nlet time\n\nexport default {\n  name: 'UploadImgs',\n  data() {\n    return {\n      itemList: [],\n      loading: false,\n      currentId: '', // 正在操作项的id\n      globalImgPriview: '$imagePreview', // 全局图片预览方法名\n    }\n  },\n  props: {\n    /** 每一项宽度 */\n    width: {\n      type: [Number, String],\n      default: 160,\n    },\n    /** 每一项高度 */\n    height: {\n      type: [Number, String],\n      default: 160,\n    },\n    /** 是否开启自动上传 */\n    autoUpload: {\n      type: Boolean,\n      default: true,\n    },\n    /** 初始化数据 */\n    value: {\n      type: Array,\n      default: () => [],\n    },\n    /** 接受的文件类型 */\n    accept: {\n      type: String,\n      default: 'image/*',\n    },\n    /** 最少图片数量 */\n    minNum: {\n      type: Number,\n      default: 0,\n    },\n    /** 最多图片数量, 0 表示无限制 */\n    maxNum: {\n      type: Number,\n      default: 0,\n    },\n    /** 是否可排序 */\n    sortable: {\n      type: Boolean,\n      default: false,\n    },\n    /** 是否可预览 */\n    preview: {\n      type: Boolean,\n      default: true,\n    },\n    /** 是否可以一次多选 */\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n    /** 图像验证规则 */\n    rules: {\n      type: [Object, Function],\n      default: () => ({\n        maxSize: 2,\n      }),\n    },\n    /** 是否禁用, 禁用后只可展示 不可进行编辑操作, 包括: 新增, 修改, 删除, 改变顺序 */\n    disabled: {\n      type: Boolean,\n      default: false,\n    },\n    /** 上传前插入方法, 属于高级用法 */\n    beforeUpload: {\n      type: Function,\n      default: null,\n    },\n    /** 重写上传方法, 如果重写则覆盖组件内上传方法 */\n    remoteFuc: {\n      type: Function,\n      default: null,\n    },\n    /** 图像显示模式 */\n    fit: {\n      type: String,\n      default: 'contain',\n    },\n    /** 检测是否是动图 */\n    animatedCheck: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  computed: {\n    /** 每项容器样式 */\n    boxStyle() {\n      const { width, height, disabled } = this\n      const style = {}\n      if (typeof width === 'number') {\n        style.width = `${width}px`\n      } else if (typeof width === 'string') {\n        style.width = width\n      }\n      if (typeof height === 'number') {\n        style.height = `${height}px`\n      } else if (typeof height === 'string') {\n        style.height = height\n      }\n      if (disabled) {\n        style.cursor = 'not-allowed'\n      } else {\n        style.cursor = 'pointer'\n      }\n\n      /** 提示字体最大尺寸 */\n      let fontSize = 12\n      /** 每行提示预设 */\n      const maxText = 8\n      if (typeof width === 'number' && width / maxText < fontSize) {\n        fontSize = (width / maxText).toFixed(2)\n      }\n      style.fontSize = `${fontSize}px`\n      style.textAlign = 'center'\n      style.position = 'relative'\n      style.display = 'flex'\n      style.alignItems = 'center'\n      style.justifyContent = 'center'\n      style.overflow = 'hidden'\n      style.lineHeight = '1.3'\n      style.flexDirection = 'column'\n\n      return style\n    },\n    /**\n     * 上传图像数量下限\n     * @returns {Number}\n     */\n    min() {\n      const { minNum } = this\n      return minNum < 0 ? 0 : parseInt(minNum, 10)\n    },\n    /**\n     * 上传图像数量上限\n     * @returns {Number}\n     */\n    max() {\n      const { min, maxNum } = this\n      // 兼容用最大值小于最小值情况\n      return maxNum < min ? min : parseInt(maxNum, 10)\n    },\n    /**\n     * 是否是固定数量(最小等于最大)\n     * @returns {Boolean}\n     */\n    isStable() {\n      const { min, max } = this\n      return max !== 0 && min === max\n    },\n    /** 构造图像规范提示 */\n    rulesTip() {\n      const { rules } = this\n      const tips = []\n\n      /** 图像验证规则 */\n      let basicRule\n      // 针对动态规则模式, 获取输入为空时的规则\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n      if (typeof rules === 'function') {\n        try {\n          basicRule = rules()\n        } catch (err) {\n          basicRule = {}\n        }\n      } else {\n        basicRule = rules || {}\n      }\n\n      // 宽高限制提示语\n      if (basicRule.width && basicRule.height) {\n        // 固定宽高限制\n        tips.push(`宽高 ${basicRule.width}x${basicRule.height}`)\n      } else if (basicRule.width) {\n        // 固定宽限制\n        tips.push(`宽度 ${basicRule.width}`)\n        tips.push(`${getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)}`)\n      } else if (basicRule.height) {\n        // 固定高限制\n        tips.push(`高度 ${basicRule.height}`)\n        tips.push(`${getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)}`)\n      } else {\n        // 宽高都不固定\n        tips.push(`${getRangeTip('宽度', basicRule.minWidth, basicRule.maxWidth)}`)\n        tips.push(`${getRangeTip('高度', basicRule.minHeight, basicRule.maxHeight)}`)\n      }\n\n      // 宽高比限制提示语\n      if (basicRule.ratio) {\n        if (Array.isArray(basicRule.ratio)) {\n          tips.push(`宽高比 ${basicRule.ratio.join(':')}`)\n        } else {\n          tips.push(`宽高比 ${basicRule.ratio}`)\n        }\n      }\n\n      // 文件大小\n      if (basicRule.minSize || basicRule.maxSize) {\n        tips.push(getRangeTip('文件大小', basicRule.minSize, basicRule.maxSize, 'Mb'))\n      }\n\n      // 是否动态图\n      if (basicRule.allowAnimated && basicRule.allowAnimated > 0) {\n        if (basicRule.allowAnimated === 1) {\n          tips.push('不允许上传动图')\n        } else if (basicRule.allowAnimated === 1) {\n          tips.push('只允许上传动图')\n        }\n      }\n\n      return tips\n    },\n  },\n  watch: {\n    /** 初始化值修改时重新初始化, 并且清空当前的编辑状态 */\n    value(val) {\n      // 初始化数据\n      this.initItemList(val)\n    },\n  },\n  mounted() {\n    this.initItemList(this.value)\n  },\n  methods: {\n    // 处理一下上传的图片\n    // getImgUrl(url){\n    //   console.log(\"传进来的参数:\",url);\n    //   let path = url.replace(\"https://localhost\",\"/\")\n    //   console.log(\"path是:\",path);\n    //   return require(\"@/assets/image/company\"+path)\n    // },\n    /**\n     * 上传缓存中的图片\n     * @param {Array} uploadList 需要上传的缓存集合, 集合中包含回调函数\n     */\n    uploadCatch(uploadList) {\n      const data = {}\n      uploadList.forEach((item, index) => {\n        data[`file_${index}`] = item.img.file\n      })\n      return this.$axios({\n        method: 'post',\n        url: '/recruit/file',\n        data,\n      })\n        .then(res => {\n          if (!Array.isArray(res) || res.length === 0) {\n            throw new Error('图像上传失败')\n          }\n\n          const resObj = res.reduce((acc, item) => {\n            acc[item.key] = item\n            return acc\n          }, {})\n\n          uploadList.forEach((item, index) => {\n            const remoteData = resObj[`file_${index}`]\n            item.cb(remoteData)\n          })\n        })\n        .catch(err => {\n          uploadList.forEach(item => {\n            item.cb(false)\n          })\n          let msg = '图像上传失败, 请重试'\n          if (err.message) {\n            // eslint-disable-next-line\n            msg = err.message\n          }\n          console.error(err)\n          this.$message.error(msg)\n        })\n    },\n    /**\n     * 内置上传文件方法, 使用 debounce 优化提交效率\n     * 此处只能使用回调模式, 因为涉及 debounce 处理, promise 不可在外部改变其状态\n     * @param {Object} img 需要上传的数据项\n     * @param {Function} cb 回调函数\n     */\n    originUpload(img, cb) {\n      // 并且一次最多上传文件数量设为可配置\n      // 添加缓存\n      catchData.push({\n        img,\n        cb,\n      })\n\n      // 等于上限, 立即上传\n      if (catchData.length === uploadLimit) {\n        const data = [...catchData]\n        catchData = []\n        clearTimeout(time)\n        time = null\n        return this.uploadCatch(data)\n      }\n\n      // 清除上次一的定时器\n      if (time && catchData.length < uploadLimit) {\n        clearTimeout(time)\n        // 此时修改上一个 promise 状态为reslove\n      }\n\n      // 等待100ms\n      time = setTimeout(() => {\n        this.uploadCatch([...catchData])\n        catchData = []\n        time = null\n      }, 50)\n    },\n    /**\n     * 上传图像文件\n     * @param {Object} 需要上传的项, 包含文化和其它信息\n     */\n    async uploadImg(item) {\n      // 远程结果处理\n      const reduceResult = (imgItem, res) => {\n        // eslint-disable-next-line\n        imgItem.loading = false\n        if (!res) {\n          return\n        }\n        // eslint-disable-next-line\n        imgItem.display = res.url\n        // eslint-disable-next-line\n        imgItem.src = res.path\n        // eslint-disable-next-line\n        imgItem.imgId = res.id\n        // eslint-disable-next-line\n        imgItem.file = null\n        window.URL.revokeObjectURL(imgItem.display)\n      }\n\n      if (item.status === 'input' || !item.file) {\n        return\n      }\n      // eslint-disable-next-line\n      item.loading = true\n      if (this.beforeUpload && typeof this.beforeUpload === 'function') {\n        if (typeof this.beforeUpload === 'function') {\n          const result = await new Promise(resolve => {\n            let beforeUploadResult\n            try {\n              beforeUploadResult = this.beforeUpload(item, data => {\n                resolve(!!data)\n              })\n            } catch (err) {\n              resolve(false)\n            }\n            // promise 模式\n            if (beforeUploadResult != null && typeof beforeUploadResult.then === 'function') {\n              beforeUploadResult\n                .then(remoteData => {\n                  resolve(!!remoteData)\n                })\n                .catch(() => {\n                  resolve(false)\n                })\n            }\n          })\n          if (!result) {\n            reduceResult(item, false)\n            return false\n          }\n        }\n      }\n      // 如果是用户自定义方法\n      // 出于简化 api 的考虑, 只允许单个文件上传, 不进行代理\n      if (this.remoteFuc && typeof this.remoteFuc === 'function') {\n        const result = await new Promise(resolve => {\n          let remoteFucResult\n          try {\n            remoteFucResult = this.remoteFuc(item.file, remoteData => {\n              resolve(remoteData || false)\n            })\n          } catch (err) {\n            this.$message.error('执行自定义上传出错')\n            resolve(false)\n          }\n          // promise 模式\n          if (remoteFucResult != null && typeof remoteFucResult.then === 'function') {\n            remoteFucResult\n              .then(remoteData => {\n                resolve(remoteData || false)\n              })\n              .catch(() => {\n                resolve(false)\n              })\n          }\n        })\n        reduceResult(item, result)\n        if (!result) {\n          return false\n        }\n        return item\n      }\n\n      // 使用内置上传\n      return new Promise(resolve => {\n        this.originUpload(item, data => {\n          reduceResult(item, data)\n          if (!data) {\n            resolve(false)\n          } else {\n            resolve(item)\n          }\n        })\n      })\n    },\n    /**\n     * 获取当前组件数据\n     */\n    async getValue() {\n      const { itemList, isStable, min } = this\n      // 检查是否有不符合要求的空项\n      const l = isStable ? itemList.length : itemList.length - 1\n      for (let i = 0; i < l; i += 1) {\n        if (itemList[i].status === 'input') {\n          this.$message.error('当前存在未选择图片, 请全部选择')\n          return false\n        }\n      }\n      if (l < min) {\n        this.$message.error(`至少选择${min}张图片`)\n        return false\n      }\n      // 提取需要上传文件\n      const asyncList = []\n\n      for (let i = 0; i < itemList.length; i += 1) {\n        // 跳过上传组件\n        if (itemList[i].status !== 'input') {\n          if (!itemList[i].file) {\n            asyncList.push(Promise.resolve(itemList[i]))\n          } else {\n            // 上传文件后获取对应key值\n            asyncList.push(this.uploadImg(itemList[i]))\n          }\n        }\n      }\n      const imgInfoList = await Promise.all(asyncList)\n      // const imgInfoList = this.itemList.filter(item => (item.status !== 'input'))\n\n      // 检查是否有上传失败的图像\n      // 如果有失败的上传, 则返回错误\n      if (imgInfoList.some(item => !item)) {\n        return false\n      }\n\n      // 如无错误, 表示图像都以上传, 开始构造数据\n      /**\n       * @type {array<ReturnItem>}\n       */\n      const result = imgInfoList.map(item => {\n        /** @type {ReturnItem} */\n        const val = {\n          id: item.status === 'new' ? '' : item.id,\n          imgId: item.imgId || null,\n          src: item.src || null,\n          display: item.display,\n          width: item.width || null,\n          height: item.height || null,\n          fileSize: item.size || null,\n          fileName: item.name || null,\n          fileType: item.type || null,\n          isAnimated: item.isAnimated || null,\n        }\n        return val\n      })\n      // 获取数据成功后发出\n      this.$emit('upload', result)\n      return result\n    },\n    /**\n     * 删除某项\n     * @param {Number|String} id 删除项 id\n     */\n    delItem(id) {\n      const { itemList, isStable } = this\n      // 根据id找到对应项\n      const index = itemList.findIndex(item => item.id === id)\n      const blobUrl = itemList[index].display\n      if (isStable) {\n        // 固定数量图片, 删除后留下空项\n        itemList[index] = createItem()\n        this.itemList = [...itemList]\n      } else {\n        itemList.splice(index, 1)\n      }\n      // 释放内存\n      window.URL.revokeObjectURL(blobUrl)\n      this.initItemList(this.itemList)\n    },\n    /**\n     * 预览图像\n     * @param {Object} data 需要预览的项的数据\n     * @param {Number} index 索引序号\n     */\n    previewImg(data, index) {\n      // 如果有全局预览方法\n      if (this[this.globalImgPriview]) {\n        const images = []\n        this.itemList.forEach(element => {\n          if (element.display) {\n            images.push(element.display)\n          }\n        })\n        this[this.globalImgPriview]({\n          images,\n          index,\n        })\n      } else {\n        // element 原生粗糙模式\n        this.$confirm(`<img src=\"${data.display}\" style=\"width: 100%;\" />`, '预览', {\n          dangerouslyUseHTMLString: true,\n        })\n      }\n    },\n    /**\n     * 移动图像位置\n     * @param {Number|String} id 操作项的 id\n     * @param {Number} step 移动的偏移量\n     */\n    move(id, step) {\n      const { itemList, isStable } = this\n      // 找到操作的元素\n      const index = itemList.findIndex(item => item.id === id)\n      // 边界检测\n      if (index + step < 0 || index + step >= itemList.length) return\n      // 非固定项时, 不可和最后一项输入换位子\n      if (!isStable && index + step === itemList.length - 1) {\n        if (itemList[itemList.length - 1].status === 'input') return\n      }\n      const i = itemList[index]\n      const j = itemList[index + step]\n      itemList[index] = j\n      itemList[index + step] = i\n      this.itemList = [...itemList]\n    },\n    /**\n     * 验证上传的图像是否符合要求\n     * @param {LocalFileInfo} imgInfo 图像信息, 包括文件名, 宽高\n     */\n    async validateImg(imgInfo) {\n      const { rules } = this\n      /** @type ValidateRule */\n      let rule\n      // 针对动态规则模式, 获取输入为空时的规则\n      // 动态规则 rule 为函数, 当选择图片后根据选择的图片生成校验规则\n      if (typeof rules === 'function') {\n        try {\n          rule = rules(imgInfo)\n        } catch (err) {\n          rule = {}\n        }\n      } else {\n        rule = rules\n      }\n\n      if (rule.allowAnimated && rule.allowAnimated > 0) {\n        if (imgInfo.isAnimated === null) {\n          this.$message.error('要进行是否动图验证需要配置 \"animated-check\" 属性为 true')\n        } else {\n          if (rule.allowAnimated === 1 && imgInfo.isAnimated) {\n            throw new Error(`\"${imgInfo.name}\"为动态图, 不允许上传`)\n          }\n          if (rule.allowAnimated === 2 && !imgInfo.isAnimated) {\n            throw new Error(`\"${imgInfo.name}\"为静态图, 只允许上传动态图`)\n          }\n        }\n      }\n\n      // 宽高限制\n      if (rule.width) {\n        if (imgInfo.width !== rule.width) {\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 需为${rule.width}`)\n        }\n      } else {\n        if (rule.minWidth && imgInfo.width < rule.minWidth) {\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 至少为${rule.minWidth}`)\n        }\n        if (rule.maxWidth && imgInfo.width > rule.maxWidth) {\n          throw new Error(`\"${imgInfo.name}\"图像宽不符合要求, 至多为${rule.maxWidth}`)\n        }\n      }\n      if (rule.height) {\n        if (imgInfo.height !== rule.height) {\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 需为${rule.height}`)\n        }\n      } else {\n        if (rule.minHeight && imgInfo.height < rule.minHeight) {\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 至少为${rule.minHeight}`)\n        }\n        if (rule.maxHeight && imgInfo.height > rule.maxHeight) {\n          throw new Error(`\"${imgInfo.name}\"图像高不符合要求, 至多为${rule.maxHeight}`)\n        }\n      }\n\n      // 宽高比限制提示语\n      if (rule.ratio) {\n        let ratio\n        if (Array.isArray(rule.ratio)) {\n          ratio = rule.ratio[0] / rule.ratio[1]\n        } else {\n          // eslint-disable-next-line\n          ratio = rule.ratio\n        }\n        ratio = ratio.toFixed(2)\n        if ((imgInfo.width / imgInfo.height).toFixed(2) !== ratio) {\n          throw new Error(`\"${imgInfo.name}\"图像宽高比不符合要求, 需为${ratio}`)\n        }\n      }\n\n      // 文件大小\n      if (rule.minSize && imgInfo.size < rule.minSize * ONE_MB) {\n        throw new Error(`\"${imgInfo.name}\"图像文件大小比不符合要求, 至少为${rule.minSize}Mb`)\n      }\n      if (rule.maxSize && imgInfo.size > rule.maxSize * ONE_MB) {\n        throw new Error(`\"${imgInfo.name}\"图像文件大小比不符合要求, 至多为${rule.maxSize}Mb`)\n      }\n\n      return true\n    },\n    /**\n     * 选择图像文件后处理, 包括获取图像信息, 验证图像等\n     * @param {Event} e input change 事件对象\n     */\n    async handleChange(e) {\n      const { currentId, autoUpload } = this\n      const { files } = e.target\n      let imgInfoList\n\n      if (!files) return\n      /** 中间步骤缓存, 在出错时用于释放 createObjectURL 的内存 */\n      let cache = []\n      /**\n       * 处理单个图片, 返回处理成功的图片数据\n       * @param {File} file 图片文件\n       */\n      const handleImg = async file => {\n        try {\n          // 获取图像信息\n          const info = await this.getImgInfo(file)\n          cache.push(info)\n          // 验证图像信息\n          await this.validateImg(info)\n          return info\n        } catch (err) {\n          // 往外抛异常\n          throw err\n        }\n      }\n      const asyncList = []\n      for (let i = 0; i < files.length; i += 1) {\n        asyncList.push(handleImg(files[i]))\n      }\n      try {\n        imgInfoList = await Promise.all(asyncList)\n        // 设置图片信息\n        this.setImgInfo(imgInfoList, currentId)\n        // 开启自动上传\n        if (autoUpload) {\n          this.itemList.forEach(ele => {\n            this.uploadImg(ele)\n          })\n        }\n      } catch (err) {\n        // 清空缓存\n        for (let i = 0; i < cache.length; i += 1) {\n          window.URL.revokeObjectURL(cache[i].localSrc)\n        }\n        cache = null\n        console.error(err)\n        this.$message.error(err.message)\n      }\n    },\n    /**\n     * 根据信息列表设置图像信息\n     * 用户选择图片, 图片通过验证后可获取到图像信息数组\n     * 将这一组图像信息数据设置在 itemList 中\n     * @param {Array<LocalFileInfo>} imgInfoList 需要设置的图像数组\n     * @param {Number|String} id 操作项的 id\n     */\n    setImgInfo(imgInfoList = [], currentId) {\n      const { max, itemList } = this\n      // 找到特定图像位置\n      const index = this.itemList.findIndex(item => item.id === currentId)\n      // 释放内存\n      window.URL.revokeObjectURL(this.itemList[index].display)\n      // 替换图片\n      this.itemList[index] = createItem(imgInfoList[0], this.itemList[index])\n      // 如果需要设置的图像数量大于1, 需要执行追加图片逻辑\n      if (imgInfoList.length > 1) {\n        // 最大图片数量限制\n        let l = imgInfoList.length\n        if (this.isStable) {\n          // 固定数量模式, 按次序插入空项\n          for (let i = 0, k = 1; i < max && k < l; i += 1) {\n            if (itemList[i].status === 'input') {\n              this.itemList[i] = createItem(imgInfoList[k])\n              k += 1\n            }\n          }\n        } else {\n          const empty = max - itemList.length\n          if (max && l > empty) {\n            l = empty\n          }\n          if (itemList[itemList.length - 1].status === 'input') {\n            this.itemList.pop()\n          }\n          for (let i = 1; i <= l; i += 1) {\n            this.itemList.push(createItem(imgInfoList[i]))\n          }\n        }\n      }\n\n      // 初始化图片\n      this.initItemList(this.itemList)\n    },\n    /**\n     * 支持键盘操作\n     * @param {Event} e 键盘事件对象\n     * @param {Number|String} id 操作项的 id\n     */\n    handleKeydown(e, id) {\n      if (e.target !== e.currentTarget) return\n      if (e.keyCode === 13 || e.keyCode === 32) {\n        this.handleClick(id)\n      }\n    },\n    /**\n     * 处理点击事件, 并转移到文件上传元素\n     * 并记录当前操作元素 id\n     * @param {Number|String} id 操作项的 id\n     */\n    handleClick(id) {\n      if (!this.disabled) {\n        this.currentId = id || ''\n        this.$refs.input.value = null\n        this.$refs.input.click()\n      }\n    },\n    /**\n     * 初始化 itemList\n     * @param {Array} val 初始化的数据数组\n     */\n    initItemList(val) {\n      const { max, isStable, disabled } = this\n      const result = []\n\n      // 初始值不存在情况\n      // 包括初始值不合法\n      if (!val || !Array.isArray(val) || val.length === 0) {\n        // 固定数量图像上传, 直接初始化固定数量的上传控件\n        if (isStable) {\n          for (let i = 0; i < max; i += 1) {\n            result.push(createItem())\n          }\n          this.itemList = result\n          return\n        }\n        // 如果不是固定上传数量, 则仅创建一个空项\n        result.push(createItem())\n        this.itemList = result\n        return\n      }\n\n      // 存在初始值\n      for (let i = 0; i < val.length; i += 1) {\n        result.push(createItem(val[i]))\n      }\n      // 初始项小于最大数量限制, 并且处于可编辑状态, 并且最后一项不是input\n      if ((max === 0 || val.length < max) && !disabled && val[val.length - 1].status !== 'input') {\n        // 后面添加空项\n        result.push(createItem())\n      }\n      this.itemList = result\n    },\n    /**\n     * 获取图像信息\n     * @param {File} file 文件对象\n     * @returns {LocalFileInfo} 信息对象\n     */\n    async getImgInfo(file) {\n      const { animatedCheck } = this\n      const localSrc = window.URL.createObjectURL(file)\n      // 严格检测文件类型\n      const fileType = await getFileType(file)\n      // 检测是否是动图\n      let isAnimated = null\n      if (animatedCheck) {\n        isAnimated = await checkIsAnimated({ file, fileType, fileUrl: localSrc })\n      }\n      return new Promise((resolve, reject) => {\n        let image = new Image()\n        image.src = localSrc\n        image.onload = () => {\n          /**\n           * @type {LocalFileInfo}\n           */\n          const localFileInfo = {\n            localSrc,\n            file,\n            width: image.width,\n            height: image.height,\n            name: file.name,\n            size: file.size,\n            type: fileType === 'unknow' ? file.type : fileType,\n            lastModified: file.lastModified,\n            isAnimated,\n          }\n          resolve(localFileInfo)\n          image = null\n        }\n        image.onerror = () => {\n          reject(new Error('图像加载失败'))\n          image = null\n        }\n      })\n    },\n    /** 清空全部图片 */\n    clear() {\n      this.initItemList([])\n      this.getValue()\n    },\n    /** 重置图片数据传入属性 */\n    reset() {\n      this.initItemList(this.value)\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.upload-imgs-container {\n  display: flex;\n  flex-wrap: wrap;\n\n  &:focus {\n    outline: none;\n  }\n\n  .upload-item,\n  .thumb-item {\n    border: 1px dashed #d9d9d9;\n    border-radius: 3px;\n    transition: all 0.1s;\n    color: #666666;\n    margin-right: 1em;\n    margin-bottom: 1em;\n\n    &.disabled {\n      color: #ababab;\n    }\n\n    &:not(.disabled):hover {\n      border-color: #3963bc;\n      color: #3963bc;\n    }\n  }\n\n  .thumb-item {\n    .info {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      transition: all 0.3s;\n      transition-delay: 0.1s;\n\n      .wait-upload {\n        background: #ffcb71;\n        color: white;\n        position: absolute;\n        display: inline-block;\n        width: 1.7em;\n        height: 1.5em;\n        top: 0;\n        right: 0;\n        border-radius: 0 0 0 1.4em;\n        transition: all 0.1s;\n\n        &::before {\n          font-size: 1.4em;\n          position: absolute;\n          right: -1px;\n          transform: scale(0.7);\n        }\n      }\n    }\n\n    .control {\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      position: absolute;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n      opacity: 0;\n      background-color: rgba(0, 0, 0, 0.3);\n      transition: all 0.3s;\n      transition-delay: 0.1s;\n\n      .del {\n        background: #f4516c;\n        color: white;\n        position: absolute;\n        display: inline-block;\n        width: 1.7em;\n        height: 1.5em;\n        top: 0;\n        right: 0;\n        opacity: 0;\n        border-radius: 0 0 0 1.4em;\n        transition: all 0.1s;\n\n        &::before {\n          font-size: 1.4em;\n          position: absolute;\n          right: -1px;\n          transform: scale(0.7);\n        }\n\n        &:hover {\n          transform: translate(-0.5em, 0.4em) scale(1.5);\n        }\n      }\n\n      .preview {\n        color: white;\n        font-size: 2em;\n        transition: all 0.2s;\n\n        &:hover {\n          transform: scale(1.2);\n        }\n      }\n\n      .control-bottom {\n        position: absolute;\n        bottom: 0;\n        left: 0;\n        width: 100%;\n        color: white;\n        background-color: rgba(0, 0, 0, 0.3);\n        font-size: 1.5em;\n        display: flex;\n        justify-content: space-around;\n        transform: translate(0, 100%);\n        transition: all 0.2s;\n        transition-delay: 0.1s;\n        padding: 5px 0;\n\n        .control-bottom-btn {\n          transform: all 0.2s;\n\n          &.disabled {\n            color: #ababab;\n            cursor: not-allowed;\n          }\n\n          &:not(.disabled):hover {\n            transform: scale(1.2);\n          }\n        }\n      }\n    }\n\n    &:hover {\n      .control {\n        opacity: 1;\n      }\n\n      .del {\n        opacity: 1;\n      }\n\n      .control-bottom {\n        transform: translate(0, 0);\n      }\n    }\n  }\n\n  .upload-imgs__input {\n    display: none;\n  }\n}\n</style>\n"],"mappings":"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","ignoreList":[]}]}