import { __extends } from "tslib";
import Shape from '../core/shape';
import * as Arrow from './util/arrow';
import * as LineMath from './math/line';
import * as Inside from './util/inside';
var Line = /** @class */ (function (_super) {
    __extends(Line, _super);
    function Line() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.canStroke = true;
        _this.type = 'line';
        return _this;
    }
    Line.prototype.getDefaultAttrs = function () {
        return {
            x1: 0,
            y1: 0,
            x2: 0,
            y2: 0,
            lineWidth: 1,
            startArrow: false,
            endArrow: false,
        };
    };
    Line.prototype.isPointInPath = function (x, y) {
        var attrs = this.attrs;
        var x1 = attrs.x1, y1 = attrs.y1, x2 = attrs.x2, y2 = attrs.y2;
        var lineWidth = this.getHitLineWidth();
        if (this.hasStroke()) {
            return Inside.line(x1, y1, x2, y2, lineWidth, x, y);
        }
        return false;
    };
    Line.prototype.calculateBox = function () {
        var attrs = this.attrs;
        var x1 = attrs.x1, y1 = attrs.y1, x2 = attrs.x2, y2 = attrs.y2;
        var lineWidth = this.getHitLineWidth();
        return LineMath.box(x1, y1, x2, y2, lineWidth);
    };
    Line.prototype.createPath = function (context) {
        var self = this;
        var attrs = self.attrs;
        var x1 = attrs.x1, y1 = attrs.y1, x2 = attrs.x2, y2 = attrs.y2;
        context = context || self.get('context');
        context.beginPath();
        context.moveTo(x1, y1);
        context.lineTo(x2, y2);
    };
    Line.prototype.afterPath = function (context) {
        var attrs = this.attrs;
        var x1 = attrs.x1, y1 = attrs.y1, x2 = attrs.x2, y2 = attrs.y2;
        context = context || this.get('context');
        if (attrs.startArrow) {
            Arrow.addStartArrow(context, attrs, x2, y2, x1, y1);
        }
        if (attrs.endArrow) {
            Arrow.addEndArrow(context, attrs, x1, y1, x2, y2);
        }
    };
    Line.prototype.getPoint = function (t) {
        var attrs = this.attrs;
        return {
            x: LineMath.at(attrs.x1, attrs.x2, t),
            y: LineMath.at(attrs.y1, attrs.y2, t),
        };
    };
    return Line;
}(Shape));
export default Line;
//# sourceMappingURL=line.js.map