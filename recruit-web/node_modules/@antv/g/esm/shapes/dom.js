import { __extends } from "tslib";
import Shape from '../core/shape';
import * as Inside from './util/inside';
import BBox from '../core/bbox';
var Dom = /** @class */ (function (_super) {
    __extends(Dom, _super);
    function Dom() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.canFill = true;
        _this.canStroke = true;
        _this.type = 'dom';
        return _this;
    }
    Dom.prototype.isPointInPath = function (x, y) {
        if (!this.cfg.el) {
            return false;
        }
        var box = this.cfg.el.getBBox();
        return Inside.box(box.x, box.x + box.width, box.y, box.y + box.height, x, y);
    };
    Dom.prototype.calculateBox = function () {
        var self = this;
        var attrs = self.attrs;
        var x = attrs.x;
        var y = attrs.y;
        var width = attrs.width;
        var height = attrs.height;
        var lineWidth = this.getHitLineWidth();
        var halfWidth = lineWidth / 2;
        return new BBox(x - halfWidth, y - halfWidth, width, height);
    };
    return Dom;
}(Shape));
export default Dom;
//# sourceMappingURL=dom.js.map