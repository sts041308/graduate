import { __extends } from "tslib";
import Shape from '../core/shape';
import * as Inside from './util/inside';
import BBox from '../core/bbox';
var Circle = /** @class */ (function (_super) {
    __extends(Circle, _super);
    function Circle() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.canFill = true;
        _this.canStroke = true;
        _this.type = 'circle';
        return _this;
    }
    Circle.prototype.getDefaultAttrs = function () {
        return {
            x: 0,
            y: 0,
            r: 0,
            lineWidth: 1,
        };
    };
    Circle.prototype.isPointInPath = function (x, y) {
        var attrs = this.attrs;
        var cx = attrs.x;
        var cy = attrs.y;
        var r = attrs.r;
        var lineWidth = this.getHitLineWidth();
        var fill = this.hasFill();
        var stroke = this.hasStroke();
        if (fill && stroke) {
            return Inside.circle(cx, cy, r, x, y) || Inside.arcline(cx, cy, r, 0, Math.PI * 2, false, lineWidth, x, y);
        }
        if (fill) {
            return Inside.circle(cx, cy, r, x, y);
        }
        if (stroke) {
            return Inside.arcline(cx, cy, r, 0, Math.PI * 2, false, lineWidth, x, y);
        }
        return false;
    };
    Circle.prototype.calculateBox = function () {
        var attrs = this.attrs;
        var cx = attrs.x;
        var cy = attrs.y;
        var r = attrs.r;
        var lineWidth = this.getHitLineWidth();
        var halfWidth = lineWidth / 2 + r;
        return BBox.fromRange(cx - halfWidth, cy - halfWidth, cx + halfWidth, cy + halfWidth);
    };
    Circle.prototype.createPath = function (context) {
        var attrs = this.attrs;
        var cx = attrs.x;
        var cy = attrs.y;
        var r = attrs.r;
        context.beginPath();
        context.arc(cx, cy, r, 0, Math.PI * 2, false);
        context.closePath();
    };
    return Circle;
}(Shape));
export default Circle;
//# sourceMappingURL=circle.js.map