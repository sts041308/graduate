import Base from './base';
import { ElementAttrs, ElementCFG } from '../interface';
declare abstract class Attribute extends Base {
    canFill: boolean;
    canStroke: boolean;
    attrs: ElementAttrs;
    constructor(cfg?: ElementCFG);
    getDefaultAttrs(): {};
    /**
     * 设置或者设置属性，有以下 4 种情形：
     *   - name 不存在, 则返回属性集合
     *   - name 为字符串，value 为空，获取属性值
     *   - name 为字符串，value 不为空，设置属性值，返回 this
     *   - name 为键值对，value 为空，设置属性值
     *
     * @param  {String | Object} name  属性名
     * @param  {*} value 属性值
     * @return {*} 属性值
     */
    attr(...args: any[]): any;
    _afterSetAttrPath(value: any): void;
    _setAttr(name: string, value: any): void;
    clearBBox(): void;
    hasFill(): any;
    hasStroke(): any;
    _setClip(item: any): void;
    initTransform(): void;
    resetMatrix(): void;
    translate(tx: number, ty: number): this;
    rotate(radian: number): this;
    scale(s1: number, s2: number): this;
    rotateAtStart(rotate: number): this;
    move(x: number, y: number): this;
    transform(ts: any): this;
    setTransform(ts: any): this;
    getMatrix(): any;
    setMatrix(m: any): this;
    apply(v: any, root: any): this;
    _getMatrixByRoot(root: any): number[];
    /**
     * 应用到当前元素上的总的矩阵
     * @return {Matrix} 矩阵
     */
    getTotalMatrix(): any;
    clearTotalMatrix(): void;
    invert(v: any): this;
    resetTransform(context: any): void;
}
export default Attribute;
