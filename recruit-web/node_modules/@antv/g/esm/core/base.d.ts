import EventEmitter from '@antv/event-emitter';
import { ElementCFG } from '../interface';
declare abstract class Base extends EventEmitter {
    cfg: ElementCFG;
    destroyed: boolean;
    removed: boolean;
    constructor(cfg?: ElementCFG);
    /**
     * 覆盖父类的 emit，实现事件的冒泡机制
     * @param evt
     * @param e g 层包装之后的 Event 实例
     * @param args 其余数据，仅做透传。
     */
    emit(evt: string, e: any, ...args: any[]): void;
    set(name: string, value: any): this;
    setSilent(name: string, value: any): void;
    get(name: string): any;
    show(): this;
    hide(): this;
    remove(destroy?: boolean, delayRemove?: boolean): this;
    destroy(): void;
    getParent(): any;
    getDefaultCfg(): {};
    toFront(): void;
    toBack(): void;
    _beforeSetZIndex(zIndex: number): number;
    _beforeSetLoading(loading: boolean): void;
    setZIndex(zIndex: number): number;
    clone(): any;
    getBBox(): void;
}
export default Base;
