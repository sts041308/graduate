"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var shape_1 = require("../core/shape");
var ArcMath = require('./math/arc');
var Arrow = require("./util/arrow");
var Inside = require("./util/inside");
var bbox_1 = require("../core/bbox");
function _getArcX(x, radius, angle) {
    return x + radius * Math.cos(angle);
}
function _getArcY(y, radius, angle) {
    return y + radius * Math.sin(angle);
}
var Arc = /** @class */ (function (_super) {
    tslib_1.__extends(Arc, _super);
    function Arc() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.canStroke = true;
        _this.type = 'arc';
        return _this;
    }
    Arc.prototype.getDefaultAttrs = function () {
        return {
            x: 0,
            y: 0,
            r: 0,
            startAngle: 0,
            endAngle: 0,
            clockwise: false,
            lineWidth: 1,
            startArrow: false,
            endArrow: false,
        };
    };
    Arc.prototype.isPointInPath = function (x, y) {
        var attrs = this.attrs;
        var cx = attrs.x;
        var cy = attrs.y;
        var r = attrs.r, startAngle = attrs.startAngle, endAngle = attrs.endAngle, clockwise = attrs.clockwise;
        var lineWidth = this.getHitLineWidth();
        if (this.hasStroke()) {
            return Inside.arcline(cx, cy, r, startAngle, endAngle, clockwise, lineWidth, x, y);
        }
        return false;
    };
    Arc.prototype.calculateBox = function () {
        var attrs = this.attrs;
        var x = attrs.x, y = attrs.y, r = attrs.r, startAngle = attrs.startAngle, endAngle = attrs.endAngle, clockwise = attrs.clockwise;
        var lineWidth = this.getHitLineWidth();
        var halfWidth = lineWidth / 2;
        var box = ArcMath.box(x, y, r, startAngle, endAngle, clockwise);
        return new bbox_1.default(box.x - halfWidth, box.y - halfWidth, box.width + lineWidth, box.height + lineWidth);
    };
    Arc.prototype.getStartTangent = function () {
        var attrs = this.attrs;
        var x = attrs.x, y = attrs.y, startAngle = attrs.startAngle, r = attrs.r, clockwise = attrs.clockwise;
        var diff = Math.PI / 180;
        if (clockwise) {
            diff *= -1;
        }
        var result = [];
        var x1 = _getArcX(x, r, startAngle + diff);
        var y1 = _getArcY(y, r, startAngle + diff);
        var x2 = _getArcX(x, r, startAngle);
        var y2 = _getArcY(y, r, startAngle);
        result.push([x1, y1]);
        result.push([x2, y2]);
        return result;
    };
    Arc.prototype.getEndTangent = function () {
        var attrs = this.attrs;
        var x = attrs.x, y = attrs.y, endAngle = attrs.endAngle, r = attrs.r, clockwise = attrs.clockwise;
        var diff = Math.PI / 180;
        var result = [];
        if (clockwise) {
            diff *= -1;
        }
        var x1 = _getArcX(x, r, endAngle + diff);
        var y1 = _getArcY(y, r, endAngle + diff);
        var x2 = _getArcX(x, r, endAngle);
        var y2 = _getArcY(y, r, endAngle);
        result.push([x2, y2]);
        result.push([x1, y1]);
        return result;
    };
    Arc.prototype.createPath = function (context) {
        var attrs = this.attrs;
        var x = attrs.x, y = attrs.y, r = attrs.r, startAngle = attrs.startAngle, endAngle = attrs.endAngle, clockwise = attrs.clockwise;
        context = context || this.get('context');
        context.beginPath();
        context.arc(x, y, r, startAngle, endAngle, clockwise);
    };
    Arc.prototype.afterPath = function (context) {
        var attrs = this.attrs;
        context = context || this.get('context');
        if (attrs.startArrow) {
            var startPoints = this.getStartTangent();
            Arrow.addStartArrow(context, attrs, startPoints[0][0], startPoints[0][1], startPoints[1][0], startPoints[1][1]);
        }
        if (attrs.endArrow) {
            var endPoints = this.getEndTangent();
            Arrow.addEndArrow(context, attrs, endPoints[0][0], endPoints[0][1], endPoints[1][0], endPoints[1][1]);
        }
    };
    return Arc;
}(shape_1.default));
exports.default = Arc;
//# sourceMappingURL=arc.js.map