"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var shape_1 = require("../core/shape");
var format_1 = require("../util/format");
var Inside = require("./util/inside");
var is_point_in_path_by_ctx_1 = require("./util/is-point-in-path-by-ctx");
var bbox_1 = require("../core/bbox");
var Rect = /** @class */ (function (_super) {
    tslib_1.__extends(Rect, _super);
    function Rect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.canFill = true;
        _this.canStroke = true;
        _this.type = 'rect';
        return _this;
    }
    Rect.prototype.getDefaultAttrs = function () {
        return {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            radius: 0,
            lineWidth: 1,
        };
    };
    Rect.prototype.isPointInPath = function (x, y) {
        var self = this;
        var fill = self.hasFill();
        var stroke = self.hasStroke();
        function _isPointInStroke() {
            var attrs = self.attrs;
            var rx = attrs.x;
            var ry = attrs.y;
            var width = attrs.width;
            var height = attrs.height;
            var radius = attrs.radius;
            var lineWidth = self.getHitLineWidth();
            if (radius === 0) {
                var halfWidth = lineWidth / 2;
                return (Inside.line(rx - halfWidth, ry, rx + width + halfWidth, ry, lineWidth, x, y) ||
                    Inside.line(rx + width, ry - halfWidth, rx + width, ry + height + halfWidth, lineWidth, x, y) ||
                    Inside.line(rx + width + halfWidth, ry + height, rx - halfWidth, ry + height, lineWidth, x, y) ||
                    Inside.line(rx, ry + height + halfWidth, rx, ry - halfWidth, lineWidth, x, y));
            }
            return (Inside.line(rx + radius, ry, rx + width - radius, ry, lineWidth, x, y) ||
                Inside.line(rx + width, ry + radius, rx + width, ry + height - radius, lineWidth, x, y) ||
                Inside.line(rx + width - radius, ry + height, rx + radius, ry + height, lineWidth, x, y) ||
                Inside.line(rx, ry + height - radius, rx, ry + radius, lineWidth, x, y) ||
                Inside.arcline(rx + width - radius, ry + radius, radius, 1.5 * Math.PI, 2 * Math.PI, false, lineWidth, x, y) ||
                Inside.arcline(rx + width - radius, ry + height - radius, radius, 0, 0.5 * Math.PI, false, lineWidth, x, y) ||
                Inside.arcline(rx + radius, ry + height - radius, radius, 0.5 * Math.PI, Math.PI, false, lineWidth, x, y) ||
                Inside.arcline(rx + radius, ry + radius, radius, Math.PI, 1.5 * Math.PI, false, lineWidth, x, y));
        }
        if (fill && stroke) {
            return is_point_in_path_by_ctx_1.default(x, y, self) || _isPointInStroke();
        }
        if (fill) {
            return is_point_in_path_by_ctx_1.default(x, y, self);
        }
        if (stroke) {
            return _isPointInStroke();
        }
        return false;
    };
    Rect.prototype.calculateBox = function () {
        var self = this;
        var attrs = self.attrs;
        var x = attrs.x;
        var y = attrs.y;
        var width = attrs.width;
        var height = attrs.height;
        var lineWidth = this.getHitLineWidth();
        var halfWidth = lineWidth / 2;
        return bbox_1.default.fromRange(x - halfWidth, y - halfWidth, x + width + halfWidth, y + height + halfWidth);
    };
    Rect.prototype.createPath = function (context) {
        var self = this;
        var attrs = self.attrs;
        var x = attrs.x;
        var y = attrs.y;
        var width = attrs.width;
        var height = attrs.height;
        var radius = attrs.radius;
        context = context || self.get('context');
        context.beginPath();
        if (radius === 0) {
            // 改成原生的rect方法
            context.rect(x, y, width, height);
        }
        else {
            var r = format_1.parseRadius(radius);
            context.moveTo(x + r.r1, y);
            context.lineTo(x + width - r.r2, y);
            r.r2 !== 0 && context.arc(x + width - r.r2, y + r.r2, r.r2, -Math.PI / 2, 0);
            context.lineTo(x + width, y + height - r.r3);
            r.r3 !== 0 && context.arc(x + width - r.r3, y + height - r.r3, r.r3, 0, Math.PI / 2);
            context.lineTo(x + r.r4, y + height);
            r.r4 !== 0 && context.arc(x + r.r4, y + height - r.r4, r.r4, Math.PI / 2, Math.PI);
            context.lineTo(x, y + r.r1);
            r.r1 !== 0 && context.arc(x + r.r1, y + r.r1, r.r1, Math.PI, Math.PI * 1.5);
            context.closePath();
        }
    };
    return Rect;
}(shape_1.default));
exports.default = Rect;
//# sourceMappingURL=rect.js.map