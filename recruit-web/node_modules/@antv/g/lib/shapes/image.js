"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Util = require("@antv/util");
var shape_1 = require("../core/shape");
var Inside = require("./util/inside");
var bbox_1 = require("../core/bbox");
var CImage = /** @class */ (function (_super) {
    tslib_1.__extends(CImage, _super);
    function CImage() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'image';
        return _this;
    }
    CImage.prototype.getDefaultAttrs = function () {
        return {
            x: 0,
            y: 0,
            img: null,
            width: 0,
            height: 0,
            sx: null,
            sy: null,
            swidth: null,
            sheight: null,
        };
    };
    CImage.prototype.isPointInPath = function (x, y) {
        var attrs = this.attrs;
        if (this.get('toDraw') || !attrs.img) {
            return false;
        }
        if (!this.cfg.attrs || this.cfg.attrs.img !== attrs.img) {
            this._setAttrImg();
        }
        var rx = attrs.x;
        var ry = attrs.y;
        var width = attrs.width;
        var height = attrs.height;
        return Inside.rect(rx, ry, width, height, x, y);
    };
    CImage.prototype.isHitBox = function () {
        return false;
    };
    CImage.prototype.calculateBox = function () {
        var attrs = this.attrs;
        if (!this.cfg.attrs || this.cfg.attrs.img !== attrs.img) {
            this._setAttrImg();
        }
        return new bbox_1.default(attrs.x, attrs.y, attrs.width, attrs.height);
    };
    CImage.prototype._beforeSetLoading = function (loading) {
        var canvas = this.get('canvas');
        if (loading === false && this.get('toDraw') === true) {
            this.cfg.loading = false;
            canvas.draw();
        }
        return loading;
    };
    CImage.prototype._setAttrImg = function () {
        var self = this;
        var attrs = self.attrs;
        var img = attrs.img;
        if (Util.isString(img)) {
            var image_1 = new Image();
            image_1.onload = function () {
                if (self.get('destroyed'))
                    return false;
                self.attr('imgSrc', img);
                self.attr('img', image_1);
                var callback = self.get('callback');
                if (callback) {
                    callback.call(self);
                }
                self.set('loading', false);
            };
            image_1.src = img;
            image_1.crossOrigin = 'Anonymous';
            self.set('loading', true);
        }
        else if (img instanceof Image) {
            if (!attrs.width) {
                self.attr('width', img.width);
            }
            if (!attrs.height) {
                self.attr('height', img.height);
            }
            return img;
        }
        else if (img instanceof HTMLElement && Util.isString(img.nodeName) && img.nodeName.toUpperCase() === 'CANVAS') {
            if (!attrs.width) {
                self.attr('width', Number(img.getAttribute('width')));
            }
            if (!attrs.height) {
                self.attr('height', Number(img.getAttribute('height')));
            }
            return img;
        }
        else if (img instanceof ImageData) {
            if (!attrs.width) {
                self.attr('width', img.width);
            }
            if (!attrs.height) {
                self.attr('height', img.height);
            }
            return img;
        }
        else {
            return null;
        }
    };
    CImage.prototype.drawInner = function (context) {
        if (this.cfg.hasUpdate) {
            this._setAttrImg();
        }
        if (this.get('loading')) {
            this.set('toDraw', true);
            return;
        }
        this._drawImage(context);
        this.cfg.hasUpdate = false;
    };
    CImage.prototype._drawImage = function (context) {
        var attrs = this.attrs;
        var x = attrs.x;
        var y = attrs.y;
        var image = attrs.img;
        var width = attrs.width;
        var height = attrs.height;
        var sx = attrs.sx;
        var sy = attrs.sy;
        var swidth = attrs.swidth;
        var sheight = attrs.sheight;
        this.set('toDraw', false);
        var img = image;
        if (img instanceof ImageData) {
            img = new Image();
            img.src = image;
        }
        if (img instanceof Image ||
            (img instanceof HTMLImageElement && Util.isString(img.nodeName) && img.nodeName.toUpperCase() === 'CANVAS')) {
            if (Util.isNil(sx) || Util.isNil(sy) || Util.isNil(swidth) || Util.isNil(sheight)) {
                context.drawImage(img, x, y, width, height);
                return;
            }
            if (!Util.isNil(sx) && !Util.isNil(sy) && !Util.isNil(swidth) && !Util.isNil(sheight)) {
                context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);
                return;
            }
        }
        return;
    };
    return CImage;
}(shape_1.default));
exports.default = CImage;
//# sourceMappingURL=image.js.map