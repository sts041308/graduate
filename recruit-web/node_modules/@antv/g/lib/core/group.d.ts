import Element from './element';
import BBox from './bbox';
import { ElementCFG } from '../interface';
declare class Group extends Element {
    isGroup: boolean;
    type: string;
    canFill: boolean;
    canStroke: boolean;
    constructor(cfg?: ElementCFG);
    _beforeRenderUI(): void;
    _renderUI(): void;
    _bindUI(): void;
    addShape(type: any, cfg: any): any;
    /** 添加图组
     * @param  {Function|Object|undefined} param 图组类
     * @param  {Object} cfg 配置项
     * @return {Object} rst 图组
     */
    addGroup(param?: any, cfg?: any): any;
    /** 绘制背景
     * @param  {Array} padding 内边距
     * @param  {Attrs} attrs 图形属性
     * @param  {Shape} backShape 背景图形
     * @return {Object} 背景层对象
     */
    renderBack(padding: any, attrs: any): any;
    removeChild(item: any, destroy: any): this;
    /**
     * 向组中添加shape或者group
     * @param {Object} items 图形或者分组
     * @return {Object} group 本尊
     */
    add(items: any): this;
    _setCfgProperty(item: any): void;
    contain(item: any): boolean;
    getChildByIndex(index: any): any;
    getFirst(): any;
    getLast(): any;
    getBBox(): BBox;
    getCount(): any;
    sort(): this;
    findById(id: any): any;
    /**
     * 根据查找函数查找分组或者图形
     * @param  {Function} fn 匹配函数
     * @return {Canvas.Base} 分组或者图形
     */
    find(fn: any): any;
    /**
     * @param  {Function} fn filter mathod
     * @return {Array} all the matching shapes and groups
     */
    findAll(fn: any): any[];
    /**
     * @Deprecated
     * @param  {Function} fn filter method
     * @return {Object} found shape or group
     */
    findBy(fn: any): any;
    /**
     * @Deprecated
     * @param  {Function} fn filter mathod
     * @return {Array} all the matching shapes and groups
     */
    findAllBy(fn: any): any[];
    getShape(x: any, y: any, e?: any): any;
    clearTotalMatrix(): void;
    clear(delayRemove?: any): this;
    destroy(): void;
    clone(): Group;
}
export default Group;
