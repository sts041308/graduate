import { LayerConfig } from '../../base/layer';
import ViewLayer, { ViewConfig } from '../../base/view-layer';
import '../../geoms/heatmap/linear';
import HeatmapLegend, { HeatmapLegendConfig } from './components/legend';
import HeatmapBackground from './components/background';
import '../scatter/components/label/scatter-label';
interface PointStyle {
    lineDash?: number[];
    lineWidth?: number;
    opacity?: string;
    fillStyle?: string;
    strokeStyle?: string;
}
export interface HeatmapViewConfig extends ViewConfig {
    colorField: string;
    radius?: number;
    intensity?: number;
    point?: {
        visible?: boolean;
        shape?: string;
        size?: number;
        color?: string;
        style?: PointStyle;
    };
    legend: HeatmapLegendConfig;
    background?: {};
}
export interface HeatmapLayerConfig extends HeatmapViewConfig, LayerConfig {
}
export default class HeatmapLayer<T extends HeatmapLayerConfig = HeatmapLayerConfig> extends ViewLayer<T> {
    type: string;
    protected heatmapLegend: HeatmapLegend;
    protected background: HeatmapBackground;
    protected count: number;
    static getDefaultOptions(): any;
    afterRender(): void;
    destroy(): void;
    protected scale(): void;
    protected coord(): void;
    protected geometryParser(dim: any, type: any): string;
    protected addGeometry(): void;
    protected addPoint(): void;
    protected extractLabel(): any;
    protected legend(): void;
    protected animation(): void;
}
export {};
