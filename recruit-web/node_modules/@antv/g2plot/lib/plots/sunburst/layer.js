"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = tslib_1.__importStar(require("@antv/util"));
var global_1 = require("../../base/global");
var view_layer_1 = tslib_1.__importDefault(require("../../base/view-layer"));
var partition_1 = tslib_1.__importDefault(require("./layout/partition"));
var interaction_1 = require("./interaction");
var label_1 = tslib_1.__importDefault(require("./components/label"));
var EventParser = tslib_1.__importStar(require("./event"));
var SunburstLayer = /** @class */ (function (_super) {
    tslib_1.__extends(SunburstLayer, _super);
    function SunburstLayer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'sunburst';
        return _this;
    }
    SunburstLayer.getDefaultOptions = function () {
        return _.deepMix({}, _super.getDefaultOptions.call(this), {
            radius: 0.8,
            innerRadius: 0,
            maxLevel: Infinity,
            padding: [0, 0, 0, 0],
            tooltip: {
                showTitle: false,
                visible: true,
                shared: false,
                crosshairs: false,
            },
            legend: {
                visible: false,
            },
            xAxis: {
                visible: false,
            },
            yAxis: {
                visible: false,
            },
            label: {
                visible: true,
            },
            xField: 'x',
            yField: 'y',
            meta: {
                x: {
                    nice: false,
                },
                y: {
                    nice: false,
                },
            },
        });
    };
    SunburstLayer.prototype.beforeInit = function () {
        var _this = this;
        _super.prototype.beforeInit.call(this);
        var data = this.options.data;
        var sunburstData = this.getSunburstData(data);
        this.rootData = sunburstData;
        this.adjustLinearScale(sunburstData);
        var interactions = this.options.interactions;
        if (interactions) {
            _.each(interactions, function (interaction) {
                if (interaction.type === 'drilldown') {
                    _this.isDrilldown = true;
                }
            });
        }
    };
    SunburstLayer.prototype.geometryParser = function (dim, type) {
        return 'polygon';
    };
    SunburstLayer.prototype.getSunburstData = function (data, level) {
        data.depth = 0;
        var root = partition_1.default(data);
        var sunBurstData = [];
        this.getAllNodes(root.children, sunBurstData, level);
        sunBurstData.push(tslib_1.__assign(tslib_1.__assign({}, root), { x: [root.x0, root.x1, root.x1, root.x0, root.x1], y: [root.y1, root.y1, root.y0, root.y0, root.y0] }));
        sunBurstData.sort(function (a, b) {
            return a.depth - b.depth;
        });
        this.options.xField = 'x';
        this.options.yField = 'y';
        return sunBurstData;
    };
    SunburstLayer.prototype.processData = function () {
        return this.rootData;
    };
    SunburstLayer.prototype.coord = function () {
        var props = this.options;
        var coordConfig = {
            type: 'theta',
            cfg: {
                radius: props.radius,
                innerRadius: props.innerRadius,
            },
        };
        this.setConfig('coord', coordConfig);
    };
    SunburstLayer.prototype.addGeometry = function () {
        var _this = this;
        var _a = this.options, data = _a.data, colorField = _a.colorField, color = _a.color;
        var sunburstData = this.getSunburstData(data);
        this.rootData = sunburstData;
        this.rect = {
            type: 'polygon',
            position: {
                fields: ['x', 'y'],
            },
            color: this.getColorConfig(sunburstData),
            tooltip: {
                fields: ['name'],
            },
            label: false,
            style: {
                fields: ['name', 'value', 'depth'],
                callback: function (name, value, depth) {
                    var defaultStyle = _this.adjustStyleByDepth(depth);
                    if (_.isFunction(_this.options.sunburstStyle)) {
                        return _this.options.sunburstStyle(name, value, depth);
                    }
                    return _.deepMix({}, defaultStyle, _this.options.sunburstStyle);
                },
            },
        };
        this.setConfig('element', this.rect);
    };
    SunburstLayer.prototype.animation = function () {
        _super.prototype.animation.call(this);
        if (this.isDrilldown) {
            this.rect.animate = false;
        }
    };
    SunburstLayer.prototype.applyInteractions = function () {
        var _this = this;
        var interactionCfg = this.options.interactions;
        var interactions = this.view.get('interactions');
        _.each(interactionCfg, function (inter) {
            var Ctr = interaction_1.INTERACTION_MAP[inter.type];
            if (Ctr) {
                var interaction = new Ctr(_.deepMix({}, {
                    view: _this.view,
                    plot: _this,
                    startEvent: 'polygon:click',
                }, inter.cfg));
                interactions[inter.type] = interaction;
            }
        });
    };
    SunburstLayer.prototype.parseEvents = function (eventParser) {
        _super.prototype.parseEvents.call(this, EventParser);
    };
    SunburstLayer.prototype.afterRender = function () {
        if (this.options.label && this.options.label.visible) {
            var label = new label_1.default(tslib_1.__assign({ view: this.view, plot: this }, this.options.label));
            label.render();
        }
        _super.prototype.afterRender.call(this);
    };
    SunburstLayer.prototype.getAllNodes = function (data, nodes, level) {
        var _this = this;
        var max = level ? level : this.options.maxLevel;
        _.each(data, function (d) {
            if (_.hasKey(d, 'x0') && d.depth <= max) {
                nodes.push(tslib_1.__assign(tslib_1.__assign({}, d), { y: [d.x0, d.x1, d.x1, d.x0], x: [d.y1, d.y1, d.y0, d.y0] }));
            }
            if (_.hasKey(d, 'children')) {
                _this.getAllNodes(d.children, nodes);
            }
        });
    };
    SunburstLayer.prototype.getColorConfig = function (data) {
        var _a = this.options, colorField = _a.colorField, colors = _a.colors;
        if (_.isFunction(colors)) {
            return {
                fields: [colorField],
                callback: colors,
            };
        }
        if (_.isString(data[0][colorField])) {
            var uniqueValues_1 = [];
            var uniqueColors_1;
            _.each(data, function (d) {
                var value = d[colorField];
                if (!_.has(value, uniqueValues_1)) {
                    uniqueValues_1.push(value);
                }
            });
            if (colors) {
                uniqueColors_1 = colors;
            }
            else {
                var theme = this.getTheme();
                uniqueColors_1 = uniqueValues_1.length >= 8 ? theme.colors_20 : theme.colors;
            }
            // zip
            var mappingData_1 = {};
            _.each(uniqueValues_1, function (v, i) {
                var index = i <= uniqueValues_1.length - 1 ? i : i - uniqueValues_1.length;
                var color = uniqueColors_1[index];
                mappingData_1[v] = color;
            });
            return {
                fields: [colorField],
                callback: function (v) {
                    return mappingData_1[v];
                },
            };
        }
        else {
            return {
                fields: [colorField],
                values: colors,
            };
        }
    };
    SunburstLayer.prototype.adjustLinearScale = function (data) {
        var _a = this.options, colorField = _a.colorField, meta = _a.meta;
        if (_.isNumber(data[0][colorField])) {
            var min_1 = Infinity;
            var max_1 = -Infinity;
            _.each(data, function (d) {
                var value = d[colorField];
                min_1 = Math.min(value, min_1);
                max_1 = Math.max(value, max_1);
            });
            var origin_meta = meta[colorField];
            meta[colorField] = _.deepMix({}, origin_meta, {
                min: min_1,
                max: max_1,
            });
        }
    };
    SunburstLayer.prototype.adjustStyleByDepth = function (depth) {
        if (depth > 0) {
            return {
                stroke: '#ffffff',
                lineWidth: 1,
            };
        }
        return {};
    };
    return SunburstLayer;
}(view_layer_1.default));
exports.default = SunburstLayer;
global_1.registerPlotType('sunburst', SunburstLayer);
//# sourceMappingURL=layer.js.map