import { LayerConfig } from '../../base/layer';
import ViewLayer, { ViewConfig } from '../../base/view-layer';
export interface SunburstViewConfig extends ViewConfig {
    data: any;
    maxLevel?: number;
    colorField: string;
    colors?: string | string[];
    radius?: number;
    innerRadius?: number;
    sunburstStyle?: {} | Function;
}
export interface SunburstLayerConfig extends SunburstViewConfig, LayerConfig {
}
export default class SunburstLayer<T extends SunburstLayerConfig = SunburstLayerConfig> extends ViewLayer<T> {
    static getDefaultOptions(): Partial<SunburstLayerConfig>;
    type: string;
    rootData: any;
    rect: any;
    private isDrilldown;
    beforeInit(): void;
    protected geometryParser(dim: any, type: any): string;
    getSunburstData(data: any, level?: any): any[];
    protected processData(): any;
    protected coord(): void;
    protected addGeometry(): void;
    protected animation(): void;
    protected applyInteractions(): void;
    protected parseEvents(eventParser: any): void;
    afterRender(): void;
    private getAllNodes;
    private getColorConfig;
    private adjustLinearScale;
    private adjustStyleByDepth;
}
