"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("@antv/util");
function getPointAngle(coord, point) {
    var center = coord.getCenter();
    return Math.atan2(point.y - center.y, point.x - center.x);
}
var RangeBarLabel = /** @class */ (function () {
    function RangeBarLabel(cfg) {
        this.destroyed = false;
        this.view = cfg.view;
        this.plot = cfg.plot;
        var defaultOptions = this.getDefaultOptions();
        this.options = util_1.deepMix(defaultOptions, cfg, {});
        this.init();
    }
    RangeBarLabel.prototype.init = function () {
        var _this = this;
        var geomContainer = this.view.get('elements')[0].get('container');
        this.container = geomContainer.addGroup();
        this.view.on('beforerender', function () {
            _this.clear();
            _this.plot.canvas.draw();
        });
    };
    RangeBarLabel.prototype.render = function () {
        var _this = this;
        var geometry = this.view.get('elements')[0];
        var shapes = geometry.getShapes();
        util_1.each(shapes, function (shape) {
            var style = _this.options.style;
            var position = _this.getPosition(shape);
            var value = _this.getValue(shape);
            var formatter = _this.options.formatter;
            var content = formatter ? formatter(value) : value;
            var rotate = _this.getRotate(position.angle);
            _this.container.addShape('text', {
                attrs: util_1.deepMix({}, style, {
                    x: position.x,
                    y: position.y,
                    text: content,
                    textAlign: 'center',
                    textBaseline: 'middle',
                    rotate: rotate,
                }),
            });
        });
        var labelCtr = geometry.get('labelController');
        labelCtr.labelsContainer = this.container;
        this.plot.canvas.draw();
    };
    RangeBarLabel.prototype.hide = function () {
        this.container.set('visible', false);
        this.plot.canvas.draw();
    };
    RangeBarLabel.prototype.show = function () {
        this.container.set('visible', true);
        this.plot.canvas.draw();
    };
    RangeBarLabel.prototype.clear = function () {
        if (this.container) {
            this.container.clear();
        }
    };
    RangeBarLabel.prototype.destory = function () {
        if (this.container) {
            this.container.remove();
        }
        this.destroyed = true;
    };
    RangeBarLabel.prototype.getBBox = function () { };
    RangeBarLabel.prototype.getDefaultOptions = function () {
        var theme = this.plot.theme;
        var labelStyle = util_1.clone(theme.label.style);
        if (!labelStyle.fontSize) {
            labelStyle.fontSize = 11;
        }
        labelStyle.lineHeight = labelStyle.fontSize;
        labelStyle.stroke = null;
        return {
            position: 'outer',
            offsetX: 0,
            offsetY: 0,
            style: labelStyle,
            adjustColor: true,
            adjustPosition: true,
        };
    };
    RangeBarLabel.prototype.getPosition = function (shape) {
        var coord = shape.get('coord');
        var data = shape.get('origin')._origin;
        var point;
        var angle;
        if (data.depth >= 1) {
            var points = shape.get('origin').points;
            var x = (points[0].x + points[1].x + points[2].x + points[3].x) / 4;
            var y = (points[0].y + points[1].y + points[2].y + points[3].y) / 4;
            point = coord.convertPoint({ x: x, y: y });
            angle = getPointAngle(coord, { x: point.x, y: point.y });
        }
        else {
            var bbox = shape.getBBox();
            var x = bbox.minX + bbox.width / 2;
            var y = bbox.minY + bbox.height / 2;
            point = { x: x, y: y };
            angle = 0;
        }
        return {
            x: point.x,
            y: point.y,
            angle: angle,
        };
    };
    RangeBarLabel.prototype.getValue = function (shape) {
        var colorField = this.plot.options.colorField;
        var text = shape.get('origin')._origin[colorField];
        if (this.plot.options.label && this.plot.options.label.field) {
            text = shape.get('origin')._origin[this.plot.options.label.field];
        }
        var values = String(text).split(' ');
        if (values.length > 1) {
            return values.join('\n');
        }
        return values[0];
    };
    RangeBarLabel.prototype.getRotate = function (angle) {
        var rotate = (angle * 180) / Math.PI;
        if (rotate) {
            if (rotate > 90) {
                rotate = rotate - 180;
            }
            else if (rotate < -90) {
                rotate = rotate + 180;
            }
        }
        return (rotate / 180) * Math.PI;
    };
    return RangeBarLabel;
}());
exports.default = RangeBarLabel;
//# sourceMappingURL=label.js.map