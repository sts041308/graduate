"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var G = tslib_1.__importStar(require("@antv/g"));
var g2_1 = require("@antv/g2");
var _ = tslib_1.__importStar(require("@antv/util"));
function funnelScaleInY(shape, animateCfg, coord) {
    var _a = animateCfg || {}, _b = _a.duration, duration = _b === void 0 ? 200 : _b, easing = _a.easing, callback = _a.callback, reverse = _a.reverse;
    var box = shape.getBBox();
    var originX = reverse ? box.maxX : box.minX;
    var originY = (box.minY + box.maxY) / 2;
    var shapeIndex = shape.get('index');
    var clip = getClip(coord);
    var clipTargetMatrix = _.clone(clip.attr('matrix'));
    clip.attr('transform', [
        ['t', -originX, -originY],
        ['s', 0, 1],
        ['t', originX, originY],
    ]);
    var shapeTargetFillOpacity = shape.attr('fillOpacity');
    shape.attr('fillOpacity', 0);
    shape.attr('clip', clip);
    clip.animate({
        matrix: clipTargetMatrix,
    }, duration, easing, function () {
        clip.remove();
        shape.attr('clip', null);
    }, shapeIndex * duration);
    shape.animate({
        fillOpacity: shapeTargetFillOpacity,
    }, duration, easing, null, shapeIndex * duration);
    callback && setTimeout(function () { return callback(shape); }, duration + shapeIndex * duration);
}
function getClip(coord) {
    var start = coord.start, end = coord.end, width = coord.width, height = coord.height;
    var clip = new G.Shapes.Rect({
        attrs: {
            x: start.x,
            y: end.y,
            width: width,
            height: height,
        },
    });
    return clip;
}
funnelScaleInY.animationName = 'funnelScaleInX';
g2_1.Animate.registerAnimation('appear', 'funnelScaleInX', funnelScaleInY);
//# sourceMappingURL=funnel-scale-in-x.js.map