import { LayerConfig } from '../../base/layer';
import ViewLayer, { ViewConfig } from '../../base/view-layer';
import './geometry/shape/pointer';
import './theme';
interface GaugeStyle {
    fontColor?: string;
    fontOpacity?: number;
    fontSize?: number;
    borderOpacity?: number;
    borderWidth?: number;
    size?: number;
    tickLabelOffset?: number[];
}
export interface GaugeViewConfig extends ViewConfig {
    startAngle?: number;
    endAngle?: number;
    min?: number;
    max?: number;
    value?: number;
    showValue?: boolean;
    format?: (...args: any[]) => string;
    gaugeStyle?: GaugeStyle;
    range: number[];
    styleMix?: any;
    valueText?: string;
    statistic: any;
}
export interface GaugeLayerConfig extends GaugeViewConfig, LayerConfig {
}
export default class GaugeLayer extends ViewLayer<GaugeLayerConfig> {
    static getDefaultOptions(): any;
    type: string;
    init(): void;
    protected geometryParser(dim: string, type: string): string;
    protected getStyleMix(): any;
    protected scale(): void;
    protected coord(): void;
    protected axis(): void;
    protected addGeometry(): void;
    protected annotation(): void;
    private renderArcs;
    private statisticHtml;
    private renderStatistic;
    private calGapAngle;
}
export {};
