"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var greedy_1 = require("./util/greedy");
/*
   *  根据如下规则尝试放置label
   *                5
   *        ------------------
   *        |    1   |   0   |
   *    8   —————————4————————   7
   *        |    2   |   3   |
   *        ——————————————————
   *                 6
   */
function adjustLabelPosition(label, x, y, index) {
    var bbox = label.getBBox();
    var width = bbox.width;
    var height = bbox.height;
    var attrs = {
        x: x,
        y: y,
        textAlign: 'center',
    };
    switch (index) {
        case 0:
            attrs.y -= (height + 1);
            attrs.x += 1;
            attrs.textAlign = 'left';
            break;
        case 1:
            attrs.y -= (height + 1);
            attrs.x -= 1;
            attrs.textAlign = 'right';
            break;
        case 2:
            attrs.y += (height + 1);
            attrs.x -= 1;
            attrs.textAlign = 'right';
            break;
        case 3:
            attrs.y += (height + 1);
            attrs.x += 1;
            attrs.textAlign = 'left';
            break;
        case 5:
            attrs.y -= (height * 2 + 2);
            break;
        case 6:
            attrs.y += (height * 2 + 2);
            break;
        case 7:
            attrs.x += (width + 1);
            attrs.textAlign = 'left';
            break;
        case 8:
            attrs.x -= (width + 1);
            attrs.textAlign = 'right';
            break;
        default: break;
    }
    label.attr(attrs);
    return label.getBBox();
}
function default_1(labels) {
    var greedy = new greedy_1.default();
    var toBeRemoved = [];
    var bbox;
    var label;
    var x;
    var y;
    var canFill;
    for (var i = 0; i < labels.length; i++) {
        label = labels[i];
        x = label.attr('x');
        y = label.attr('y');
        canFill = false;
        for (var i_1 = 0; i_1 <= 8; i_1++) {
            bbox = adjustLabelPosition(label, x, y, i_1);
            if (greedy.hasGap(bbox)) {
                greedy.fillGap(bbox);
                canFill = true;
                break;
            }
        }
        if (!canFill) {
            toBeRemoved.push(label);
        }
    }
    for (var i = 0; i < toBeRemoved.length; i++) {
        toBeRemoved[i].remove();
    }
}
exports.default = default_1;
//# sourceMappingURL=position.js.map