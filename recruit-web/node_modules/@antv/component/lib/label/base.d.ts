import * as G from '@antv/g';
import Guide from '../base';
import { GuideCfg, LabelItem } from '../interface';
interface LabelCfg extends GuideCfg {
    readonly name?: string;
    /**
     * label类型
     */
    readonly type?: string;
    /**
     * 显示的文本集合
     */
    readonly items?: LabelItem[] | null;
    /**
     * 是否使用html渲染label
     */
    readonly useHtml?: boolean;
    /**
     * html 渲染时用的容器的模板，必须存在 class = "g-labels"
     */
    readonly containerTpl?: string;
    /**
     * html 渲染时单个 label 的模板，必须存在 class = "g-label"
     */
    readonly itemTpl?: string;
    /**
     * label牵引线容器
     */
    readonly lineGroup?: object | null;
    /**
     * 需添加label的shape
     */
    readonly shapes?: object[] | null;
    readonly group?: G.Group;
    readonly canvas?: G.Canvas;
    readonly coord?: any;
}
declare class Label extends Guide<LabelCfg> {
    constructor(cfg?: LabelCfg);
    /**
     * label绘制全过程
     */
    render(): void;
    /**
     * 更新 label
     * 1. 将items与group中的children对比，更新/新增/删除labels
     * 2. labels布局优化
     * 3. 画label连接线
     * 4. 绘制到画布
     */
    draw(canvasDraw?: boolean): void;
    clear(): void;
    /**
     * 销毁group
     */
    destroy(): void;
    changeLabel(oldLabel: any, newLabel: any): void;
    /**
     * 显示label
     */
    show(): void;
    /**
     * 隐藏label
     */
    hide(): void;
    /**
     * 画label连接线
     */
    drawLines(): void;
    _lineToLabel(label: any, lineGroup: any): void;
    _adjustLabels(): void;
    /**
     * 获取当前所有label实例
     * @return {Array} 当前label实例
     */
    getLabels(): any[];
    _createText(oldcfg: any): any;
    _initHtmlContainer(): any;
    _createDom(cfg: any): any;
    _setCustomPosition(cfg: any, htmlDom: any): void;
    private _init;
    private _dryDraw;
}
export default Label;
