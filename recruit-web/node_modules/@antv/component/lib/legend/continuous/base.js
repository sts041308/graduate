"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("@antv/util");
var g_1 = require("@antv/g");
var base_1 = require("../base");
var slider_1 = require("./components/slider");
var constant_1 = require("./constant");
var Continuous = /** @class */ (function (_super) {
    tslib_1.__extends(Continuous, _super);
    function Continuous(cfg) {
        var _this = this;
        var backgroundStyle = cfg.backgroundStyle, fillStyle = cfg.fillStyle, textStyle = cfg.textStyle, titleStyle = cfg.titleStyle, otherCfg = tslib_1.__rest(cfg, ["backgroundStyle", "fillStyle", "textStyle", "titleStyle"]);
        var _a = cfg.layout, layout = _a === void 0 ? 'horizontal' : _a;
        // 放入主题中
        var defaultSize = {
            width: layout === 'horizontal' ? 156 : 16,
            height: layout === 'horizontal' ? 16 : 156,
        };
        _this = _super.call(this, tslib_1.__assign(tslib_1.__assign({ 
            /* title 间距 */
            titleDistance: 16, 
            /* 布局默认水平 */
            layout: 'horizontal', 
            /* 默认可交互 */
            operational: true, 
            /* 滑块的样式： rect | circle */
            handleIcon: 'rect', 
            /* 背景的样式 */
            backgroundStyle: tslib_1.__assign(tslib_1.__assign({}, constant_1.SliderMiddleBackgroundStyle), backgroundStyle), 
            /* slider 滑块前景色 */
            fillStyle: tslib_1.__assign(tslib_1.__assign({}, constant_1.SliderMiddleFrontendStyle), fillStyle), 
            /* 文本样式 */
            textStyle: tslib_1.__assign(tslib_1.__assign({}, constant_1.SliderTextStyle), textStyle), 
            /* 标题样式 */
            titleStyle: tslib_1.__assign(tslib_1.__assign({}, constant_1.DefaultTitleStyle), titleStyle), 
            /* 宽度 */
            width: 156, 
            /* 高度 */
            height: 16 }, defaultSize), otherCfg)) || this;
        return _this;
    }
    Continuous.prototype.init = function () {
        var container = this.get('container');
        this.set('canvas', container.get('canvas'));
        var legendGroup = container.addGroup();
        this.set('legendGroup', legendGroup);
        var itemsGroup = legendGroup.addGroup();
        this.set('itemsGroup', itemsGroup);
        // 平移
        legendGroup.translate(this.get('offsetX'), this.get('offsetY'));
    };
    /**
     * 连续型 title，其实和分类的 canvas title 没有什么区别
     */
    Continuous.prototype.renderTitle = function () {
        if (this.isShowTitle()) {
            var title = this.get('title');
            var container = this.get('legendGroup');
            var titleStyle = this.get('titleStyle');
            var titleShape = container.addShape('text', {
                attrs: tslib_1.__assign({ x: 0, y: 0, text: title }, titleStyle),
            });
            titleShape.name = 'legend-title';
            this.set('titleShape', titleShape);
        }
    };
    /**
     * 连续性，直接 render 滑块即可
     */
    Continuous.prototype.renderItems = function () {
        this.renderSlider();
    };
    // 绑定交互事件
    Continuous.prototype.bindEvents = function () {
        if (this.isOperational()) {
            // 滑块的鼠标拖拽事件
            // 滑块更新数据之后的事件
        }
    };
    /**
    * 清空容器
    */
    Continuous.prototype.clear = function () {
        var container = this.get('container');
        if (container && !container.destroyed) {
            container.clear();
        }
    };
    /**
     * 销毁
     */
    Continuous.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        var container = this.get('container');
        if (container && !container.destroyed) {
            // 将自己从父容器删除，并且销毁自己
            if (container.get('parent')) {
                container.remove(true);
            }
            container.destroy();
        }
    };
    /**
     * 滚动条布局，是否为横向
     * true  横向
     * false 纵向
     */
    Continuous.prototype.isHorizontal = function () {
        return this.get('layout') === 'horizontal';
    };
    /* 是够可交互 */
    Continuous.prototype.isOperational = function () {
        return this.get('operational');
    };
    /* 是够显示标题 */
    Continuous.prototype.isShowTitle = function () {
        return !!this.get('title');
    };
    /* 滑块的配置 */
    Continuous.prototype.getSliderConfig = function () {
        return {
            layout: this.get('layout'),
            sliderType: this.get('handleIcon'),
            sliderSize: this.get('handleSize'),
            sliderStyle: this.get('handleStyle'),
            operational: this.isOperational(),
            // 宽高
            width: this.get('width'),
            height: this.get('height'),
            min: _.head(this.get('items')).value,
            max: _.last(this.get('items')).value,
            // 初始的 range 范围，例如：[ 0, 0.9 ]
            range: this.get('range') || [0, 1],
            // 文本样式
            textStyle: tslib_1.__assign({}, this.get('textStyle')),
            // 格式化
            formatter: this.formatterValue,
        };
    };
    // 渲染滑块（颜色和尺寸的效果是一致的）
    Continuous.prototype.renderSlider = function () {
        var _this = this;
        var itemsGroup = this.get('itemsGroup');
        // 创建 slider
        var slider = new slider_1.default(this.getSliderConfig());
        // 设置背景 group
        slider.setBackground(this.createBackgroundGroup());
        // 平移
        if (this.isShowTitle()) {
            var titleDistance = this.get('titleDistance');
            var titleBbox = this.get('titleShape').getBBox();
            var height = titleBbox.height;
            // 往下平移 title 间距
            slider.translate(0, titleDistance + height);
        }
        // 监听事件
        // 值变更的时候，发送 itemfilter 事件。
        slider.on('sliderchange', function (ev) {
            var value = ev.value, range = ev.range;
            var itemFiltered = new g_1.Event('itemfilter', ev, true, true);
            // @ts-ignore todo 传值格式
            itemFiltered.range = value;
            _this.emit('itemfilter', itemFiltered);
        });
        itemsGroup.add(slider);
        this.set('slider', slider);
    };
    return Continuous;
}(base_1.default));
exports.default = Continuous;
//# sourceMappingURL=base.js.map