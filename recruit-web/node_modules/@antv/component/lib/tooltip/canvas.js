"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
// @ts-ignore // todo 等 g ready 好后再去掉这行 ignore
var domUtil = require("@antv/dom-util");
var G = require("@antv/g");
var matrix_util_1 = require("@antv/matrix-util");
var Util = require("@antv/util");
var const_1 = require("../const");
var base_1 = require("./base");
var crosshair_1 = require("./crosshair");
var position_1 = require("./util/position");
var CanvasTooltip = /** @class */ (function (_super) {
    tslib_1.__extends(CanvasTooltip, _super);
    function CanvasTooltip(cfg) {
        var _this = _super.call(this, tslib_1.__assign({ 
            /**
             * 默认背景板样式
             * @type {Object}
             */
            backgroundStyle: {
                x: 0,
                y: 0,
                width: 100,
                height: 100,
                fill: 'rgba(255, 255, 255, 0.9)',
                radius: 4,
                stroke: '#e2e2e2',
                lineWidth: 1,
            }, 
            /**
             * 默认title样式
             * @type {Object}
             */
            titleStyle: {
                fontFamily: const_1.FONT_FAMILY,
                text: '',
                textBaseline: 'top',
                fontSize: 12,
                fill: 'rgb(87, 87, 87)',
                lineHeight: 20,
                padding: 20,
            }, 
            /**
             * 默认marker样式
             * @type {Object}
             */
            markerStyle: {
                radius: 4,
            }, 
            /**
             * 默认name样式
             * @type {Object}
             */
            nameStyle: {
                fontFamily: const_1.FONT_FAMILY,
                fontSize: 12,
                fill: 'rgb(87, 87, 87)',
                textBaseline: 'middle',
                textAlign: 'start',
                padding: 8,
            }, 
            /**
             * 默认value样式
             * @type {Object}
             */
            valueStyle: {
                fontFamily: const_1.FONT_FAMILY,
                fontSize: 12,
                fill: 'rgb(87, 87, 87)',
                textBaseline: 'middle',
                textAlign: 'start',
                padding: 30,
            }, 
            /**
             * 默认padding值
             * @type {Object}
             */
            padding: { top: 20, right: 20, bottom: 20, left: 20 }, 
            /**
             * 默认item之间的gap
             * @type {Number}
             */
            itemGap: 10, 
            /**
             * 默认tooltip位置移动动画的时长
             * @type {Number}
             */
            animationDuration: 200 }, cfg)) || this;
        // crosshair
        var crosshair = _this.get('crosshairs');
        if (crosshair) {
            var plot = _this.get('frontgroundGroup');
            var crosshairGroup = new crosshair_1.default(Util.mix({
                plot: plot,
                panelRange: _this.get('panelRange'),
                canvas: _this.get('canvas'),
            }, _this.get('crosshairs')));
            crosshairGroup.hide();
            _this.set('crosshairGroup', crosshairGroup);
        }
        _this._init_();
        if (_this.get('items')) {
            _this.render();
        }
        return _this;
    }
    CanvasTooltip.prototype._init_ = function () {
        var padding = this.get('padding');
        var parent = this.get('frontgroundGroup');
        // marker group
        var markerGroup = parent.addGroup({
            capture: false,
        });
        this.set('markerGroup', markerGroup);
        // container
        var container = parent.addGroup();
        container.hide();
        this.set('container', container);
        // board
        var board = container.addShape('rect', {
            attrs: Util.mix({}, this.get('backgroundStyle')),
        });
        this.set('board', board);
        // title
        var titleStyle = this.get('titleStyle');
        if (this.get('showTitle')) {
            var titleShape = container.addShape('text', {
                attrs: Util.mix({
                    x: padding.left,
                    y: padding.top,
                }, titleStyle),
            });
            this.set('titleShape', titleShape);
            titleShape.name = 'tooltip-title';
        }
        // items
        var itemsGroup = container.addGroup();
        itemsGroup.move(padding.left, padding.top + titleStyle.lineHeight + titleStyle.padding);
        this.set('itemsGroup', itemsGroup);
    };
    CanvasTooltip.prototype.render = function () {
        var _this = this;
        this.clear();
        var container = this.get('container');
        var board = this.get('board');
        var showTitle = this.get('showTitle');
        var titleContent = this.get('titleContent');
        var titleShape = this.get('titleShape');
        var itemsGroup = this.get('itemsGroup');
        var items = this.get('items');
        var padding = this.get('padding');
        if (titleShape && showTitle) {
            titleShape.attr('text', titleContent);
        }
        var itemGap = this.get('itemGap');
        var x = 0;
        var y = 0;
        Util.each(items, function (item) {
            var itemGroup = _this._addItem(item);
            itemGroup.move(x, y);
            itemsGroup.add(itemGroup);
            var itemHeight = itemGroup.getBBox().height;
            y += itemHeight + itemGap;
        });
        // update board based on bbox
        var bbox = container.getBBox();
        var width = bbox.width + padding.right;
        var height = bbox.height + padding.bottom;
        board.attr('width', width);
        board.attr('height', height);
        // align value text to right
        this._alignToRight(width);
    };
    CanvasTooltip.prototype.clear = function () {
        var titleShape = this.get('titleShape');
        var itemsGroup = this.get('itemsGroup');
        var board = this.get('board');
        if (titleShape) {
            titleShape.text = '';
        }
        itemsGroup.clear();
        board.attr('width', 0);
        board.attr('height', 0);
    };
    CanvasTooltip.prototype.show = function () {
        var container = this.get('container');
        container.show();
        var crosshairGroup = this.get('crosshairGroup');
        if (crosshairGroup) {
            crosshairGroup.show();
        }
        var markerGroup = this.get('markerGroup');
        if (markerGroup) {
            markerGroup.show();
        }
        _super.prototype.show.call(this);
        this.get('canvas').draw();
    };
    CanvasTooltip.prototype.hide = function () {
        var container = this.get('container');
        container.hide();
        var crosshairGroup = this.get('crosshairGroup');
        if (crosshairGroup) {
            crosshairGroup.hide();
        }
        var markerGroup = this.get('markerGroup');
        if (markerGroup) {
            markerGroup.hide();
        }
        _super.prototype.hide.call(this);
        this.get('canvas').draw();
    };
    CanvasTooltip.prototype.destroy = function () {
        var container = this.get('container');
        var crosshairGroup = this.get('crosshairGroup');
        if (crosshairGroup) {
            crosshairGroup.destroy();
        }
        var markerGroup = this.get('markerGroup');
        if (markerGroup) {
            markerGroup.remove();
        }
        _super.prototype.destroy.call(this);
        container.remove();
    };
    CanvasTooltip.prototype.setPosition = function (oldx, oldy, target) {
        // todo
        var x = oldx;
        var y = oldy;
        var container = this.get('container');
        var outterNode = this.get('canvas').get('el');
        var viewWidth = domUtil.getWidth(outterNode);
        var viewHeight = domUtil.getHeight(outterNode);
        var bbox = container.getBBox();
        var containerWidth = bbox.width;
        var containerHeight = bbox.height;
        var endx = x;
        var endy = y;
        var position;
        if (this.get('position')) {
            position = position_1.defaultPosition(x, y, this.get('position'), containerWidth, containerHeight, target);
            x = position[0];
            y = position[1];
        }
        else {
            position = position_1.constraintPositionInBoundary(x, y, containerWidth, containerHeight, viewWidth, viewHeight);
            x = position[0];
            y = position[1];
        }
        if (this.get('inPanel')) {
            // tooltip 必须限制在绘图区域内
            var panelRange = this.get('panelRange');
            var panelGroup = this.get('panelGroup');
            var panelClip = panelGroup.attr('clip');
            position = position_1.constraintPositionInPanel(x, y, containerWidth, containerHeight, panelClip ? panelClip.getBBox() : panelRange, this.get('enterable'));
            x = position[0];
            y = position[1];
        }
        var markerItems = this.get('markerItems');
        if (!Util.isEmpty(markerItems)) {
            endx = markerItems[0].x;
            endy = markerItems[0].y;
        }
        var ulMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];
        var mat = matrix_util_1.transform(ulMatrix, [['t', x, y]]);
        container.stopAnimate();
        container.animate({
            matrix: mat,
        }, this.get('animationDuration'));
        var crosshairGroup = this.get('crosshairGroup');
        if (crosshairGroup) {
            var items = this.get('items');
            crosshairGroup.setPosition(endx, endy, items);
        }
        _super.prototype.setPosition.call(this, x, y);
    };
    CanvasTooltip.prototype._addItem = function (item) {
        var group = new G.Group();
        var markerRadius = this.get('markerStyle').radius;
        // marker
        if (item.marker) {
            // @ts-ignore
            var markerAttrs = Util.mix({}, item.marker, {
                x: item.marker.radius / 2,
                y: 0,
            });
            group.addShape('marker', {
                attrs: markerAttrs,
            });
            markerRadius = item.marker.radius;
        }
        // name
        var nameStyle = this.get('nameStyle');
        group.addShape('text', {
            attrs: Util.mix({
                x: markerRadius + nameStyle.padding,
                y: 0,
                text: item.name,
            }, nameStyle),
        });
        // value
        var valueStyle = this.get('valueStyle');
        group.addShape('text', {
            attrs: Util.mix({
                x: group.getBBox().width + valueStyle.padding,
                y: 0,
                text: item.value,
            }, valueStyle),
        });
        return group;
    };
    CanvasTooltip.prototype._alignToRight = function (width) {
        var _this = this;
        var itemsGroup = this.get('itemsGroup');
        var groups = itemsGroup.get('children');
        Util.each(groups, function (g) {
            // todo
            var children = g.get('children');
            var valueText = children[2];
            if (valueText) {
                var w = valueText.getBBox().width;
                var x = width - w - _this.get('padding').right * 2;
                valueText.attr('x', x);
            }
        });
    };
    return CanvasTooltip;
}(base_1.default));
exports.default = CanvasTooltip;
//# sourceMappingURL=canvas.js.map