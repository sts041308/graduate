"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var g_1 = require("@antv/g");
var _ = require("@antv/util");
var base_1 = require("./base");
var DataRegion = /** @class */ (function (_super) {
    tslib_1.__extends(DataRegion, _super);
    function DataRegion(cfg) {
        /* istanbul ignore next */
        return _super.call(this, _.deepMix({
            type: 'dataRegion',
            start: null,
            end: null,
            region: {
                lineLength: 0,
                style: {
                    lineWidth: 0,
                    fill: '#000000',
                    opacity: 0.04,
                },
            },
            text: {
                display: true,
                content: '',
                style: {
                    textAlign: 'center',
                    textBaseline: 'bottom',
                    fontSize: 12,
                    fill: 'rgba(0, 0, 0, .65)',
                },
            },
        }, cfg)) || this;
    }
    DataRegion.prototype.render = function (coord, group, data) {
        var _this = this;
        var regionCfg = this.get('region');
        var textCfg = this.get('text');
        var lineLength = regionCfg.lineLength;
        var regionData = this.getRegionData(coord, data);
        if (!regionData.length) {
            return;
        }
        var regionBBox = this.getBBox(regionData);
        var path = [];
        path.push(['M', regionData[0].x, regionBBox.minY - lineLength]);
        for (var i = 0, len = regionData.length; i < len; i++) {
            var p = ['L', regionData[i].x, regionData[i].y];
            path.push(p);
        }
        path.push(['L', regionData[regionData.length - 1].x, regionBBox.minY - lineLength]);
        var regionGroup = group.addGroup();
        regionGroup.addShape('path', {
            attrs: _.mix({
                path: path,
            }, regionCfg.style),
        });
        if (textCfg.display && textCfg.content) {
            regionGroup.addShape('Text', {
                attrs: _.mix({
                    x: (regionBBox.minX + regionBBox.maxX) / 2,
                    y: regionBBox.minY - lineLength,
                    text: textCfg.content,
                }, textCfg.style),
            });
        }
        // 用于事件和动画识别
        regionGroup.get('children').forEach(function (child) {
            child.name = 'annotation-data-region';
            _this.get('appendInfo') && child.setSilent('appendInfo', _this.get('appendInfo'));
        });
        this.set('el', regionGroup);
    };
    DataRegion.prototype.getRegionData = function (coord, data) {
        var start = this.get('start');
        var end = this.get('end');
        var xField = _.head(_.values(this.get('xScales'))).field;
        var yField = _.head(_.values(this.get('yScales'))).field;
        var startXValue = _.isArray(start) ? start[0] : start[xField];
        var endXValue = _.isArray(end) ? end[0] : end[xField];
        var startIndex;
        var arr = [];
        for (var i = 0, len = data.length; i < len; i++) {
            var item = data[i];
            // findIndex
            if (item[xField] === startXValue) {
                startIndex = i;
            }
            if (i >= startIndex) {
                arr.push(this.parsePoint(coord, [item[xField], item[yField]]));
            }
            // findLastIndex
            if (item[xField] === endXValue) {
                break;
            }
        }
        return arr;
    };
    DataRegion.prototype.getBBox = function (data) {
        var xs = [];
        var ys = [];
        for (var i = 0; i < data.length; i++) {
            xs.push(data[i].x);
            ys.push(data[i].y);
        }
        var xRange = _.getRange(xs);
        var yRange = _.getRange(ys);
        return g_1.BBox.fromRange(xRange.min, yRange.min, xRange.max, yRange.max);
    };
    return DataRegion;
}(base_1.default));
exports.default = DataRegion;
//# sourceMappingURL=data-region.js.map