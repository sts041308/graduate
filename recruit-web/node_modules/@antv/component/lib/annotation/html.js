"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var domUtil = require("@antv/dom-util");
var _ = require("@antv/util");
var base_1 = require("./base");
var Html = /** @class */ (function (_super) {
    tslib_1.__extends(Html, _super);
    function Html(cfg) {
        /* istanbul ignore next */
        return _super.call(this, tslib_1.__assign({ type: 'html', zIndex: 7, position: null, alignX: 'middle', alignY: 'middle', offsetX: null, offsetY: null, html: null }, cfg)) || this;
    }
    Html.prototype.render = function (coord, container) {
        var position = this.parsePoint(coord, this.get('position'));
        var parentNode = container.get('canvas').get('el').parentNode;
        var wrapperNode = domUtil.createDom('<div class="guide-annotation"></div>');
        parentNode.appendChild(wrapperNode);
        var html = this.get('html');
        if (_.isFunction(html)) {
            var xScales = this.get('xScales');
            var yScales = this.get('yScales');
            html = html(xScales, yScales);
        }
        // 判断 html 是 Html element 还是 html string
        var htmlNode = _.isElement(html) ? html : domUtil.createDom(html);
        wrapperNode.appendChild(htmlNode);
        domUtil.modifyCSS(wrapperNode, {
            position: 'absolute',
        });
        this.setDomPosition(wrapperNode, htmlNode, position);
        this.set('el', wrapperNode);
    };
    Html.prototype.clear = function () {
        // 由于基类使用了childNode.remove，而IE不支持该方法，需要进行兼容
        var el = this.get('el');
        el && el.parentNode && el.parentNode.removeChild(el);
    };
    Html.prototype.setDomPosition = function (parentDom, childDom, point) {
        var alignX = this.get('alignX');
        var alignY = this.get('alignY');
        var domWidth = domUtil.getOuterWidth(childDom);
        var domHeight = domUtil.getOuterHeight(childDom);
        var position = {
            x: point.x,
            y: point.y,
        };
        if (alignX === 'middle') {
            position.x -= Math.round(domWidth / 2);
        }
        else if (alignX === 'right') {
            position.x -= Math.round(domWidth);
        }
        if (alignY === 'middle') {
            position.y -= Math.round(domHeight / 2);
        }
        else if (alignY === 'bottom') {
            position.y -= Math.round(domHeight);
        }
        var offsetX = this.get('offsetX');
        if (offsetX) {
            position.x += offsetX;
        }
        var offsetY = this.get('offsetY');
        if (offsetY) {
            position.y += offsetY;
        }
        domUtil.modifyCSS(parentDom, {
            top: Math.round(position.y) + "px",
            left: Math.round(position.x) + "px",
            zIndex: this.get('zIndex'),
        });
    };
    return Html;
}(base_1.default));
exports.default = Html;
//# sourceMappingURL=html.js.map