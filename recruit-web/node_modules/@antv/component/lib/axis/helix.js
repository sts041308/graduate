"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Util = require("@antv/util");
var pathUtil = require("@antv/path-util");
var matrix_util_1 = require("@antv/matrix-util");
var base_1 = require("./base");
var Helix = /** @class */ (function (_super) {
    tslib_1.__extends(Helix, _super);
    function Helix(cfg) {
        if (cfg === void 0) { cfg = {}; }
        return _super.call(this, tslib_1.__assign({ type: 'helix', startAngle: 1.25 * Math.PI, endAngle: 7.25 * Math.PI, inner: 0, a: 0, center: null, axisStart: null, crp: [] }, cfg)) || this;
    }
    Helix.prototype.getLinePath = function () {
        var crp = this.get('crp');
        var axisStart = this.get('axisStart');
        var path = pathUtil.catmullRom2Bezier(crp);
        path.unshift(['M', axisStart.x, axisStart.y]);
        return path;
    };
    Helix.prototype.getTickPoint = function (value) {
        var startAngle = this.get('startAngle');
        var endAngle = this.get('endAngle');
        var angle = startAngle + (endAngle - startAngle) * value;
        return this._getHelixPoint(angle);
    };
    Helix.prototype.getSideVector = function (offset, point) {
        var center = this.get('center');
        var vector = [point.x - center.x, point.y - center.y];
        if (!Util.isNil(offset)) {
            var vecLen = matrix_util_1.vec2.length(vector);
            matrix_util_1.vec2.scale(vector, vector, offset / vecLen);
        }
        return vector;
    };
    Helix.prototype.getSidePoint = function (point, offset) {
        var vector = this.getSideVector(offset, point);
        return {
            x: point.x + vector[0],
            y: point.y + vector[1],
        };
    };
    Helix.prototype.getTickEnd = function (start, length) {
        var tickLine = this.get('tickLine');
        var len = length ? length : tickLine.length;
        return this.getSidePoint(start, len);
    };
    Helix.prototype._getHelixPoint = function (angle) {
        var center = this.get('center');
        var a = this.get('a'); // 螺线系数
        var radius = a * angle + this.get('inner'); // 螺线方程
        return {
            x: center.x + Math.cos(angle) * radius,
            y: center.y + Math.sin(angle) * radius,
        };
    };
    return Helix;
}(base_1.default));
exports.default = Helix;
//# sourceMappingURL=helix.js.map