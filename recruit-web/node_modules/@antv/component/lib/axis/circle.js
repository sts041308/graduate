"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var Util = require("@antv/util");
var matrix_util_1 = require("@antv/matrix-util");
var base_1 = require("./base");
var Circle = /** @class */ (function (_super) {
    tslib_1.__extends(Circle, _super);
    function Circle(cfg) {
        if (cfg === void 0) { cfg = {}; }
        return _super.call(this, tslib_1.__assign({ type: 'circle', startAngle: -Math.PI / 2, endAngle: Math.PI * 3 / 2 }, cfg)) || this;
    }
    Circle.prototype.parseTick = function (tick, index, length) {
        return {
            text: tick,
            value: index / length,
        };
    };
    Circle.prototype.getTickPoint = function (value) {
        var startAngle = this.get('startAngle');
        var endAngle = this.get('endAngle');
        var angle = startAngle + (endAngle - startAngle) * value;
        return this._getCirclePoint(angle);
    };
    Circle.prototype.getSideVector = function (offset, point) {
        var center = this.get('center');
        var vector = [point.x - center.x, point.y - center.y];
        if (!Util.isNil(offset)) {
            var vecLen = matrix_util_1.vec2.length(vector);
            matrix_util_1.vec2.scale(vector, vector, offset / vecLen);
        }
        return vector;
    };
    Circle.prototype.getSidePoint = function (point, offset) {
        var vector = this.getSideVector(offset, point);
        return {
            x: point.x + vector[0],
            y: point.y + vector[1],
        };
    };
    Circle.prototype.getTickEnd = function (start, length) {
        var tickLine = this.get('tickLine');
        var len = !Util.isNil(length) ? length : tickLine.length;
        return this.getSidePoint(start, len);
    };
    Circle.prototype.getTextAnchor = function (vector) {
        var align;
        if (Util.isNumberEqual(vector[0], 0)) {
            align = 'center';
        }
        else if (vector[0] > 0) {
            align = 'left';
        }
        else if (vector[0] < 0) {
            align = 'right';
        }
        return align;
    };
    Circle.prototype.getLinePath = function () {
        var center = this.get('center');
        var x = center.x, y = center.y;
        var rx = this.get('radius');
        var ry = rx;
        var startAngle = this.get('startAngle');
        var endAngle = this.get('endAngle');
        var inner = this.get('inner');
        var path = [];
        if (Math.abs(endAngle - startAngle) === Math.PI * 2) {
            path = [
                ['M', x, y],
                ['m', 0, -ry],
                ['a', rx, ry, 0, 1, 1, 0, 2 * ry],
                ['a', rx, ry, 0, 1, 1, 0, -2 * ry],
                ['z'],
            ];
        }
        else {
            var startPoint = this._getCirclePoint(startAngle);
            var endPoint = this._getCirclePoint(endAngle);
            var large = Math.abs(endAngle - startAngle) > Math.PI ? 1 : 0;
            var sweep = startAngle > endAngle ? 0 : 1;
            if (!inner) {
                path = [
                    ['M', x, y],
                    ['L', startPoint.x, startPoint.y],
                    ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y],
                    ['L', x, y],
                ];
            }
            else {
                var innerStartVector = this.getSideVector(inner * rx, startPoint);
                var innerEndVector = this.getSideVector(inner * rx, endPoint);
                var innerStartPoint = {
                    x: innerStartVector[0] + x,
                    y: innerStartVector[1] + y,
                };
                var innerEndPoint = {
                    x: innerEndVector[0] + x,
                    y: innerEndVector[1] + y,
                };
                path = [
                    ['M', innerStartPoint.x, innerStartPoint.y],
                    ['L', startPoint.x, startPoint.y],
                    ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y],
                    ['L', innerEndPoint.x, innerEndPoint.y],
                    ['A', rx * inner, ry * inner, 0, large, Math.abs(sweep - 1), innerStartPoint.x, innerStartPoint.y],
                ];
            }
        }
        return path;
    };
    Circle.prototype.addLabel = function (tick, point, index, tickCount) {
        var offset = Util.get(this.get('label'), 'offset', 5);
        var p = this.getSidePoint(point, offset);
        _super.prototype.addLabel.call(this, tick, p, index, tickCount);
    };
    Circle.prototype.autoRotateLabels = function () {
        var ticks = this.get('ticks');
        var labelRenderer = this.get('labelRenderer');
        if (labelRenderer && ticks.length > 12) { // 小于12个文本时文本不旋转
            var radius = this.get('radius');
            var startAngle_1 = this.get('startAngle');
            var endAngle = this.get('endAngle');
            var totalAngle_1 = (endAngle - startAngle_1);
            var avgAngle = totalAngle_1 / (ticks.length - 1);
            var avgWidth_1 = Math.sin(avgAngle / 2) * radius * 2;
            var maxLength_1 = this.getMaxLabelWidthOrHeight(labelRenderer, 'width');
            Util.each(labelRenderer.getLabels(), function (label, index) {
                var tick = ticks[index];
                var angle = tick.value * totalAngle_1 + startAngle_1;
                var mode = angle % (Math.PI * 2);
                if (maxLength_1 < avgWidth_1) { // 文本的最大宽度大于
                    if (mode <= 0) {
                        angle = angle + Math.PI;
                    }
                    if (mode > Math.PI) {
                        angle = angle - Math.PI;
                    }
                    angle = angle - Math.PI / 2;
                    label.attr('textAlign', 'center');
                }
                else {
                    if (mode > Math.PI / 2) {
                        angle = angle - Math.PI;
                    }
                    else if (mode < Math.PI / 2 * -1) {
                        angle = angle + Math.PI;
                    }
                }
                label.rotateAtStart(angle);
            });
        }
    };
    Circle.prototype._getCirclePoint = function (angle, radius) {
        if (radius === void 0) { radius = 0; }
        var center = this.get('center');
        var r = radius || this.get('radius');
        return {
            x: center.x + Math.cos(angle) * r,
            y: center.y + Math.sin(angle) * r,
        };
    };
    return Circle;
}(base_1.default));
exports.default = Circle;
//# sourceMappingURL=circle.js.map