import { __assign, __extends } from "tslib";
import * as Util from '@antv/util';
import Guide from '../base';
var Tooltip = /** @class */ (function (_super) {
    __extends(Tooltip, _super);
    function Tooltip(cfg) {
        return _super.call(this, __assign({ 
            /**
             * 右下角坐标
             */
            x: 0, 
            /**
             * y 右下角坐标
             */
            y: 0, 
            /**
             * tooltip 记录项
             */
            items: null, 
            /**
             * tooltip 标题
             * @type {Array}
             */
            titleContent: null, 
            /**
             * 是否展示 title
             * @type {Boolean}
             */
            showTitle: true, 
            /**
             * 视图范围
             * @type {Object}
             */
            panelRange: null, 
            /**
             * 将 tooltip 展示在指定区域内
             * @type {Boolean}
             */
            inPanel: true, 
            /**
             * tooltip 辅助线配置
             * @type {Object}
             */
            crosshairs: null }, cfg)) || this;
    }
    Tooltip.prototype.isContentChange = function (title, items) {
        var titleContent = this.get('titleContent');
        var lastItems = this.get('items');
        var isChanged = !(title === titleContent && lastItems.length === items.length);
        if (!isChanged) {
            Util.each(items, function (item, index) {
                var preItem = lastItems[index];
                var keys = Object.keys(item);
                isChanged = keys.some(function (key) { return !Util.isObject(item[key]) && item[key] !== preItem[key]; });
                if (isChanged) {
                    return false;
                }
            });
        }
        return isChanged;
    };
    Tooltip.prototype.setContent = function (title, items) {
        this.set('items', items);
        this.set('titleContent', title);
        this.render();
        return this;
    };
    Tooltip.prototype.setPosition = function (x, y, target) {
        this.set('x', x);
        this.set('y', y);
    };
    Tooltip.prototype.setMarkers = function (markerItems, markerCfg) {
        var markerGroup = this.get('markerGroup');
        var frontgroundGroup = this.get('frontgroundGroup');
        if (!markerGroup) {
            markerGroup = frontgroundGroup.addGroup({
                zIndex: 1,
                capture: false,
            });
            this.set('markerGroup', markerGroup);
        }
        else {
            markerGroup.clear();
        }
        Util.each(markerItems, function (item) {
            markerGroup.addShape('marker', {
                color: item.color,
                attrs: Util.mix({
                    fill: item.color,
                    symbol: 'circle',
                    shadowColor: item.color,
                }, markerCfg, {
                    x: item.x,
                    y: item.y,
                }),
            });
        });
        this.set('markerItems', markerItems);
    };
    Tooltip.prototype.clearMarkers = function () {
        var markerGroup = this.get('markerGroup');
        markerGroup && markerGroup.clear();
    };
    Tooltip.prototype.render = function () {
    };
    Tooltip.prototype.clear = function () {
    };
    Tooltip.prototype.show = function () {
        this.set('visible', true);
    };
    Tooltip.prototype.hide = function () {
        this.set('visible', false);
    };
    return Tooltip;
}(Guide));
export default Tooltip;
//# sourceMappingURL=base.js.map