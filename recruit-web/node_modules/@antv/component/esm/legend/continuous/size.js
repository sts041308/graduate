import { __assign, __extends } from "tslib";
import { Group, Polygon } from '@antv/g';
import Continuous from './base';
// circle 的时候，背景的高度
var CircleBackgroundHalfHeight = 2;
var Size = /** @class */ (function (_super) {
    __extends(Size, _super);
    function Size(cfg) {
        return _super.call(this, __assign({ type: 'size-legend' }, cfg)) || this;
    }
    Size.prototype.getBackgroundShapeAttr = function () {
        var width = this.get('width');
        var height = this.get('height');
        var halfWidth = width / 2;
        var halfHeight = height / 2;
        var points = [];
        if (this.get('handleIcon') === 'rect') {
            points = this.isHorizontal() ? [
                [0, height],
                [0, height - 4],
                [width, 0],
                [width, height],
            ] : [
                [0, 0],
                [width, 0],
                [width, height],
                [width - 4, height],
            ];
        }
        else {
            points = this.isHorizontal() ? [
                [0, halfHeight + CircleBackgroundHalfHeight],
                [0, halfHeight - CircleBackgroundHalfHeight],
                [width, halfHeight - CircleBackgroundHalfHeight],
                [width, halfHeight + CircleBackgroundHalfHeight],
            ] : [
                [halfWidth + CircleBackgroundHalfHeight, 0],
                [halfWidth - CircleBackgroundHalfHeight, 0],
                [halfWidth - CircleBackgroundHalfHeight, height],
                [halfWidth + CircleBackgroundHalfHeight, height],
            ];
        }
        return {
            points: points,
        };
    };
    /* 背景的样式，size 和 color 的背景完全不一样 */
    Size.prototype.createBackgroundGroup = function () {
        var shapeAttribute = this.getBackgroundShapeAttr();
        var backgroundStyle = this.get('backgroundStyle');
        var fillStyle = this.get('fillStyle');
        var background = new Polygon({
            attrs: __assign(__assign({}, shapeAttribute), backgroundStyle),
        });
        var frontend = new Polygon({
            attrs: __assign(__assign(__assign({}, shapeAttribute), backgroundStyle), fillStyle),
        });
        var group = new Group();
        if (this.isOperational()) {
            group.add(background);
            group.add(frontend);
        }
        else {
            // 不可交互的时候，不需要 frontend
            group.add(frontend);
        }
        return {
            group: group,
            background: background,
            frontend: frontend,
        };
    };
    return Size;
}(Continuous));
export default Size;
//# sourceMappingURL=size.js.map