import { Group, Shape } from '@antv/g';
import { CreateBgType } from '../interface';
export interface SliderCfg {
    readonly layout: string;
    readonly sliderType: string;
    readonly sliderSize?: number[];
    readonly sliderStyle?: object;
    readonly operational: boolean;
    readonly width: number;
    readonly height: number;
    readonly min: number;
    readonly max: number;
    readonly range: number[];
    readonly textStyle: object;
    readonly formatter: Function;
}
/**
 * 滑动条的逻辑
 *
 * 滑动条包括几个部分：
 * - 滑动条背景
 * - 小滑块区域（滑块 + 文本）
 * - 大滑块区域（滑块 + 文本
 * - 中间滑动区域（左右滑块中间可以滑动选中的区域）
 * - 鼠标 hover 提示文本（暂时不处理）
 *
 * 其中 min，max，range 的创建内置掉，仅有外部的布局（v，h）、类型（rect、circle）影响
 */
export default class Slider extends Group {
    layout: string;
    sliderType: string;
    sliderSize: number[];
    operational: boolean;
    backgroundGroup: Group;
    width: number;
    height: number;
    min: number;
    max: number;
    step?: number;
    range: number[];
    textStyle: object;
    formatter: Function;
    minSliderGroup: Group;
    minSliderShape: Shape;
    minTextShape: Shape;
    maxSliderGroup: Group;
    maxSliderShape: Shape;
    maxTextShape: Shape;
    rangeSliderShape: Shape;
    clearAllEvents: Function;
    currentTarget: Shape;
    private pos;
    constructor(cfg: SliderCfg);
    /**
     * 外部设置 background
     * @param bg
     */
    setBackground(bg: CreateBgType): void;
    /**
     * 滚动条布局，是否为横向
     * true  横向
     * false 纵向
     */
    isHorizontal(): boolean;
    /**
     * 初始化滑块
     * 在配置完滑块的背景之后，挑用初始化方法来初始化 slider
     */
    private initialSlider;
    private getSliderCursor;
    private createMinSliderGroup;
    private createMaxSliderGroup;
    private createRangeSliderShape;
    private getRectButtonAttribute;
    private getCircleButtonAttribute;
    /**
     * 创建滑块
     * @param group
     * @param isMin 是小滑块还是大滑块
     */
    private createSliderButton;
    private getRectTextAttribute;
    private getCircleTextAttribute;
    /**
     * 创建滑块文字
     * @param group
     * @param isMin
     */
    private createSliderText;
    private bindEvent;
    private onMouseDown;
    private bindCanvasEvents;
    private onMouseMove;
    private onMouseUp;
    private isDragMin;
    private isDragMax;
    private isDragAll;
    /**
     * 根据鼠标位置 x,y，更新滑块位置状态
     * @param x
     * @param y
     */
    private updateSliderStatus;
    private renderUIWithRange;
    /**
     * 在原来 range 的基础上，增加一个 diff
     * @param range
     * @param diff
     */
    private getNewRange;
    private getValue;
}
