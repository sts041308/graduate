import { __assign, __extends } from "tslib";
import { BBox, Event, Group, Rect } from '@antv/g';
import { clone, each, filter, isNumber, mix, wrapBehavior } from '@antv/util';
import Arrow from './arrow';
import CategoryBase from './base';
var CanvasLegend = /** @class */ (function (_super) {
    __extends(CanvasLegend, _super);
    function CanvasLegend(cfg) {
        return _super.call(this, __assign({ type: 'category-legend' }, cfg)) || this;
    }
    CanvasLegend.prototype.init = function () {
        this.isFlipped = false;
        var container = this.get('container');
        this.set('canvas', container.get('canvas'));
        var itemsGroup = container.addGroup();
        this.set('itemsGroup', itemsGroup);
        if (this.get('flipPage')) {
            this.set('autoWrap', true);
        }
    };
    CanvasLegend.prototype.renderTitle = function () {
        var title = this.get('title');
        if (title) {
            var container = this.get('container');
            var titleStyle = this.get('titleStyle');
            var titleShape = container.addShape('text', {
                attrs: __assign({ x: 0, y: 0, text: title }, titleStyle),
            });
            titleShape.name = 'legend-title';
            this.set('titleShape', titleShape);
        }
    };
    CanvasLegend.prototype.renderItems = function () {
        var _this = this;
        var items = this.get('items');
        if (this.get('reversed')) {
            items.reverse();
        }
        each(items, function (item) {
            _this._addItem(item);
        });
        var _a = this._getMaxItemSize(), maxItemWidth = _a.maxItemWidth, maxItemHeight = _a.maxItemHeight;
        this.set('maxItemWidth', maxItemWidth);
        this.set('maxItemHeight', maxItemHeight);
        var needPageFlip = this.isNeedFlip();
        if (this.get('autoWrap')) {
            this._adjustItems();
        } // 默认自动换行
        if (needPageFlip) {
            this.flipPage();
        }
        this._adjustPositionOffset();
        this._renderBack();
    };
    CanvasLegend.prototype.isNeedFlip = function () {
        var maxWidth = this.get('maxWidth');
        var maxHeight = this.get('maxHeight');
        var itemsBBox = this.get('itemsGroup').getBBox();
        var layout = this.get('layout');
        if (this.get('flipPage')) {
            if (layout === 'vertical' && maxHeight < itemsBBox.height) {
                return true;
            }
            if (layout === 'horizontal' && maxWidth < itemsBBox.width) {
                return true;
            }
        }
        return false;
    };
    CanvasLegend.prototype.flipPage = function () {
        var _this = this;
        this.isFlipped = true;
        var maxItemWidth = this.get('maxItemWidth');
        var maxItemHeight = this.get('maxItemHeight');
        var maxWidth = this.get('maxWidth');
        var maxHeight = this.get('maxHeight');
        var itemsGroup = this.get('itemsGroup');
        var itemsBBox = itemsGroup.getBBox();
        var layout = this.get('layout');
        var paginationCfg = this._getPaginationCfg();
        // 根据layout创建clip
        var pageNumber = 0;
        var mode = 'up-down'; // 上下翻页
        var x = itemsBBox.tl.x;
        var y = itemsBBox.tl.y; // 翻页器位置
        var size = 0; // 翻页器尺寸
        var clip = new Rect({
            attrs: {
                x: x,
                y: y,
                width: maxWidth - paginationCfg.size,
                height: maxHeight,
            },
        });
        if (layout === 'horizontal') {
            var width = Math.max(maxWidth, itemsBBox.width);
            clip.attr('width', width);
            clip.attr('height', maxItemHeight);
            this.set('maxWidth', width);
            this.set('maxHeight', maxItemHeight);
            pageNumber = Math.ceil(itemsBBox.height / (maxItemHeight + this.get('itemMarginBottom')));
            x = x + width - paginationCfg.size; // temp:padding
            y = Math.ceil(y + maxItemHeight / 2);
            size = maxItemHeight;
            if (y - this._getHorizontalPaginationHeight() / 2 < 0) {
                var offsetY = (this.get('offsetY') || 0) + this._getHorizontalPaginationHeight() / 2 - y;
                this.set('offsetY', offsetY);
            }
        }
        if (layout === 'vertical') {
            clip.attr('width', maxItemWidth);
            var height = Math.max(maxHeight, itemsBBox.height);
            clip.attr('height', height);
            this.set('maxWidth', maxItemWidth);
            this.set('maxHeight', height);
            pageNumber = Math.ceil(itemsBBox.width / (maxItemWidth + this.get('itemDistance')));
            y = y + height + 10; // temp: padding
            mode = 'left-right';
            size = maxItemWidth;
        }
        // 应用clip
        itemsGroup.attr('clip', clip);
        this.set('clip', clip);
        // 绘制翻页器UI
        var flipUI = this.flipPageUI(x, y, size, pageNumber, mode);
        this.flipUI = flipUI;
        // 加入交互
        var currentIndex = 1;
        var arrow1 = flipUI.arrows[0];
        var arrow2 = flipUI.arrows[1];
        arrow1.on('click', function () {
            if (currentIndex > 1) {
                currentIndex -= 1;
                flipUI.text.attr('text', currentIndex + " / " + pageNumber);
                var matrix = clone(itemsGroup.attr('matrix'));
                if (layout === 'vertical') {
                    var dist = _this.get('itemDistance') + maxItemWidth;
                    matrix[6] += dist;
                }
                else {
                    var dist = maxItemHeight + _this.get('itemMarginBottom');
                    matrix[7] += dist;
                }
                itemsGroup.stopAnimate();
                itemsGroup.animate({
                    matrix: matrix,
                }, 100);
                _this.get('canvas').draw();
            }
        });
        arrow2.on('click', function () {
            if (currentIndex < pageNumber) {
                currentIndex += 1;
                flipUI.text.attr('text', currentIndex + " / " + pageNumber);
                var matrix = clone(itemsGroup.attr('matrix'));
                if (layout === 'vertical') {
                    var dist = _this.get('itemDistance') + maxItemWidth;
                    matrix[6] -= dist;
                }
                else {
                    var dist = maxItemHeight + _this.get('itemMarginBottom');
                    matrix[7] -= dist;
                }
                itemsGroup.stopAnimate();
                itemsGroup.animate({
                    matrix: matrix,
                }, 100);
            }
        });
    };
    CanvasLegend.prototype.flipPageUI = function (x, y, size, pageNumber, mode) {
        var paginationCfg = this._getPaginationCfg();
        var container = this.get('container');
        var group = container.addGroup();
        var arrows = [];
        var text;
        if (mode === 'left-right') {
            // left arrow
            var la = new Arrow(mix({}, paginationCfg.arrow, {
                x: x + paginationCfg.arrow.width / 2,
                y: y,
                direction: 'left',
            }));
            group.add(la.shape);
            arrows.push(la.shape);
            // right arrow
            var ra = new Arrow(mix({}, paginationCfg.arrow, {
                x: x + size - paginationCfg.arrow.width / 2,
                y: y,
                direction: 'right',
            }));
            group.add(ra.shape);
            arrows.push(ra.shape);
            // text
            text = group.addShape('text', {
                attrs: mix({}, paginationCfg.text, {
                    x: x + size / 2,
                    y: y,
                    text: "1 / " + pageNumber,
                }),
            });
        }
        else {
            // upper arrow
            var height = this._getHorizontalPaginationHeight();
            var ua = new Arrow(mix({}, paginationCfg.arrow, {
                x: x,
                y: y - height / 2 + paginationCfg.arrow.height / 2,
                direction: 'up',
            }));
            group.add(ua.shape);
            arrows.push(ua.shape);
            // lower arrow
            var da = new Arrow(mix({}, paginationCfg.arrow, {
                x: x,
                y: y + height / 2 - paginationCfg.arrow.height / 2,
                direction: 'down',
            }));
            group.add(da.shape);
            arrows.push(da.shape);
            // text
            text = group.addShape('text', {
                attrs: mix({}, paginationCfg.text, {
                    x: x,
                    y: y,
                    text: "1 / " + pageNumber,
                }),
            });
        }
        return {
            arrows: arrows,
            text: text,
            container: group,
        };
    };
    CanvasLegend.prototype._getPaginationCfg = function () {
        var defaultCfg = {
            arrow: {
                x: 0,
                y: 0,
                width: 10,
                height: 8,
                attrs: {
                    fill: '#ccc',
                    cursor: 'pointer',
                },
                direction: 'right',
            },
            text: {
                fontSize: 12,
                fill: '#ccc',
                textAlign: 'center',
                textBaseline: 'middle',
            },
            size: 40,
        };
        // todo: 允许用户自行配置样式
        return defaultCfg;
    };
    CanvasLegend.prototype._getHorizontalPaginationHeight = function () {
        var GAP = 2;
        var cfg = this._getPaginationCfg();
        return cfg.text.fontSize + cfg.arrow.height * 2 + GAP * 2;
    };
    CanvasLegend.prototype.bindEvents = function () {
        var itemsGroup = this.get('itemsGroup');
        if (this.get('hoverable')) {
            itemsGroup.on('mousemove', wrapBehavior(this, '_onMousemove'));
            itemsGroup.on('mouseleave', wrapBehavior(this, '_onMouseleave'));
        }
        if (this.get('clickable')) {
            itemsGroup.on('click', wrapBehavior(this, '_onClick'));
        }
    };
    /**
     * 清空容器
     */
    CanvasLegend.prototype.clear = function () {
        var container = this.get('container');
        if (container && !container.destroyed) {
            container.clear();
        }
    };
    /**
     * 销毁
     */
    CanvasLegend.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        var container = this.get('container');
        if (container && !container.destroyed) {
            if (container.get('parent')) {
                container.remove();
            }
            container.destroy();
        }
    };
    CanvasLegend.prototype.getCheckedCount = function () {
        var itemsGroup = this.get('itemsGroup');
        var items = itemsGroup.get('children');
        var checkedArr = filter(items, function (item) {
            return item.get('checked');
        });
        return checkedArr.length;
    };
    CanvasLegend.prototype.getWidth = function () {
        return this.getBBox().width;
    };
    CanvasLegend.prototype.getHeight = function () {
        return this.getBBox().height;
    };
    CanvasLegend.prototype.getBBox = function () {
        if (this.isFlipped) {
            var clip = this.get('clip');
            var fliperContainer = this.flipUI.container;
            return this._mergeBBox([clip.getBBox(), fliperContainer.getBBox()]);
        }
        return this.get('container').getBBox();
    };
    CanvasLegend.prototype._adjustPositionOffset = function () {
        var offsetX = this.get('offsetX');
        var offsetY = this.get('offsetY');
        var container = this.get('container');
        container.move(offsetX, offsetY);
    };
    CanvasLegend.prototype._addItem = function (item) {
        var itemsGroup = this.get('itemsGroup');
        var x = this._getNextX();
        var y = this._getNextY();
        var unSelectedColor = this.get('unSelectedColor');
        var itemGroup = itemsGroup.addGroup({
            x: x,
            y: y,
            value: item.value,
            checked: item.checked,
        });
        var textStyle = this.get('textStyle');
        var wordSpace = this.get('wordSpacing');
        var startX = 0;
        if (item.marker) {
            // 如果有marker添加marker
            var markerAttrs = Object.assign({}, item.marker, {
                x: item.marker.radius + x,
                y: y,
            });
            if (!item.checked) {
                if (markerAttrs.fill) {
                    markerAttrs.fill = unSelectedColor;
                }
                if (markerAttrs.stroke) {
                    markerAttrs.stroke = unSelectedColor;
                }
            }
            var markerShape = itemGroup.addShape('marker', {
                type: 'marker',
                attrs: markerAttrs,
            });
            markerShape.attr('cursor', 'pointer');
            markerShape.name = 'legend-marker';
            startX += markerShape.getBBox().width + wordSpace;
        }
        var textAttrs = Object.assign({}, textStyle, {
            x: startX + x,
            y: y - (item.marker ? item.marker.radius / 2 : 0) + textStyle.fontSize / 4,
            text: this.formatterValue(item.value),
        });
        if (!item.checked) {
            Object.assign(textAttrs, {
                fill: unSelectedColor,
            });
        }
        var textShape = itemGroup.addShape('text', {
            attrs: textAttrs,
        });
        textShape.attr('cursor', 'pointer');
        textShape.name = 'legend-text';
        var bbox = itemGroup.getBBox();
        var itemWidth = this.get('itemWidth');
        var wrapperShape = itemGroup.addShape('rect', {
            attrs: {
                x: x,
                y: y - bbox.height / 2,
                fill: '#fff',
                fillOpacity: 0,
                width: itemWidth || bbox.width,
                height: bbox.height,
            },
        });
        wrapperShape.attr('cursor', 'pointer');
        wrapperShape.set('origin', item); // 保存图例项相关的数据，便于事件操作
        wrapperShape.name = 'legend-item';
        itemGroup.name = 'legendGroup';
        return itemGroup;
    };
    // 获取的图例元素 X 位置
    CanvasLegend.prototype._getNextX = function () {
        var layout = this.get('layout');
        var itemDistance = this.get('itemDistance');
        var itemsGroup = this.get('itemsGroup');
        var itemWidth = this.get('itemWidth');
        var children = itemsGroup.get('children');
        var nextX = 0;
        if (layout === 'horizontal') {
            // 水平布局
            each(children, function (item) {
                nextX += (itemWidth ? itemWidth : item.getBBox().width) + itemDistance;
            });
        }
        return nextX;
    };
    CanvasLegend.prototype._getNextY = function () {
        var itemMarginBottom = this.get('itemMarginBottom');
        var titleDistance = this.get('titleDistance');
        var layout = this.get('layout');
        var itemsGroup = this.get('itemsGroup');
        var titleShape = this.get('titleShape');
        var children = itemsGroup.get('children');
        var nextY = titleDistance;
        if (titleShape) {
            nextY += titleShape.getBBox().height;
        }
        if (layout === 'vertical') {
            // 竖直布局
            each(children, function (item) {
                nextY += item.getBBox().height + itemMarginBottom;
            });
        }
        return nextY;
    };
    CanvasLegend.prototype._adjustHorizontal = function () {
        var margin = this.flipPage ? this._getPaginationCfg().size : 0;
        var itemsGroup = this.get('itemsGroup');
        var children = itemsGroup.get('children');
        var maxLength = this.get('maxWidth') - margin;
        var itemDistance = this.get('itemDistance');
        var itemMarginBottom = this.get('itemMarginBottom');
        var titleDistance = this.get('titleDistance');
        var row = 0;
        var rowLength = 0;
        var width;
        var height;
        var box;
        var itemWidth = this.get('itemWidth');
        if (itemsGroup.getBBox().width > maxLength) {
            each(children, function (child) {
                box = child.getBBox();
                width = itemWidth || box.width;
                height = box.height + itemMarginBottom;
                if (maxLength - rowLength < width) {
                    row++;
                    rowLength = 0;
                }
                child.move(rowLength, row * height + titleDistance);
                rowLength += width + itemDistance;
            });
        }
        return;
    };
    CanvasLegend.prototype._adjustVertical = function () {
        var maxItemWidth = this._getMaxItemSize().maxItemWidth;
        var itemsGroup = this.get('itemsGroup');
        var titleShape = this.get('titleShape');
        var children = itemsGroup.get('children');
        var maxLength = this.get('maxLength'); // 垂直布局，则 maxLength 代表容器的高度
        var itemDistance = this.get('itemDistance');
        var itemMarginBottom = this.get('itemMarginBottom');
        var titleDisatance = this.get('titleDistance');
        var titleHeight = titleShape ? titleShape.getBBox().height + titleDisatance : 0;
        var itemWidth = this.get('itemWidth') ? this.get('itemWidth') : 0;
        var colLength = titleHeight + itemsGroup.getBBox().height;
        var width;
        var height;
        var box;
        maxItemWidth = Math.max(maxItemWidth, itemWidth) + itemDistance;
        var totalLength = 0;
        if (colLength > maxLength) {
            each(children, function (child, index) {
                box = child.getBBox();
                width = box.width;
                height = box.height;
                /*if (index > 0) {
                  maxItemWidth = itemWidth + itemDistance;
                }*/
                if (maxLength - colLength < height) {
                    // 剩余高度不能满足一行，增加一列
                    colLength = titleHeight;
                    if (index > 0) {
                        totalLength += maxItemWidth;
                    }
                    child.move(totalLength, titleHeight);
                }
                else {
                    child.move(totalLength, colLength);
                }
                colLength += height + itemMarginBottom;
            });
        }
    };
    CanvasLegend.prototype._adjustItems = function () {
        var layout = this.get('layout');
        layout === 'horizontal' ? this._adjustHorizontal() : this._adjustVertical();
    };
    CanvasLegend.prototype._renderBack = function () {
        var container = this.get('container');
        var padding = this.get('backgroundPadding');
        var backAttrs = this.get('backgroundStyle');
        if (isNumber(padding)) {
            padding = [padding, padding, padding, padding];
        }
        if (!backAttrs) {
            return;
        }
        container.renderBack(padding, backAttrs);
    };
    CanvasLegend.prototype._onMousemove = function (ev) {
        var item = this._getLegendItem(ev.target);
        if (item && item.get('checked')) {
            var itemMouseover = new Event('itemmouseover', ev, true, true);
            itemMouseover.item = this._findItem(item);
            itemMouseover.checked = item.get('checked');
            this.emit('itemmouseover', itemMouseover);
            this.get('canvas').draw();
        }
    };
    CanvasLegend.prototype._onMouseleave = function (ev) {
        var item = this._getLegendItem(ev.target);
        if (item && item.get('checked')) {
            var itemMouseleave = new Event('itemmouseleave', ev, true, true);
            itemMouseleave.item = this._findItem(item);
            itemMouseleave.checked = item.get('checked');
            this.emit('itemmouseleave', itemMouseleave);
            this.get('canvas').draw();
        }
    };
    CanvasLegend.prototype._onClick = function (ev) {
        var _this = this;
        var clickedItem = this._getLegendItem(ev.target);
        if (clickedItem && !clickedItem.get('destroyed')) {
            var checked = clickedItem.get('checked');
            if (!this.get('allowAllCanceled') && checked && this.getCheckedCount() === 1) {
                return;
            }
            var mode = this.get('selectedMode');
            var item_1 = this._findItem(clickedItem);
            var itemClick = new Event('itemclick', ev, true, true);
            itemClick.item = item_1;
            itemClick.currentTarget = clickedItem;
            itemClick.checked = mode === 'single' ? true : !checked;
            var unSelectedColor_1 = this.get('unSelectedColor');
            var checkColor_1 = this.get('textStyle').fill;
            var markerItem_1;
            var textItem_1;
            var legendItem_1;
            if (mode === 'single') {
                var itemsGroup = this.get('itemsGroup');
                var children = itemsGroup.get('children');
                each(children, function (child) {
                    markerItem_1 = _this._findShapeByName(child, 'legend-marker');
                    textItem_1 = _this._findShapeByName(child, 'legend-text');
                    legendItem_1 = _this._findShapeByName(child, 'legend-item');
                    if (child !== clickedItem) {
                        if (markerItem_1.attr('fill')) {
                            markerItem_1.attr('fill', unSelectedColor_1);
                        }
                        if (markerItem_1.attr('stroke')) {
                            markerItem_1.attr('stroke', unSelectedColor_1);
                        }
                        textItem_1.attr('fill', unSelectedColor_1);
                        markerItem_1.set('checked', false);
                        markerItem_1.set('rawAttrs', __assign({}, markerItem_1.get('attrs')));
                        textItem_1.set('checked', false);
                        legendItem_1.set('checked', false);
                        child.set('checked', false);
                    }
                    else {
                        if (markerItem_1.attr('fill')) {
                            markerItem_1.attr('fill', item_1.marker.fill);
                        }
                        if (markerItem_1.attr('stroke')) {
                            markerItem_1.attr('stroke', item_1.marker.stroke);
                        }
                        textItem_1.attr('fill', checkColor_1);
                        markerItem_1.set('rawAttrs', __assign({}, markerItem_1.get('attrs')));
                        markerItem_1.set('checked', true);
                        textItem_1.set('checked', true);
                        legendItem_1.set('checked', true);
                        child.set('checked', true);
                    }
                });
            }
            else {
                markerItem_1 = this._findShapeByName(clickedItem, 'legend-marker');
                textItem_1 = this._findShapeByName(clickedItem, 'legend-text');
                legendItem_1 = this._findShapeByName(clickedItem, 'legend-item');
                if (markerItem_1.attr('fill')) {
                    markerItem_1.attr('fill', checked ? unSelectedColor_1 : item_1.marker.fill);
                }
                if (markerItem_1.attr('stroke')) {
                    markerItem_1.attr('stroke', checked ? unSelectedColor_1 : item_1.marker.stroke);
                }
                textItem_1.attr('fill', checked ? unSelectedColor_1 : checkColor_1);
                clickedItem.set('checked', !checked);
                markerItem_1.set('checked', !checked);
                textItem_1.set('checked', !checked);
                legendItem_1.set('checked', !checked);
            }
            this.emit('itemclick', itemClick);
            this.get('canvas').draw();
        }
        return;
    };
    CanvasLegend.prototype._getLegendItem = function (target) {
        var item = target.get('parent');
        if (item && item.name === 'legendGroup') {
            return item;
        }
        return null;
    };
    CanvasLegend.prototype._findItem = function (refer) {
        var items = this.get('items');
        var rst = null;
        var value = refer instanceof Group ? refer.get('value') : refer;
        each(items, function (item) {
            if (item.value === value) {
                rst = item;
                return false;
            }
        });
        return rst;
    };
    CanvasLegend.prototype._findShapeByName = function (group, name) {
        return group.findBy(function (node) {
            return node.name === name;
        });
    };
    CanvasLegend.prototype._getMaxItemSize = function () {
        var maxItemWidth = -Infinity;
        var maxItemHeight = -Infinity;
        var itemGroup = this.get('itemsGroup');
        var items = itemGroup.get('children');
        each(items, function (item) {
            var i = item;
            var bbox = i.getBBox();
            if (maxItemWidth < bbox.width) {
                maxItemWidth = bbox.width;
            }
            if (maxItemHeight < bbox.height) {
                maxItemHeight = bbox.height;
            }
        });
        return { maxItemWidth: maxItemWidth, maxItemHeight: maxItemHeight };
    };
    CanvasLegend.prototype._mergeBBox = function (bboxes) {
        var minX = Infinity;
        var maxX = -Infinity;
        var minY = Infinity;
        var maxY = -Infinity;
        each(bboxes, function (bbox) {
            var box = bbox;
            minX = Math.min(box.minX, minX);
            maxX = Math.max(box.maxX, maxX);
            minY = Math.min(box.minY, minY);
            maxY = Math.max(box.maxY, maxY);
        });
        return new BBox(minX, minY, maxX - minX, maxY - minY);
    };
    return CanvasLegend;
}(CategoryBase));
export default CanvasLegend;
//# sourceMappingURL=canvas.js.map