/**
 * @description 使用 HTML 进行渲染的图例
 */
import { __assign, __extends } from "tslib";
import * as domUtil from '@antv/dom-util';
import { BBox } from '@antv/g';
import * as Util from '@antv/util';
import CategoryBase from './base';
var DEFAULT_THEME = {
    backgroundStyle: {
        position: 'absolute',
        overflow: 'auto',
        top: 0,
        left: 0,
    },
    titleStyle: {
        marginBottom: '4px',
    },
    listStyle: {
        listStyleType: 'none',
        margin: 0,
        padding: 0,
    },
    itemStyle: {
        cursor: 'pointer',
        marginBottom: '5px',
        marginRight: '16px',
        userSelect: 'none',
    },
    markerStyle: {
        width: '9px',
        height: '9px',
        borderRadius: '50%',
        display: 'inline-block',
        marginRight: '8px',
        verticalAlign: 'middle',
    },
    pagination: {
        activeColor: '#000',
        inactiveColor: '#ccc',
        arrowSize: 8,
        animation: true,
    },
};
function _findParentNode(node, className) {
    var nodeClass = node.className;
    if (Util.isNil(nodeClass)) {
        return node;
    }
    nodeClass = nodeClass.split(' ');
    if (nodeClass.indexOf(className) > -1) {
        return node;
    }
    if (node.parentNode) {
        if (node.parentNode.className === className) {
            return node.parentNode;
        }
        return _findParentNode(node.parentNode, className);
    }
    return null;
}
function _findNodeByClass(node, className) {
    return node.getElementsByClassName(className)[0];
}
var HTMLLegend = /** @class */ (function (_super) {
    __extends(HTMLLegend, _super);
    function HTMLLegend(cfg) {
        return _super.call(this, __assign({ type: 'html-legend', prefixClassName: 'g2-legend', pagination: true, highlight: false }, cfg)) || this;
    }
    HTMLLegend.prototype.init = function () {
        // 初始化 HTML dom
        var fontFamily = this.get('fontFamily');
        // const width = this.get('width');
        // const height = this.get('height');
        var layout = this.get('layout');
        var maxWidth = this.get('maxWidth');
        var maxHeight = this.get('maxHeight');
        var prefixClassName = this.get('prefixClassName');
        var containerTpl = this.get('containerTpl');
        if (!containerTpl) {
            containerTpl = "<div class=\"" + prefixClassName + "\">\n        <div class=\"" + prefixClassName + "-title\"></div>\n        <ul class=\"" + prefixClassName + "-list\"></ul>\n      </div>";
        }
        var legendContainer = domUtil.createDom(containerTpl);
        var backgroundStyle = Util.deepMix({}, DEFAULT_THEME.backgroundStyle, this.get('backgroundStyle'));
        domUtil.modifyCSS(legendContainer, __assign({ fontFamily: fontFamily, maxHeight: maxHeight + "px", 
            // width: 'auto',
            width: '100%', height: 'auto' }, backgroundStyle));
        if (layout === 'horizontal') {
            domUtil.modifyCSS(legendContainer, {
                maxWidth: maxWidth + "px",
            });
        }
        var container = this.get('container');
        if (!container) {
            // 没有传入挂载的 dom，则作为 canvas 的兄弟节点
            var canvas = this.get('canvas');
            var mountNode = canvas.get('el').parentNode;
            mountNode.appendChild(legendContainer);
        }
        else if (/^\#/.test(container)) {
            // 如果传入 dom 节点的 id
            var id = container.replace('#', '');
            container = document.getElementById(id);
            container.appendChild(legendContainer);
        }
        else {
            // 传入 dom 节点
            container.appendChild(legendContainer);
        }
        this.set('_legendContainer', legendContainer);
    };
    // 渲染标题
    HTMLLegend.prototype.renderTitle = function () {
        var title = this.get('title');
        if (title) {
            var prefixClassName = this.get('prefixClassName');
            var legendContainer = this.get('_legendContainer');
            var titleContainer = _findNodeByClass(legendContainer, prefixClassName + "-title");
            if (!titleContainer) {
                titleContainer = domUtil.createDom("<div class=\"" + prefixClassName + "-title\"></div>");
                legendContainer.appendChild(titleContainer);
            }
            titleContainer.innerHTML = title;
            var titleStyle = Util.deepMix({}, DEFAULT_THEME.titleStyle, this.get('titleStyle'));
            domUtil.modifyCSS(titleContainer, titleStyle);
            this.set('_titleContainer', titleContainer);
        }
    };
    // 渲染图例项
    HTMLLegend.prototype.renderItems = function () {
        var _this = this;
        var items = this.get('items');
        if (!items || !items.length) {
            return;
        }
        var legendContainer = this.get('_legendContainer');
        var layout = this.get('layout');
        var prefixClassName = this.get('prefixClassName');
        var reversed = this.get('reversed');
        if (reversed) {
            items.reverse();
        }
        var itemGroupContainer = _findNodeByClass(legendContainer, prefixClassName + "-list");
        if (!itemGroupContainer) {
            itemGroupContainer = domUtil.createDom("<ul class=\"" + prefixClassName + "-list\"></ul>");
        }
        var listStyle = Util.deepMix({}, DEFAULT_THEME.listStyle, this.get('listStyle'));
        if (layout === 'horizontal') {
            // 使 itemGroupContainer 内容不换行，计算分页时才能比较 scrollWidth 和 offsetWidth 的大小。
            // @todo ie是否会有兼容问题？
            listStyle.width = 'max-content';
        }
        domUtil.modifyCSS(itemGroupContainer, listStyle);
        // 用于支持分页逻辑
        var clipContainer = domUtil.createDom('<div></div>');
        legendContainer.appendChild(clipContainer);
        clipContainer.appendChild(itemGroupContainer);
        this.set('_clipContainer', clipContainer);
        this.set('_itemGroupContainer', itemGroupContainer);
        var itemTpl = this.get('itemTpl');
        if (!itemTpl) {
            itemTpl = "<li class=\"" + prefixClassName + "-item\">\n      <span class=\"" + prefixClassName + "-item-marker\"></span>\n      <span class=\"" + prefixClassName + "-item-text\"></span>\n      </li>";
        }
        var unSelectedColor = this.get('unSelectedColor');
        var itemStyle = Util.deepMix({}, DEFAULT_THEME.itemStyle, this.get('itemStyle')); // TODO: 重命名
        var markerStyle = Util.deepMix({}, DEFAULT_THEME.markerStyle, this.get('markerStyle'));
        if (layout === 'horizontal') {
            itemStyle.display = 'inline-block';
        }
        else if (layout === 'vertical') {
            itemStyle.display = 'block';
        }
        var itemMap = {};
        Util.each(items, function (item, index) {
            var checked = item.checked;
            var value = _this.formatterValue(item.value); // 按照 formatter 配置格式化文本
            var originColor = item.marker.fill || item.marker.stroke;
            var color = checked ? originColor : unSelectedColor;
            var itemDom;
            if (Util.isFunction(itemTpl)) {
                // 用户声明了回调
                var domStr = itemTpl(value, color, checked, index);
                itemDom = domUtil.createDom(domStr);
            }
            else {
                itemDom = domUtil.createDom(itemTpl);
                var textDom = _findNodeByClass(itemDom, prefixClassName + "-item-text");
                textDom.innerHTML = value;
            }
            itemStyle.color = color; // 设置为当前状态对应的文本颜色
            markerStyle.backgroundColor = color; // 设置为当前状态 marker 的背景色
            domUtil.modifyCSS(itemDom, itemStyle);
            itemDom.setAttribute('data-checked', checked); // 存储当前的选中状态
            itemDom.setAttribute('data-value', item.value); // 存储 item 的原始值
            itemDom.setAttribute('data-color', originColor); // 存储 item 的原始颜色
            var markerDom = _findNodeByClass(itemDom, prefixClassName + "-item-marker");
            if (markerDom) {
                domUtil.modifyCSS(markerDom, markerStyle);
            }
            itemGroupContainer.appendChild(itemDom);
            itemMap[item.value] = item; // 用于快速查找 dom 对应的 item 数据
        });
        this.set('_itemMap', itemMap);
        if (layout === 'horizontal') {
            this._renderHorizontalPagination();
        }
        else {
            this._renderPagination();
        }
    };
    HTMLLegend.prototype.bindEvents = function () {
        var _this = this;
        var itemGroupContainer = this.get('_itemGroupContainer');
        if (!itemGroupContainer) {
            return;
        }
        if (this.get('clickable')) {
            itemGroupContainer.onclick = function (ev) { return _this._onClick(ev); };
        }
        if (this.get('hoverable')) {
            itemGroupContainer.onmousemove = function (ev) { return _this._onMousemove(ev); };
            itemGroupContainer.onmouseout = function (ev) { return _this._onMouseout(ev); };
        }
    };
    /**
     * 获取图例的宽度
     */
    HTMLLegend.prototype.getWidth = function () {
        var container = this.get('_legendContainer');
        return domUtil.getOuterWidth(container);
    };
    /**
     * 获取图例的高度
     */
    HTMLLegend.prototype.getHeight = function () {
        var container = this.get('_legendContainer');
        return domUtil.getOuterHeight(container);
    };
    /**
     * 获取图例的BBox
     */
    HTMLLegend.prototype.getBBox = function () {
        return new BBox(this.get('x') || 0, this.get('y') || 0, this.getWidth(), this.getHeight());
    };
    /**
     * 将图例移动至 (x, y）坐标点位置
     * @param x x 坐标
     * @param y y 坐标
     */
    HTMLLegend.prototype.moveTo = function (x, y) {
        var container = this.get('_legendContainer');
        domUtil.modifyCSS(container, {
            left: x + "px",
            top: y + "px",
        });
        this.set('x', x);
        this.set('y', y);
    };
    /**
     * 销毁
     */
    HTMLLegend.prototype.destroy = function () {
        _super.prototype.destroy.call(this);
        var container = this.get('_legendContainer');
        if (container && container.parentNode) {
            container.parentNode.removeChild(container);
        }
    };
    HTMLLegend.prototype.draw = function () {
        // HTML Legend 不需要调用 canvas.draw();
        return null;
    };
    HTMLLegend.prototype._updateStatus = function (itemDom, markerDom, color, checked) {
        if (markerDom) {
            markerDom.style.background = color;
        }
        itemDom.style.color = color;
        itemDom.setAttribute('data-checked', checked);
    };
    HTMLLegend.prototype._onClick = function (ev) {
        var _this = this;
        var items = this.get('items');
        var itemGroupContainer = this.get('_itemGroupContainer');
        var prefixClassName = this.get('prefixClassName');
        var LIST_ITEM_CLASS = prefixClassName + "-item";
        var LIST_ITEM_MARKER_CLASS = prefixClassName + "-item-marker";
        var target = ev.target;
        var targetClassName = target.className.split(' ');
        if (Util.indexOf(targetClassName, prefixClassName + "-list") > -1) {
            // 用户点击到了 list 容器上
            return;
        }
        var clickedItemDom = _findParentNode(target, LIST_ITEM_CLASS);
        var markerDom = _findNodeByClass(clickedItemDom, LIST_ITEM_MARKER_CLASS);
        var itemMap = this.get('_itemMap');
        var clickedItem = itemMap[clickedItemDom.getAttribute('data-value')];
        // if (!clickedItem) {
        //   return;
        // }
        var originColor = clickedItemDom.getAttribute('data-color');
        var selectedMode = this.get('selectedMode');
        var unSelectedColor = this.get('unSelectedColor');
        var itemNodes = itemGroupContainer.childNodes;
        if (selectedMode === 'single') {
            // 单选模式
            clickedItem.checked = true; // 更新选中状态
            // 其他图例项全部置灰
            Util.each(itemNodes, function (child) {
                if (child !== clickedItemDom) {
                    // tslint:disable-next-line: no-shadowed-variable
                    var markerDom_1 = _findNodeByClass(child, LIST_ITEM_MARKER_CLASS);
                    _this._updateStatus(child, markerDom_1, unSelectedColor, 'false');
                    var childItem = itemMap[child.getAttribute('data-value')];
                    childItem.checked = false;
                }
                else {
                    _this._updateStatus(clickedItemDom, markerDom, originColor, 'true');
                }
            });
        }
        else {
            // 混合模式
            var isCurrentChecked = clickedItemDom.getAttribute('data-checked') === 'true';
            var count_1 = 0;
            Util.each(itemNodes, function (child) {
                if (child.getAttribute('data-checked') === 'true') {
                    count_1++;
                }
            });
            if (!this.get('allowAllCanceled') && isCurrentChecked && count_1 === 1) {
                return;
            }
            // 在判断最后一个图例后再更新checked状态，防止点击最后一个图例item时图例样式没有变化但是checked状态改变了 fix #422
            clickedItem.checked = !clickedItem.checked;
            if (isCurrentChecked) {
                this._updateStatus(clickedItemDom, markerDom, unSelectedColor, 'false');
            }
            else {
                this._updateStatus(clickedItemDom, markerDom, originColor, 'true');
            }
        }
        this.emit('itemclick', {
            item: clickedItem,
            currentTarget: clickedItemDom,
            checked: selectedMode === 'single' ? true : clickedItem.checked,
        });
    };
    HTMLLegend.prototype._onMousemove = function (ev) {
        var lastActiveItem = this.get('_lastActiveItem');
        var items = this.get('items');
        var itemMap = this.get('_itemMap');
        var prefixClassName = this.get('prefixClassName');
        var LIST_CLASS = prefixClassName + "-list";
        var LIST_ITEM_CLASS = prefixClassName + "-item";
        var target = ev.target;
        var targetClassName = target.className.split(' ');
        if (Util.indexOf(targetClassName, LIST_CLASS) > -1) {
            // 用户 move 到了 list 容器上
            return;
        }
        var hoveredItemDom = _findParentNode(target, LIST_ITEM_CLASS);
        var hoveredItem = itemMap[hoveredItemDom.getAttribute('data-value')];
        if (hoveredItem) {
            var highlight = this.get('highlight');
            if (hoveredItem.checked && lastActiveItem !== hoveredItem) {
                // 只有选中状态才应用样式
                hoveredItemDom.className += ' active';
                if (highlight) {
                    // 如果开启高亮效果
                    var itemGroupContainer = this.get('_itemGroupContainer');
                    var itemNodes = itemGroupContainer.childNodes;
                    itemNodes.forEach(function (itemNode) {
                        if (itemNode !== hoveredItemDom && itemNode.getAttribute('data-checked') === 'true') {
                            itemNode.className += ' inactive';
                        }
                    });
                }
                this.set('_lastActiveItem', hoveredItem);
            }
            this.emit('itemmouseover', {
                item: hoveredItem,
                currentTarget: hoveredItemDom,
                checked: hoveredItem.checked,
            });
        }
    };
    HTMLLegend.prototype._onMouseout = function (ev) {
        var itemGroupContainer = this.get('_itemGroupContainer');
        var itemNodes = itemGroupContainer.childNodes;
        itemNodes.forEach(function (node) {
            var className = node.className.split(' ');
            Util.remove(className, function (a) { return a === 'active' || a === 'inactive'; });
            node.className = className.join(' ');
        });
        this.set('_lastActiveItem', null);
        this.emit('itemmouseleave', ev);
    };
    HTMLLegend.prototype._renderPagination = function () {
        var pagination = this.get('pagination');
        var legendContainer = this.get('_legendContainer');
        var itemGroupContainer = this.get('_itemGroupContainer');
        var paginationDomStr = "\n      <div style=\"position: absolute;bottom: 0;left: 0;user-select: none;margin-top: 5px;\">\n        <div class=\"pre-page\"\n          style=\"display:inline-block;-webkit-transform: rotate(-135deg);transform: rotate(-135deg);margin-left: 2px;\">\n        </div>\n        <span class=\"current-page-number\">1</span> /  <span class=\"total-page-number\">0</span>\n        <div class=\"next-page\"\n          style=\"display:inline-block;-webkit-transform: rotate(45deg);transform: rotate(45deg);margin-right: 2px;\">\n        </div>\n      </div>\n    "; // 分页器结构模板，目前不允许自定义
        if (pagination && legendContainer.scrollHeight > legendContainer.offsetHeight) {
            // 满足分页条件
            domUtil.modifyCSS(legendContainer, {
                overflow: 'hidden',
                height: this.get('maxHeight') + "px",
            }); // 如果允许分页，则禁止滚动
            var paginationDom = domUtil.createDom(paginationDomStr);
            legendContainer.appendChild(paginationDom);
            var legendContainerHeight = this.getHeight(); // legend 容器的高度
            var titleHeight = this.get('_titleContainer') ? domUtil.getOuterHeight(this.get('_titleContainer')) : 0; // Legend 标题的高度
            var paginationHeight = domUtil.getOuterHeight(paginationDom); // 分页器的高度
            var itemGroupContainerHeight = legendContainerHeight - titleHeight - paginationHeight; // 获取图例项容器的可视高度
            var itemGroupContainerOffsetHeight = itemGroupContainer.offsetHeight; // 获取图例项实际的高度
            // 剪切区域的样式设置
            var clipContainer = this.get('_clipContainer');
            domUtil.modifyCSS(clipContainer, {
                maxHeight: itemGroupContainerHeight + "px",
                overflow: 'hidden',
            });
            var pageSize_1 = Math.ceil(itemGroupContainerOffsetHeight / itemGroupContainerHeight); // 计算页数
            var itemHeight = domUtil.getOuterHeight(itemGroupContainer.childNodes[0]); // 获取每个图例项的高度
            var onePageCount = Math.floor(itemGroupContainerHeight / itemHeight); // 计算一页可完整显示的图例项个数
            var deltaHeight_1 = onePageCount * itemHeight; // 每页滚动的高度
            var currentPageNum_1 = _findNodeByClass(paginationDom, 'current-page-number');
            var totalPageNum = _findNodeByClass(paginationDom, 'total-page-number');
            var prePageButton_1 = _findNodeByClass(paginationDom, 'pre-page');
            var nextPageButton_1 = _findNodeByClass(paginationDom, 'next-page');
            totalPageNum.innerHTML = pageSize_1;
            var paginationCfg = Util.deepMix({}, DEFAULT_THEME.pagination, pagination);
            var activeStyle_1 = {
                cursor: 'pointer',
                border: paginationCfg.activeColor + " solid",
                borderWidth: '2px 2px 0 0',
                width: paginationCfg.arrowSize + "px",
                height: paginationCfg.arrowSize + "px",
            };
            var inactiveStyle_1 = {
                cursor: 'default',
                border: paginationCfg.inactiveColor + " solid",
                borderWidth: '2px 2px 0 0',
                width: paginationCfg.arrowSize + "px",
                height: paginationCfg.arrowSize + "px",
            };
            domUtil.modifyCSS(prePageButton_1, inactiveStyle_1);
            domUtil.modifyCSS(nextPageButton_1, activeStyle_1);
            if (paginationCfg.animation) {
                // 允许分页的滚动动画
                domUtil.modifyCSS(itemGroupContainer, {
                    transition: 'transform .3s ease-in',
                });
            }
            var currentPage_1 = 1;
            var translateY_1 = 0;
            prePageButton_1.onclick = function () {
                if (currentPage_1 === 1) {
                    return;
                }
                currentPage_1 -= 1;
                translateY_1 += deltaHeight_1;
                currentPageNum_1.innerHTML = currentPage_1;
                domUtil.modifyCSS(prePageButton_1, activeStyle_1);
                domUtil.modifyCSS(nextPageButton_1, activeStyle_1);
                domUtil.modifyCSS(itemGroupContainer, {
                    transform: "translateY(" + translateY_1 + "px)",
                });
                if (currentPage_1 === 1) {
                    domUtil.modifyCSS(prePageButton_1, inactiveStyle_1);
                }
            };
            nextPageButton_1.onclick = function () {
                if (currentPage_1 === pageSize_1) {
                    return;
                }
                currentPage_1 += 1;
                translateY_1 -= deltaHeight_1;
                currentPageNum_1.innerHTML = currentPage_1;
                domUtil.modifyCSS(nextPageButton_1, activeStyle_1);
                domUtil.modifyCSS(prePageButton_1, activeStyle_1);
                domUtil.modifyCSS(itemGroupContainer, {
                    transform: "translateY(" + translateY_1 + "px)",
                });
                if (currentPage_1 === pageSize_1) {
                    domUtil.modifyCSS(nextPageButton_1, inactiveStyle_1);
                }
            };
        }
    };
    HTMLLegend.prototype._renderHorizontalPagination = function () {
        var pagination = this.get('pagination');
        var legendContainer = this.get('_legendContainer');
        var itemGroupContainer = this.get('_itemGroupContainer');
        var paginationDomStr = "\n      <div style=\"position: absolute;bottom: 4px;right: 12px;user-select: none;margin-top: 5px;background: #fff;\">\n        <div class=\"pre-page\"\n          style=\"display:inline-block;-webkit-transform: rotate(-135deg);transform: rotate(-135deg);margin-left: 2px;\">\n        </div>\n        <span class=\"current-page-number\">1</span> /  <span class=\"total-page-number\">0</span>\n        <div class=\"next-page\"\n          style=\"display:inline-block;-webkit-transform: rotate(45deg);transform: rotate(45deg);margin-right: 2px;\">\n        </div>\n      </div>\n    "; // 分页器结构模板，目前不允许自定义
        if (pagination && legendContainer.scrollWidth > legendContainer.offsetWidth) {
            // 满足分页条件
            domUtil.modifyCSS(legendContainer, {
                overflow: 'hidden',
                width: this.get('maxWidth') + "px",
            }); // 如果允许分页，则禁止滚动
            var paginationDom = domUtil.createDom(paginationDomStr);
            legendContainer.appendChild(paginationDom);
            var legendContainerWidth = this.getWidth(); // legend 容器的宽度
            // const titleHeight = this.get('_titleContainer') ?
            // Util.getOuterHeight(this.get('_titleContainer')) : 0;  // Legend 标题的高度
            var paginationWidth = domUtil.getOuterWidth(paginationDom); // 分页器的宽度
            var itemGroupContainerWidth = legendContainerWidth - paginationWidth - 40; // 获取图例项容器的可视宽度
            var itemGroupContainerOffsetWidth = itemGroupContainer.offsetWidth; // 获取图例项实际的宽度
            // 剪切区域的样式设置
            var clipContainer = this.get('_clipContainer');
            domUtil.modifyCSS(clipContainer, {
                maxWidth: itemGroupContainerWidth + "px",
                overflow: 'hidden',
            });
            var pageSize_2 = Math.ceil(itemGroupContainerOffsetWidth / itemGroupContainerWidth); // 计算页数
            var itemWidth = domUtil.getOuterWidth(itemGroupContainer.childNodes[0]); // 获取每个图例项的宽度
            // const onePageCount = Math.floor(itemGroupContainerWidth / itemWidth); // 计算一页可完整显示的图例项个数
            var deltaWidth_1 = itemGroupContainerWidth; // 每页滚动的宽度
            var currentPageNum_2 = _findNodeByClass(paginationDom, 'current-page-number');
            var totalPageNum = _findNodeByClass(paginationDom, 'total-page-number');
            var prePageButton_2 = _findNodeByClass(paginationDom, 'pre-page');
            var nextPageButton_2 = _findNodeByClass(paginationDom, 'next-page');
            totalPageNum.innerHTML = pageSize_2;
            var paginationCfg = Util.deepMix({}, DEFAULT_THEME.pagination, pagination);
            var activeStyle_2 = {
                cursor: 'pointer',
                border: paginationCfg.activeColor + " solid",
                borderWidth: '2px 2px 0 0',
                width: paginationCfg.arrowSize + "px",
                height: paginationCfg.arrowSize + "px",
            };
            var inactiveStyle_2 = {
                cursor: 'default',
                border: paginationCfg.inactiveColor + " solid",
                borderWidth: '2px 2px 0 0',
                width: paginationCfg.arrowSize + "px",
                height: paginationCfg.arrowSize + "px",
            };
            domUtil.modifyCSS(prePageButton_2, inactiveStyle_2);
            domUtil.modifyCSS(nextPageButton_2, activeStyle_2);
            if (paginationCfg.animation) {
                // 允许分页的滚动动画
                domUtil.modifyCSS(itemGroupContainer, {
                    transition: 'transform .3s ease-in',
                });
            }
            var currentPage_2 = 1;
            var translateX_1 = 0;
            prePageButton_2.onclick = function () {
                if (currentPage_2 === 1) {
                    return;
                }
                currentPage_2 -= 1;
                translateX_1 += deltaWidth_1;
                currentPageNum_2.innerHTML = currentPage_2;
                domUtil.modifyCSS(prePageButton_2, activeStyle_2);
                domUtil.modifyCSS(nextPageButton_2, activeStyle_2);
                domUtil.modifyCSS(itemGroupContainer, {
                    transform: "translateX(" + translateX_1 + "px)",
                });
                if (currentPage_2 === 1) {
                    domUtil.modifyCSS(prePageButton_2, inactiveStyle_2);
                }
            };
            nextPageButton_2.onclick = function () {
                if (currentPage_2 === pageSize_2) {
                    return;
                }
                currentPage_2 += 1;
                translateX_1 -= deltaWidth_1;
                currentPageNum_2.innerHTML = currentPage_2;
                domUtil.modifyCSS(nextPageButton_2, activeStyle_2);
                domUtil.modifyCSS(prePageButton_2, activeStyle_2);
                domUtil.modifyCSS(itemGroupContainer, {
                    transform: "translateX(" + translateX_1 + "px)",
                });
                if (currentPage_2 === pageSize_2) {
                    domUtil.modifyCSS(nextPageButton_2, inactiveStyle_2);
                }
            };
        }
    };
    return HTMLLegend;
}(CategoryBase));
export default HTMLLegend;
//# sourceMappingURL=html.js.map