import Greedy from './util/greedy';
var MAX_TIMES = 100;
function spiralFill(label, greedy, maxTimes) {
    if (maxTimes === void 0) { maxTimes = MAX_TIMES; }
    var dt = -1;
    var x = label.attr('x');
    var y = label.attr('y');
    var bbox = label.getBBox();
    var maxDelta = Math.sqrt(bbox.width * bbox.width + bbox.height * bbox.height);
    var dxdy;
    var t = -dt;
    var dx = 0;
    var dy = 0;
    var f = function (t) {
        var nt = t * 0.1;
        return [nt * Math.cos(nt), nt * Math.sin(nt)];
    };
    if (greedy.hasGap(bbox)) {
        greedy.fillGap(bbox);
        return true;
    }
    var canFill = false;
    var times = 0;
    var accessedCache = {};
    while (Math.min(Math.abs(dx), Math.abs(dy)) < maxDelta && times < maxTimes) {
        dxdy = f(t += dt);
        dx = ~~dxdy[0];
        dy = ~~dxdy[1];
        if ((!dx && !dy) || accessedCache[dx + "-" + dy]) {
            continue;
        }
        label.attr({ x: x + dx, y: y + dy });
        if (dx + dy < 0) {
            label.attr('textAlign', 'right');
        }
        times++;
        if (greedy.hasGap(label.getBBox())) {
            greedy.fillGap(label.getBBox());
            canFill = true;
            accessedCache[dx + "-" + dy] = true;
            break;
        }
    }
    return canFill;
}
export default function (labels, maxTimes) {
    if (maxTimes === void 0) { maxTimes = MAX_TIMES; }
    var label;
    var greedy = new Greedy();
    var toBeRemoved = [];
    for (var i = 0; i < labels.length; i++) {
        label = labels[i];
        if (!spiralFill(label, greedy, maxTimes)) {
            toBeRemoved.push(label);
        }
    }
    for (var i = 0; i < toBeRemoved.length; i++) {
        toBeRemoved[i].remove();
    }
}
//# sourceMappingURL=spiral.js.map