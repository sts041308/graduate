import { Coordinate } from '@antv/coord';
import { Element, Group } from '@antv/g';
import { Scale } from '@antv/scale';
import Guide from '../base';
import { GuideCfg } from '../interface';
declare type PositionCallback = (xScales: Scale[] | Record<string, Scale>, yScales: Scale[] | Record<string, Scale>) => [number, number];
export declare type Position = [number | string, number | string] | Record<string, number | string> | PositionCallback;
export interface Point {
    x: number;
    y: number;
}
export declare type SvgAttrs = Partial<{
    path: any;
    textAlign: string;
    lineWidth: number;
    text: string;
    textBaseline: 'top' | 'bottom';
    [key: string]: any;
}>;
export interface AnnotationCfg extends GuideCfg {
    readonly type: string;
    xScales: Scale[] | Record<string, Scale>;
    yScales: Scale[] | Record<string, Scale>;
    el: HTMLElement | Element;
    appendInfo: any;
    start: Position;
    end: Position;
    style: SvgAttrs | Record<string, SvgAttrs>;
}
export default abstract class Annotation<T extends AnnotationCfg = AnnotationCfg> extends Guide<T> {
    constructor(cfg: T);
    abstract render(coord: Coordinate, group: Group, data?: Point[]): void;
    clear(): void;
    changeVisible(visible: boolean): void;
    /** 批量修改内部状态 */
    change(cfg: Partial<T>): void;
    get<K extends keyof T>(name: K): T[K];
    set<K extends keyof T>(name: K, value: T[K]): this;
    protected parsePoint(coord: Coordinate, _position: Position): Point;
    private getNormalizedValue;
    private parsePercentPoint;
}
export {};
