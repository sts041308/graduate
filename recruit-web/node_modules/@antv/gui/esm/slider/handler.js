import { __assign, __extends } from "tslib";
import { Group } from '@antv/g';
import * as _ from '@antv/util';
var DEFAULT_STYLE = {
    fill: '#F7F7F7',
    stroke: '#BFBFBF',
    radius: 2,
    opacity: 1,
    cursor: 'ew-resize',
    // 高亮的颜色
    highLightFill: '#FFF',
};
var Handler = /** @class */ (function (_super) {
    __extends(Handler, _super);
    function Handler(cfg) {
        var _this = _super.call(this) || this;
        var _a = cfg.x, x = _a === void 0 ? 0 : _a, _b = cfg.y, y = _b === void 0 ? 0 : _b, _c = cfg.width, width = _c === void 0 ? 10 : _c, _d = cfg.height, height = _d === void 0 ? 24 : _d, _e = cfg.style, style = _e === void 0 ? {} : _e;
        _this.x = x;
        _this.y = y;
        _this.width = width;
        _this.height = height;
        _this.style = __assign(__assign({}, DEFAULT_STYLE), style);
        _this._initial();
        return _this;
    }
    /**
     * 设置位置 x
     * @param x
     */
    Handler.prototype.setX = function (x) {
        this.setXY(x, undefined);
    };
    /**
     * 设置位置 y
     * @param y
     */
    Handler.prototype.setY = function (y) {
        this.setXY(undefined, y);
    };
    Handler.prototype.setXY = function (x, y) {
        if (_.isNumber(x)) {
            this.x = x;
        }
        if (_.isNumber(y)) {
            this.y = y;
        }
        this._updateXY();
    };
    /**
     * 初始化组件
     * @private
     */
    Handler.prototype._initial = function () {
        var _a = this, width = _a.width, height = _a.height, style = _a.style;
        var fill = style.fill, stroke = style.stroke, radius = style.radius, opacity = style.opacity, cursor = style.cursor;
        // 按钮框框
        this.background = this.addShape('rect', {
            attrs: {
                x: 0,
                y: 0,
                width: width,
                height: height,
                fill: fill,
                stroke: stroke,
                radius: radius,
                opacity: opacity,
                cursor: cursor,
            },
        });
        // 两根竖线
        var x1 = 1 / 3 * width;
        var x2 = 2 / 3 * width;
        var y1 = 1 / 4 * height;
        var y2 = 3 / 4 * height;
        this.addShape('line', {
            attrs: {
                x1: x1,
                y1: y1,
                x2: x1,
                y2: y2,
                stroke: stroke,
                cursor: cursor,
            },
        });
        this.addShape('line', {
            attrs: {
                x1: x2,
                y1: y1,
                x2: x2,
                y2: y2,
                stroke: stroke,
                cursor: cursor,
            },
        });
        // 移动到对应的位置
        this._updateXY();
        this._bindEvents();
    };
    Handler.prototype._bindEvents = function () {
        var _this = this;
        this.on('mouseenter', function () {
            var highLightFill = _this.style.highLightFill;
            _this.background.attr('fill', highLightFill);
            _this._getCanvas().draw();
        });
        this.on('mouseleave', function () {
            var fill = _this.style.fill;
            _this.background.attr('fill', fill);
            _this._getCanvas().draw();
        });
    };
    Handler.prototype._updateXY = function () {
        this.move(this.x, this.y);
    };
    /**
     * 因为 get('canvas') 因为构建顺序问题，导致不存在，所以采用这种方式拿到 canvas
     * @private
     */
    Handler.prototype._getCanvas = function () {
        var t = this;
        while (t.get('parent')) {
            t = t.get('parent');
        }
        // 最顶层的 parent 就是 canvas 实例
        return t;
    };
    return Handler;
}(Group));
export default Handler;
//# sourceMappingURL=handler.js.map