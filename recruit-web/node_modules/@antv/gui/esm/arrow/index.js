import { __assign, __extends } from "tslib";
import { Group, Path } from '@antv/g';
var DIR_MAPPER = {
    right: (90 * Math.PI) / 180,
    left: ((360 - 90) * Math.PI) / 180,
    up: 0,
    down: (180 * Math.PI) / 180,
};
var Arrow = /** @class */ (function (_super) {
    __extends(Arrow, _super);
    function Arrow(cfg) {
        var _this = _super.call(this) || this;
        // 解构，追加默认值
        var _a = cfg.position, position = _a === void 0 ? { x: 0, y: 0 } : _a, _b = cfg.width, width = _b === void 0 ? 10 : _b, _c = cfg.height, height = _c === void 0 ? 10 : _c, _d = cfg.direction, direction = _d === void 0 ? 'right' : _d, _e = cfg.shapeAttrs, shapeAttrs = _e === void 0 ? {} : _e;
        _this.position = position;
        _this.width = width;
        _this.height = height;
        _this.direction = direction;
        _this.shapeAttrs = shapeAttrs;
        _this._init();
        return _this;
    }
    Arrow.prototype._init = function () {
        var _this = this;
        var centerX = this.width / 2;
        var centerY = this.height / 2;
        var points = [
            { x: 0, y: -centerY },
            { x: -centerX, y: centerY },
            { x: centerX, y: centerY },
        ];
        var shape = new Path({
            attrs: __assign({ path: [
                    ['M', points[0].x, points[0].y],
                    ['L', points[1].x, points[1].y],
                    ['L', points[2].x, points[2].y],
                    ['Z'],
                ] }, this.shapeAttrs),
        });
        this.add(shape);
        // rotate
        this.rotate(DIR_MAPPER[this.direction]);
        // move to
        this.move(this.position.x, this.position.y);
        shape.on('click', function (e) {
            e.stopPropagation();
            _this.emit('click', e);
        });
    };
    return Arrow;
}(Group));
export default Arrow;
//# sourceMappingURL=index.js.map