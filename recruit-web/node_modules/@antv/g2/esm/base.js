import { __assign, __extends } from "tslib";
/**
 * @description 基础基类
 */
import EventEmitter from '@antv/event-emitter';
var Base = /** @class */ (function (_super) {
    __extends(Base, _super);
    function Base(cfg) {
        var _this = _super.call(this) || this;
        _this.cfg = {};
        _this.destroyed = false;
        _this.cfg = __assign({ visible: true }, cfg);
        return _this;
    }
    Base.prototype.get = function (name) {
        return this.cfg[name];
    };
    Base.prototype.set = function (name, value) {
        this.cfg[name] = value;
        return this;
    };
    Base.prototype.show = function () {
        var visible = this.get('visible');
        if (!visible) {
            this.set('visible', true);
            this.changeVisible(true);
        }
    };
    Base.prototype.hide = function () {
        var visible = this.get('visible');
        if (visible) {
            this.set('visible', false);
            this.changeVisible(false);
        }
    };
    Base.prototype.destroy = function () {
        this.cfg = {};
        this.off(); // 接触所有的事件绑定
        this.destroyed = true;
    };
    return Base;
}(EventEmitter));
export default Base;
//# sourceMappingURL=base.js.map