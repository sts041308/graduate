import { __assign, __extends } from "tslib";
import * as _ from '@antv/util';
import { FIELD_ORIGIN } from './base';
import Point from './point';
import TextShapeFactory from './shape/text';
import { parseFields } from './util/parse-fields';
/**
 * Text 类型的几何图形
 */
var Text = /** @class */ (function (_super) {
    __extends(Text, _super);
    function Text(cfg) {
        var _this = _super.call(this, __assign({ type: 'text', shapeType: 'text' }, cfg)) || this;
        // 每一个 Element 对应一个确定的 shapeFactory
        _this.set('shapeFactory', TextShapeFactory);
        return _this;
    }
    Text.prototype.content = function (field, callback) {
        if (_.isObject(field)) {
            this.set('contentOptions', field);
        }
        else {
            var fields = parseFields(field);
            this.set('contentOptions', {
                fields: fields,
                callback: callback,
            });
        }
        return this;
    };
    // 获取 content 配置
    Text.prototype._getContent = function (contentOptions, origin) {
        var fields = contentOptions.fields || [];
        var callback = contentOptions.callback;
        if (callback) { // content({ fields: [ 'a', 'b' ], callback(a, b) {} })
            var params = fields.map(function (field) {
                return origin[field];
            });
            return callback.apply(void 0, params);
        }
        return origin[fields[0]]; // content({ fields: [ 'a' ] })
    };
    /**
     * @override
     * @desc 添加content内容,复写cfg.text
     */
    Text.prototype.getDrawCfg = function (obj) {
        var cfg = _super.prototype.getDrawCfg.call(this, obj);
        var contentOptions = this.get('contentOptions');
        if (contentOptions) {
            cfg.text = this._getContent(contentOptions, obj[FIELD_ORIGIN]);
        }
        return cfg;
    };
    return Text;
}(Point));
export default Text;
//# sourceMappingURL=text.js.map