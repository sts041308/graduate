import { __assign } from "tslib";
/**
 * Point shape factory
 */
import { Marker } from '@antv/g';
import * as _ from '@antv/util';
import * as pathUtil from '@antv/path-util';
import { registerShape, registerShapeFactory } from './base';
import { splitPoints, setStrokeStyle, setFillStyle } from '../util/shape';
import { PointSymbols } from '../util/symbol';
_.each(PointSymbols, function (func, symbol) {
    // point 中需要用到这么些 Marker.symbol
    // 使用 Marker 提供的静态方法注册进去
    Marker.symbolsFactory.register(symbol, func);
});
var SHAPES = ['circle', 'square', 'bowtie', 'diamond', 'hexagon', 'triangle', 'triangleDown'];
var HOLLOW_SHAPES = ['cross', 'tick', 'plus', 'hyphen', 'line'];
function getFillAttrs(cfg) {
    var pointAttrs = cfg.style;
    setFillStyle(pointAttrs, cfg);
    if (_.isNumber(cfg.size)) {
        pointAttrs.radius = cfg.size;
    }
    return pointAttrs;
}
function getLineAttrs(cfg) {
    var pointAttrs = cfg.style;
    setStrokeStyle(pointAttrs, cfg);
    if (_.isNumber(cfg.size)) {
        pointAttrs.radius = cfg.size;
    }
    return pointAttrs;
}
function getRectPath(cfg) {
    var x = cfg.points[0].x;
    var y = cfg.points[0].y;
    var w = cfg.size[0];
    var h = cfg.size[1];
    var path = [
        ['M', x - 0.5 * w, y - 0.5 * h],
        ['L', x + 0.5 * w, y - 0.5 * h],
        ['L', x + 0.5 * w, y + 0.5 * h],
        ['L', x - 0.5 * w, y + 0.5 * h],
        ['z'],
    ];
    return path;
}
var PointShapeFactory = registerShapeFactory('point', {
    defaultShapeType: 'hollowCircle',
    getDefaultPoints: function (pointInfo) {
        return splitPoints(pointInfo);
    },
});
// 用于桑基图的节点
registerShape('point', 'rect', {
    draw: function (cfg, container) {
        var rectAttrs = getFillAttrs(cfg);
        var path = getRectPath(cfg);
        path = this.parsePath(path);
        var gShape = container.addShape('path', {
            attrs: _.mix(rectAttrs, {
                path: path,
            }),
        });
        return gShape;
    },
    getMarkerStyle: function (markerCfg) {
        var markerStyle = {
            symbol: 'rect',
            radius: 4.5,
        };
        setFillStyle(markerStyle, markerCfg);
        return markerStyle;
    },
});
// 所有的 SHAPES 都注册一下
_.each(SHAPES, function (shape) {
    registerShape('point', shape, {
        draw: function (cfg, container) {
            var attrs = getFillAttrs(cfg);
            return container.addShape('Marker', {
                attrs: __assign(__assign({}, attrs), { symbol: shape, x: cfg.x, y: cfg.y }),
            });
        },
        getMarkerStyle: function (markerCfg) {
            var markerStyle = {
                symbol: shape,
                radius: 4.5,
            };
            setFillStyle(markerStyle, markerCfg);
            return markerStyle;
        },
    });
    // 添加该 shape 对应的 hollow-shape
    registerShape('point', "hollow" + _.upperFirst(shape), {
        draw: function (cfg, container) {
            var attrs = getLineAttrs(cfg);
            return container.addShape('Marker', {
                attrs: __assign(__assign({}, attrs), { symbol: shape, x: cfg.x, y: cfg.y }),
            });
        },
        getMarkerStyle: function (markerCfg) {
            var markerStyle = {
                symbol: shape,
                radius: 4.5,
            };
            setStrokeStyle(markerStyle, markerCfg);
            return markerStyle;
        },
    });
});
// 添加 hollowShapes
_.each(HOLLOW_SHAPES, function (shape) {
    registerShape('point', shape, {
        draw: function (cfg, container) {
            var attrs = getLineAttrs(cfg);
            return container.addShape('Marker', {
                attrs: __assign(__assign({}, attrs), { symbol: shape, x: cfg.x, y: cfg.y }),
            });
        },
        getMarkerStyle: function (markerCfg) {
            var markerStyle = {
                symbol: shape,
                radius: 4.5,
            };
            setStrokeStyle(markerStyle, markerCfg);
            return markerStyle;
        },
    });
});
// image
registerShape('point', 'image', {
    draw: function (cfg, container) {
        cfg.points = this.parsePoints(cfg.points);
        return container.addShape('image', {
            attrs: {
                x: cfg.points[0].x - (cfg.size / 2),
                y: cfg.points[0].y - cfg.size,
                width: cfg.size,
                height: cfg.size,
                img: cfg.shape[1],
            },
        });
    },
    getMarkerStyle: function (markerCfg) {
        var markerStyle = {
            symbol: 'circle',
            radius: 4.5,
        };
        setFillStyle(markerStyle, markerCfg);
        return markerStyle;
    },
});
// path 解析，缓存一下
var pathMetaParser = _.memoize(function (path) {
    var segments = pathUtil.parsePathString(path);
    var nums = _.flatten(segments).filter(function (num) { return _.isNumber(num); });
    return {
        range: Math.max.apply(null, nums) - Math.min.apply(null, nums),
        segments: segments,
    };
});
// path
registerShape('point', 'path', {
    draw: function (cfg, container) {
        var attrs = _.mix({}, getLineAttrs(cfg), getFillAttrs(cfg));
        var path = cfg.shape[1];
        var size = cfg.size || 10;
        var pathMeta = pathMetaParser(path);
        var scale = size / pathMeta.range;
        var transform = [];
        if (attrs.rotate) {
            transform.push(['r', attrs.rotate / 180 * Math.PI]);
            delete attrs.rotate;
        }
        var shape = container.addShape('path', {
            attrs: __assign(__assign({}, attrs), { path: pathMeta.segments }),
        });
        transform.push(['s', scale, scale], ['t', cfg.x, cfg.y]);
        shape.transform(transform);
        return shape;
    },
    getMarkerStyle: function (markerCfg) {
        var markerStyle = {
            symbol: 'circle',
            radius: 4.5,
        };
        setFillStyle(markerStyle, markerCfg);
        return markerStyle;
    },
});
export default PointShapeFactory;
//# sourceMappingURL=point.js.map