import * as _ from '@antv/util';
import ElementLabels from './components/base';
import IntervalElementLabels from './components/interval';
import PieElementLabels from './components/pie';
import PolarElementLabels from './components/polar';
import { getElementLabels, registerElementLabels } from './components/factory';
export { getElementLabels, registerElementLabels, ElementLabels, };
var LabelController = /** @class */ (function () {
    function LabelController(element) {
        this.element = null;
        this.labelsContainer = null;
        this.element = element;
    }
    LabelController.prototype._createLabelsContainer = function () {
        var element = this.element;
        var elementType = element.get('type');
        var coord = element.get('coord');
        var labelOptions = element.get('labelOptions');
        var Ctor = this._getElementLabelsConstructor(labelOptions.labelType, coord.type, elementType);
        var container = element.get('frontgroundGroup');
        var scales = _.map(element.get('labelOptions').fields, function (field) { return element.createScale(field); });
        var labelsContainer = container.addGroup(Ctor, {
            labelOptions: _.mix({
                scales: scales,
            }, labelOptions),
            coord: coord,
            element: element,
            elementType: elementType,
            theme: element.get('theme'),
            visible: element.get('visible'),
        });
        this.labelsContainer = labelsContainer;
    };
    LabelController.prototype.addLabels = function (points, shapes) {
        this._createLabelsContainer();
        this.labelsContainer.showLabels(points, shapes);
        var labelsGroup = this.labelsContainer.get('labelsGroup');
        return labelsGroup.get('children'); // 返回创建的 labels
    };
    LabelController.prototype.changeVisible = function (visible) {
        this.labelsContainer && this.labelsContainer.set('visible', visible);
    };
    LabelController.prototype.clear = function () {
        var labelsContainer = this.labelsContainer;
        labelsContainer && !labelsContainer.destroyed && labelsContainer.remove();
    };
    LabelController.prototype._getElementLabelsConstructor = function (labelType, coordType, elementType) {
        var type = labelType || 'base';
        if (coordType === 'polar' && type === 'base') {
            type = 'polar';
        }
        else if (coordType === 'theta' && type === 'base') { // pie chart
            type = 'pie';
        }
        else if ((elementType === 'interval' || elementType === 'polygon') && type === 'base') { // bar
            type = 'interval';
        }
        return getElementLabels(type);
    };
    return LabelController;
}());
export default LabelController;
registerElementLabels('base', ElementLabels);
registerElementLabels('interval', IntervalElementLabels);
registerElementLabels('pie', PieElementLabels);
registerElementLabels('polar', PolarElementLabels);
//# sourceMappingURL=index.js.map