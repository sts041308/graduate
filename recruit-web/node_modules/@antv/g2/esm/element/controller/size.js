/**
 * @description 计算 element shape 的 size 辅助类
 */
import * as _ from '@antv/util';
// 已经排序后的数据查找距离最小的
function findMinDistance(arr, scale) {
    var count = arr.length;
    var sourceArr = arr;
    // 日期类型的 values 经常上文本类型，所以需要转换一下
    if (_.isString(sourceArr[0])) {
        sourceArr = arr.map(function (v) {
            return scale.translate(v);
        });
    }
    var distance = sourceArr[1] - sourceArr[0];
    for (var i = 2; i < count; i++) {
        var tmp = sourceArr[i] - sourceArr[i - 1];
        if (distance > tmp) {
            distance = tmp;
        }
    }
    return distance;
}
var SizeController = /** @class */ (function () {
    function SizeController(element) {
        this.element = null;
        this.element = element;
    }
    /**
     * 获取数据对应的实际画布大小
     * @param record 图形数据
     */
    SizeController.prototype.getSize = function (record) {
        var size = this._getSizeValue(record);
        if (_.isUndefined(size)) {
            var defaultSize = this._getDefaultSize();
            return this._toCoordinateSize(defaultSize);
        }
        return size;
    };
    /**
     * 获取数据对应归一化后的 size 值
     * @param record 图形数据
     */
    SizeController.prototype.getNormalizedSize = function (record) {
        var size = this._getSizeValue(record);
        if (_.isUndefined(size)) {
            return this._getDefaultSize();
        }
        return this._toNormalizedSize(size);
    };
    SizeController.prototype.clear = function () {
        this._defaultSize = null;
    };
    // 根据 size 图形属性对应获取数据映射后的 size 值
    SizeController.prototype._getSizeValue = function (record) {
        var result;
        var element = this.element;
        var sizeAttr = element.getAttr('size');
        if (sizeAttr) {
            result = element.getAttrValues(sizeAttr, record)[0];
        }
        return result;
    };
    SizeController.prototype._getDodgeCount = function (dataArray) {
        var element = this.element;
        var adjusts = element.get('adjustOptions');
        var dodgeBy;
        _.each(adjusts, function (adjust) {
            if (adjust.type === 'dodge') {
                dodgeBy = adjust.dodgeBy;
                return false;
            }
        });
        if (dodgeBy) {
            var mergeData = _.flatten(dataArray);
            var values = _.valuesOfKey(mergeData, dodgeBy);
            return values.length;
        }
        return dataArray.length;
    };
    // 计算默认大小
    SizeController.prototype._getDefaultSize = function () {
        var widthRatio = this.element.get('widthRatio');
        var defaultSize = this._defaultSize;
        if (!defaultSize) {
            var element = this.element;
            var coord = element.get('coord');
            var xScale = element.getXScale();
            var xValues = xScale.values;
            var dataArray = element.get('dataArray');
            var count = xValues.length;
            if (xScale.isLinear && xValues.length > 1) {
                // Linear 类型用户有可能设置了 min, max 范围所以需要根据数据最小区间计算 count
                xValues.sort();
                var interval = findMinDistance(xValues, xScale);
                count = (xScale.max - xScale.min) / interval;
                if (xValues.length > count) {
                    count = xValues.length;
                }
            }
            var range = xScale.range;
            var normalizedSize = 1 / count;
            var wr = 1;
            if (element.isInCircle()) {
                if (coord.isTransposed && count > 1) { // 极坐标下多层环图
                    wr = widthRatio.multiplePie;
                }
                else {
                    wr = widthRatio.rose;
                }
                /* if (dataArray.length > 1) {
                  normalizedSize *= (range[1] - range[0]);
                } */
            }
            else {
                if (xScale.isLinear) {
                    normalizedSize *= (range[1] - range[0]);
                }
                wr = widthRatio.column; // 柱状图要除以2
            }
            normalizedSize *= wr;
            if (element.hasAdjust('dodge')) {
                var dodgeCount = this._getDodgeCount(dataArray);
                normalizedSize = normalizedSize / dodgeCount;
            }
            this._defaultSize = normalizedSize;
            return normalizedSize;
        }
        return defaultSize;
    };
    // 获取坐标系 x 轴的长度
    SizeController.prototype._getCoordinateWidth = function () {
        var element = this.element;
        var coord = element.get('coord');
        if (element.isInCircle() && !coord.isTransposed) { // 极坐标下 width 为弧长
            return (coord.endAngle - coord.startAngle) * coord.getRadius();
        }
        var start = coord.convertPoint({
            x: 0,
            y: 0,
        });
        var end = coord.convertPoint({
            x: 1,
            y: 0,
        });
        var width = 0;
        if (start && end) {
            width = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
        }
        return width;
    };
    // 将归一化的数值转换成实际像素大小
    SizeController.prototype._toCoordinateSize = function (normalizedSize) {
        var coordinateWidth = this._getCoordinateWidth();
        return normalizedSize * coordinateWidth;
    };
    // 将实际像素大小进行归一化处理
    SizeController.prototype._toNormalizedSize = function (size) {
        var coordinateWidth = this._getCoordinateWidth();
        return size / coordinateWidth;
    };
    return SizeController;
}());
export default SizeController;
//# sourceMappingURL=size.js.map