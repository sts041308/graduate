import { __assign, __extends } from "tslib";
import * as _ from '@antv/util';
import { Facet } from './base';
/**
 * TODO 暂时欠缺 title、axis 的渲染逻辑
 */
var Rect = /** @class */ (function (_super) {
    __extends(Rect, _super);
    function Rect(view, cfg) {
        return _super.call(this, view, __assign({ 
            /**
             * 是否默认显示每个分面的title
             */
            showTitle: true, 
            /**
             * 是否自动修改坐标轴的信息
             */
            autoSetAxis: true, 
            /**
             * View 的内边框
             */
            padding: 16 }, cfg)) || this;
    }
    Rect.prototype.generateFacets = function (data) {
        var _this = this;
        var fields = this.cfg.fields;
        var columnField = fields[0], rowField = fields[1];
        var rst = [];
        var columnValuesLength = 0;
        var rowValuesLength = 0;
        var columnValues = [];
        var rowValues = [];
        if (columnField) {
            columnValues = this.getFieldValues(data, columnField);
            columnValuesLength = columnValues.length;
        }
        if (rowField) {
            rowValues = this.getFieldValues(data, rowField);
            rowValuesLength = rowValues.length;
        }
        // 获取每个维度对应的frame
        columnValues.forEach(function (xVal, xIndex) {
            rowValues.forEach(function (yVal, yIndex) {
                var conditions = [
                    { field: columnField, value: xVal, values: columnValues },
                    { field: rowField, value: yVal, values: rowValues },
                ];
                var facetData = _.filter(data, function (data) {
                    // 过滤出全部满足条件的数据
                    return _.every(conditions, function (condition) {
                        var field = condition.field, value = condition.value;
                        return data[field] === value;
                    });
                });
                var facet = {
                    type: _this.cfg.type,
                    columnValue: xVal,
                    rowValue: yVal,
                    columnField: columnField,
                    rowField: rowField,
                    columnIndex: xIndex,
                    rowIndex: yIndex,
                    columnValuesLength: columnValuesLength,
                    rowValuesLength: rowValuesLength,
                    data: facetData,
                    region: _this.getRegion(rowValuesLength, columnValuesLength, xIndex, yIndex),
                };
                rst.push(facet);
            });
        });
        return rst;
    };
    Rect.prototype.renderAxis = function () {
        // todo
    };
    Rect.prototype.renderTitle = function () {
        // todo
    };
    return Rect;
}(Facet));
export { Rect };
//# sourceMappingURL=rect.js.map