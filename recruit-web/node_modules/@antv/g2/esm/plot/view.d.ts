import Base from '../base';
import CoordController from './controller/coordinate';
import { DataPointType, PointObject } from '../interface';
import { LegendOption, CoordinateOption, CoordinateType, CoordinateCfg, AxisOptions, AxisOption, TooltipOption, FilterCallback, ScaleOption, ScalesOption } from './interface';
import { ElementConstructor } from '../element';
export default class View extends Base {
    [key: string]: any;
    constructor(cfg: DataPointType);
    axis(field: boolean): View;
    axis(field: AxisOptions): View;
    axis(field: string, cfg: AxisOption | boolean): View;
    title(options: any): void;
    tooltip(visible: boolean): View;
    tooltip(visible: boolean, cfg: TooltipOption): View;
    tooltip(visible: TooltipOption): View;
    legend(field: boolean): View;
    legend(field: LegendOption): View;
    legend(field: string, cfg: LegendOption | boolean): View;
    annotation(): any;
    changeData(data: DataPointType[]): View;
    data(data: DataPointType[]): View;
    scale(field: ScalesOption): View;
    scale(field: string, cfg: ScaleOption): View;
    filter(field: string, condition: FilterCallback): this;
    coordinate(type: CoordinateOption): CoordController;
    coordinate(type: CoordinateType, cfg: CoordinateCfg): CoordController;
    /**
     * 创建新的子 view
     * @param cfg
     */
    createView(cfg?: any): View;
    /**
     * 移除 view
     * @param view
     */
    removeView(view: any): void;
    /**
     * 分面操作
     * @param option
     */
    facet(option: any): void;
    /**
     * 配置动画参数
     * @param enable
     */
    animate(enable: boolean): this;
    render(stopDrawing?: boolean): this;
    changeVisible(visible: boolean, stopDrawing?: boolean): void;
    isShapeInView(shape: any): boolean;
    isPointInView(point: any): boolean;
    /**
     * 获取 x 轴的度量
     */
    getXScale(): any;
    /**
     * 获取 y 轴所有的度量
     */
    getYScales(): any[];
    /**
     * 获取原始数据对应的画布坐标
     * @param data 原始数据
     */
    getXY(data: DataPointType): any;
    /**
     * 根据传入的坐标展示该点对应的 tooltip 内容
     * @param point 画布坐标
     */
    showTooltip(point: PointObject): View;
    /**
     * 隐藏 tooltip
     */
    hideTooltip(): View;
    /**
     * 根据传入的画布坐标，获取该处的 tooltip 上的记录信息
     * @param point 画布坐标点
     */
    getTooltipItems(point: PointObject): any[];
    init(): void;
    destroy(): void;
    clear(): this;
    /**
     * 清空并重绘
     */
    repaint(): this;
    /**
     * 深度遍历所有的 shape，执行回调函数
     * @param fn 回调函数包含参数：record,shape,element,view
     * @return view 当前视图
     */
    eachShape(fn: Function): this;
    /**
     * 获得所有的 element，
     * @param recursive 是否递归获取，默认为 false
     */
    getElements(recursive?: boolean): any[];
    /**
     * 获取过滤后的值（需要显示的值）
     * @param field 度量
     * @return  滤后的值
     */
    getFilteredValues(field: string): string[];
    /**
     * 获取被过滤的值（不需显示的值）
     * @param field 度量
     * @return 滤出的值
     */
    getFilteredOutValues(field: string): string[];
    /**
     * 设置图形active状态量
     * @param exp 状态量的值
     * @param draw 是否触发canvas重绘
     */
    setActive(exp: any, draw?: boolean): this;
    /**
     * 设置图形selected状态量
     * @param exp 状态量的值
     * @param draw 是否触发canvas重绘
     */
    setSelected(exp: any, draw?: boolean): this;
    /**
     * 设置图形inactive状态量
     * @param exp 状态量的值
     * @param draw 是否触发canvas重绘
     */
    setInactive(exp: any, draw?: boolean): this;
    clearAllInteractions(): this;
    clearInteraction(type: string): this;
    interaction(type: string, cfg?: any): this;
    private _renderFacet;
    private _getSharedOptions;
    private _getFilters;
    private _initTheme;
    private _bindEvents;
    private _clearEvents;
    private _initLayers;
    initRegion(): void;
    private _initData;
    private _initOptions;
    private _drawGuides;
    private _renderAxes;
    private _renderTooltip;
    private _initControllers;
    private _initScale;
    private _createElement;
    private _addElement;
    private _drawElements;
    private _clearElements;
    private _destroyElements;
    private _clearInner;
    private _beforeRender;
    private _initView;
    private _initCoord;
    private _getScales;
    private _initElements;
    private _adjustScales;
    private _adjustCategoryScalesRange;
    private _execFilters;
    private _addBackShape;
    private _destroyViewGroups;
    private _canvasDraw;
    private _renderLegend;
    private _renderAnnotations;
    private _getLegendFields;
    private _setInteraction;
}
export declare const registerViewPrototype: (key: string, Ctor: ElementConstructor) => void;
