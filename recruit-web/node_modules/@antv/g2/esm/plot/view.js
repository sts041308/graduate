import { __assign, __extends, __spreadArrays } from "tslib";
import * as _ from '@antv/util';
import Base from '../base';
import Global from '../global';
import Animate from '../animate';
import ScaleController from './controller/scale';
import CoordController from './controller/coordinate';
import AnnController from './controller/annotation';
import LegendController from './controller/legend';
import AxisController from './controller/axis';
import TooltipController from './controller/tooltip';
import ShapeStateController from './controller/shape-state';
import EventController from './controller/event';
import { getTheme } from '../theme';
import { getFacet } from '../facet';
import { getElement, } from '../element';
import { getInteraction, } from '../interaction';
import { BBox } from '@antv/g';
import { parsePadding } from '../util';
// 判断极坐标是否是一个整圆
function isFullCircle(coord) {
    if (coord.isPolar) {
        var startAngle = coord.startAngle, endAngle = coord.endAngle;
        return (endAngle - startAngle) === Math.PI * 2;
    }
    return false;
}
var FIELD_ORIGIN = '_origin';
// TODO maintaining options
var View = /** @class */ (function (_super) {
    __extends(View, _super);
    function View(cfg) {
        var _this = _super.call(this, __assign({ animate: Global.animate, widthRatio: Global.widthRatio, canvas: null, container: null, coord: null, elements: [], guideController: null, id: _.uniqueId('view_'), options: {}, padding: Global.theme.padding, parent: null, scaleController: null, scales: {}, start: { x: 0, y: 0 }, end: { x: 1, y: 1 }, width: null, height: null, theme: null, title: null, views: [], visible: true, backgroundStyle: {}, interactions: {} }, cfg)) || this;
        _this.init();
        return _this;
    }
    View.prototype.axis = function (field, cfg) {
        var options = this.get('options') || {};
        if (field === false) {
            options.axes = false;
            _.set(options, 'axes', false);
        }
        else if (_.isObject(field)) {
            _.set(options, ['axes', 'fields'], field);
        }
        else if (_.isString(field)) {
            _.set(options, ['axes', 'fields', field], cfg);
        }
        else {
            _.set(options, 'axes', cfg);
        }
        return this;
    };
    // TODO: 图表标题配置
    View.prototype.title = function (options) { };
    View.prototype.tooltip = function (visible, cfg) {
        var options = this.get('options');
        if (!options.tooltip) {
            options.tooltip = {};
        }
        if (visible === false) {
            options.tooltip = false;
        }
        else if (_.isObject(visible)) {
            _.mix(options.tooltip, visible);
        }
        else {
            _.mix(options.tooltip, cfg);
        }
        return this;
    };
    View.prototype.legend = function (field, cfg) {
        var options = this.get('options');
        if (field === false) {
            // 整体关闭图例
            _.set(options, 'legends', false);
        }
        else if (_.isObject(field)) {
            // 全局配置图例
            _.set(options, 'legends', field);
        }
        else if (_.isString(field)) {
            _.set(options, ['legends', 'fields', field], cfg);
        }
        else {
            _.set(options, 'legends', cfg);
        }
        return this;
    };
    // 静态标注
    View.prototype.annotation = function () {
        return this.get('annotationController');
    };
    // data
    // 更新数据
    View.prototype.changeData = function (data) {
        this.emit('beforechangedata');
        this.set('data', data);
        this._initData();
        this.emit('afterchangedata');
        this.repaint();
        return this;
    };
    // 加载数据
    View.prototype.data = function (data) {
        this.set('data', data);
        this._initData();
        return this;
    };
    View.prototype.scale = function (field, cfg) {
        var options = this.get('options');
        var scaleDefs = options.scales;
        if (_.isObject(field)) {
            _.mix(scaleDefs, field);
        }
        else {
            scaleDefs[field] = cfg;
        }
        return this;
    };
    // 过滤需要绘制的数据，但是不会改变传入的数据源，如果存在对应的图例，则过滤掉的字段置灰
    View.prototype.filter = function (field, condition) {
        var options = this.get('options');
        if (!options.filters) {
            options.filters = {};
        }
        options.filters[field] = condition;
        return this;
    };
    View.prototype.coordinate = function (type, cfg) {
        var coordController = this.get('coordController');
        if (_.isObject(type)) {
            coordController.reset(type);
        }
        else {
            coordController.reset({
                type: type,
                cfg: cfg,
            });
        }
        return coordController;
    };
    /**
     * 创建新的子 view
     * @param cfg
     */
    View.prototype.createView = function (cfg) {
        if (cfg === void 0) { cfg = {}; }
        // view 中已有的子 views 数组
        var views = this.get('views');
        var newCfg = __assign({ theme: this.get('theme'), parent: this, container: this.get('panelGroup'), canvas: this.get('canvas'), animate: this.get('animate') }, cfg);
        // options 中的配置
        newCfg.options = _.mix({}, this._getSharedOptions(), cfg.options);
        var view = new View(newCfg);
        view.set('id', _.uniqueId('view_')); // 标识 ID，防止同用户设定的 id 重名
        views.push(view);
        this.emit('addview', { view: view });
        return view;
    };
    /**
     * 移除 view
     * @param view
     */
    View.prototype.removeView = function (view) {
        var views = this.get('views');
        _.pull(views, view);
        view.destroy();
    };
    /**
     * 分面操作
     * @param option
     */
    View.prototype.facet = function (option) {
        // 先销毁掉之前的分面
        var preFacet = this.get('facet');
        if (preFacet)
            preFacet.destroy();
        // 创建新的分面
        var type = _.get(option, 'type');
        var ctor = getFacet(type);
        if (!ctor)
            throw new Error("facet '" + type + "' is not exist!");
        this.set('facet', new ctor(this, option));
    };
    /**
     * 配置动画参数
     * @param enable
     */
    View.prototype.animate = function (enable) {
        var options = this.get('options');
        options.animate = enable;
        this.set('animate', enable);
        return this;
    };
    View.prototype.render = function (stopDrawing) {
        this._clearInner();
        this.emit('beforerender');
        this._beforeRender();
        this.emit('beforedraw');
        this._drawGuides();
        this._drawElements();
        // 渲染 facet
        this._renderFacet();
        // TODO children
        if (this.get('views').length) {
            _.each(this.get('views'), function (view) {
                view.render(stopDrawing);
            });
        }
        this._addBackShape();
        this._canvasDraw(stopDrawing);
        this.emit('afterdraw');
        this.emit('afterrender');
        this.set('rendered', true);
        return this;
    };
    View.prototype.changeVisible = function (visible, stopDrawing) {
        _.each(this.get('elements'), function (element) {
            element.changeVisible(visible, true);
        });
        this.get('container').set('visible', visible);
        var annotationController = this.get('annotationController');
        annotationController && annotationController.changeVisible(visible);
        var axisController = this.get('axisController');
        axisController && axisController.changeVisible(visible);
        if (!stopDrawing) {
            this.get('canvas').draw();
        }
    };
    View.prototype.isShapeInView = function (shape) {
        var id = this.get('id');
        var shapeViewId = shape.get('viewId');
        if (shapeViewId) {
            return shapeViewId === id;
        }
        {
            var container = this.get('container');
            var parent_1 = shape.get('parent');
            while (parent_1) {
                if (parent_1 === container) {
                    shape.set('viewId', this.get('id'));
                    return true;
                }
                parent_1 = parent_1.get('parent');
            }
        }
        return false;
    };
    View.prototype.isPointInView = function (point) {
        var viewRange = this.get('viewRange');
        if (point.x > viewRange.minX && point.x < viewRange.maxX && point.y > viewRange.minY && point.y < viewRange.maxY) {
            return true;
        }
        return false;
    };
    /**
     * 获取 x 轴的度量
     */
    View.prototype.getXScale = function () {
        var elements = this.get('elements');
        if (elements.length) {
            return elements[0].getXScale();
        }
        return null;
    };
    /**
     * 获取 y 轴所有的度量
     */
    View.prototype.getYScales = function () {
        var elements = this.get('elements');
        var yScales = [];
        elements.forEach(function (element) {
            var yScale = element.getYScale();
            if (yScale && _.indexOf(yScales, yScale) === -1) {
                yScales.push(yScale);
            }
        });
        return yScales;
    };
    /**
     * 获取原始数据对应的画布坐标
     * @param data 原始数据
     */
    View.prototype.getXY = function (data) {
        var coord = this.get('coord');
        var xScales = this._getScales('x');
        var yScales = this._getScales('y');
        var x;
        var y;
        for (var field in data) {
            if (xScales[field]) {
                x = xScales[field].scale(data[field]);
            }
            if (yScales[field]) {
                y = yScales[field].scale(data[field]);
            }
        }
        if (!_.isNil(x) && !_.isNil(y)) {
            return coord.convert({
                x: x,
                y: y,
            });
        }
        return null;
    };
    /**
     * 根据传入的坐标展示该点对应的 tooltip 内容
     * @param point 画布坐标
     */
    View.prototype.showTooltip = function (point) {
        var tooltipController = this.get('tooltipController');
        tooltipController.showTooltip(point, this);
        return this;
    };
    /**
     * 隐藏 tooltip
     */
    View.prototype.hideTooltip = function () {
        var tooltipController = this.get('tooltipController');
        tooltipController.hideTooltip();
        return this;
    };
    /**
     * 根据传入的画布坐标，获取该处的 tooltip 上的记录信息
     * @param point 画布坐标点
     */
    View.prototype.getTooltipItems = function (point) {
        var rst = [];
        // const elements = this.get('elements');
        var elements = this.getElements();
        _.each(elements, function (element) {
            var dataArray = element.get('dataArray');
            var items = [];
            _.each(dataArray, function (data) {
                var tmpPoint = element.findPoint(point, data);
                if (tmpPoint) {
                    var subItems = element.getTooltipItems(tmpPoint);
                    items = items.concat(subItems);
                }
            });
            rst = rst.concat(items);
        });
        return rst;
    };
    // lifecycle
    View.prototype.init = function () {
        this._initTheme();
        this._initLayers();
        this.initRegion();
        this._initOptions();
        this._initControllers();
        this._bindEvents();
        if (this.get('data')) {
            this._initData();
        }
    };
    View.prototype.destroy = function () {
        this._clearEvents();
        this.off(); // events
        this.clear(); // UI, models, etc.
        this.clearAllInteractions(); // clearAllInteractions需要在_destroyViewGroups前面，因为某些interaction依赖group
        this._destroyViewGroups();
        _super.prototype.destroy.call(this);
    };
    View.prototype.clear = function () {
        this.set('isUpdate', false);
        this._clearInner();
        this._destroyElements();
        return this;
    };
    /**
     * 清空并重绘
     */
    View.prototype.repaint = function () {
        this.set('isUpdate', true); // 标识符，用于更新动画
        // this._clearInner();
        this.render();
        return this;
    };
    /* 还有其他的一些 view 数据获取的方法 */
    /**
     * 深度遍历所有的 shape，执行回调函数
     * @param fn 回调函数包含参数：record,shape,element,view
     * @return view 当前视图
     */
    View.prototype.eachShape = function (fn) {
        var _this = this;
        var views = this.get('views');
        var canvas = this.get('canvas');
        // 先深度遍历 views
        _.each(views, function (view) {
            view.eachShape(fn);
        });
        // 在遍历当前 view 中的 elements
        var elements = this.get('elements');
        _.each(elements, function (element) {
            // 遍历每一个 shape
            var shapes = element.getShapes();
            _.each(shapes, function (shape) {
                var origin = shape.get('origin');
                if (_.isArray(origin)) {
                    var arr = origin.map(function (obj) {
                        return obj[FIELD_ORIGIN];
                    });
                    fn(arr, shape, element, _this);
                }
                else {
                    var obj = origin[FIELD_ORIGIN];
                    fn(obj, shape, element, _this);
                }
            });
        });
        canvas.draw();
        return this;
    };
    /**
     * 获得所有的 element，
     * @param recursive 是否递归获取，默认为 false
     */
    View.prototype.getElements = function (recursive) {
        if (recursive === void 0) { recursive = false; }
        var elements = __spreadArrays(this.get('elements'));
        if (recursive) {
            var views = this.get('views');
            _.each(views, function (view) {
                elements = elements.concat(view.getElements(recursive));
            });
        }
        return elements;
    };
    /**
     * 获取过滤后的值（需要显示的值）
     * @param field 度量
     * @return  滤后的值
     */
    View.prototype.getFilteredValues = function (field) {
        var scale = this.get('scales')[field];
        var values = scale.values;
        var filters = this._getFilters();
        var rst;
        if (filters && filters[field]) {
            rst = values.filter(filters[field]);
        }
        else {
            rst = values.slice(0);
        }
        return rst;
    };
    /**
     * 获取被过滤的值（不需显示的值）
     * @param field 度量
     * @return 滤出的值
     */
    View.prototype.getFilteredOutValues = function (field) {
        var scale = this.get('scales')[field];
        var values = scale.values;
        var filters = this._getFilters();
        var rst;
        if (filters && filters[field]) {
            rst = values.filter(function (v) { return !filters[field](v); });
        }
        else {
            rst = [];
        }
        return rst;
    };
    /**
     * 设置图形active状态量
     * @param exp 状态量的值
     * @param draw 是否触发canvas重绘
     */
    View.prototype.setActive = function (exp, draw) {
        if (draw === void 0) { draw = true; }
        var shapeStateController = this.get('shapeStateController');
        shapeStateController.setState('active', exp, draw);
        return this;
    };
    /**
     * 设置图形selected状态量
     * @param exp 状态量的值
     * @param draw 是否触发canvas重绘
     */
    View.prototype.setSelected = function (exp, draw) {
        if (draw === void 0) { draw = true; }
        var shapeStateController = this.get('shapeStateController');
        shapeStateController.setState('selected', exp, draw);
        return this;
    };
    /**
     * 设置图形inactive状态量
     * @param exp 状态量的值
     * @param draw 是否触发canvas重绘
     */
    View.prototype.setInactive = function (exp, draw) {
        if (draw === void 0) { draw = true; }
        var shapeStateController = this.get('shapeStateController');
        shapeStateController.setState('inactive', exp, draw);
        return this;
    };
    View.prototype.clearAllInteractions = function () {
        var interactions = this.get('interactions');
        _.each(interactions, function (interaction, key) {
            interaction.destroy();
            delete interactions[key];
        });
        return this;
    };
    View.prototype.clearInteraction = function (type) {
        var interactions = this.get('interactions');
        if (interactions[type]) {
            interactions[type].destroy();
            delete interactions[type];
        }
        return this;
    };
    View.prototype.interaction = function (type, cfg) {
        if (cfg === void 0) { cfg = {}; }
        cfg.view = this;
        var Ctor = getInteraction(type);
        var interaction = new Ctor(cfg);
        this._setInteraction(type, interaction);
        return this;
    };
    // private / protected methods
    // if facet exist, render it.
    View.prototype._renderFacet = function () {
        var facet = this.get('facet');
        if (facet)
            facet.render();
    };
    /* 获得可以共享给子 view 的配置信息
     * @private
     */
    View.prototype._getSharedOptions = function () {
        var options = this.get('options');
        var scales = options.scales, coord = options.coord, axes = options.axes;
        return {
            scales: scales,
            coord: coord,
            axes: axes,
        };
    };
    View.prototype._getFilters = function () {
        var options = this.get('options');
        return options.filters;
    };
    // TODO 在 extend 之前，保留 private，如果 Plot 类有调用，再改为 protected
    View.prototype._initTheme = function () {
        var theme = this.get('theme');
        var viewTheme = {};
        var newTheme = {};
        if (_.isObject(theme)) {
            newTheme = theme;
        }
        else if (_.isString(theme)) {
            newTheme = getTheme(theme);
        }
        _.deepMix(viewTheme, Global.theme, newTheme);
        this.set('theme', viewTheme);
    };
    View.prototype._bindEvents = function () {
        var eventController = this.get('eventController');
        eventController.bindEvents();
    };
    View.prototype._clearEvents = function () {
        var eventController = this.get('eventController');
        eventController.clearEvents();
    };
    View.prototype._initLayers = function () {
        var container = this.get('container');
        var backgroundGroup = container.addGroup({
            name: 'backgroundGroup',
            zIndex: 0,
            viewId: this.get('id'),
        });
        var panelGroup = container.addGroup({
            name: 'panelGroup',
            zIndex: 1,
            viewId: this.get('id'),
        });
        var frontgroundGroup = container.addGroup({
            name: 'frontgroundGroup',
            zIndex: 2,
        });
        this.set('frontgroundGroup', frontgroundGroup);
        this.set('backgroundGroup', backgroundGroup);
        this.set('panelGroup', panelGroup);
    };
    // 生成 view 以及绘图区域的范围
    View.prototype.initRegion = function () {
        // TODO: AutoPadding 场景
        var _a = this.get('start'), startX = _a.x, startY = _a.y;
        var _b = this.get('end'), endX = _b.x, endY = _b.y;
        var parent = this.get('parent');
        if (parent) {
            var _c = parent.get('panelRange'), width = _c.width, height = _c.height, tl = _c.tl;
            // 判断 start 和 end 是像素值还是 0 - 1 范围的数据
            if (endX - startX <= 1) { // 0 -1 返回的数据，将其转换为像素值
                startX *= width;
                startY *= height;
                endX *= width;
                endY *= height;
            }
            startX += tl.x;
            endX += tl.x;
            startY += tl.y;
            endY += tl.y;
        }
        else if (endX - startX <= 1) {
            var width = this.get('width');
            var height = this.get('height');
            startX *= width;
            startY *= height;
            endX *= width;
            endY *= height;
        }
        // else {
        //   startX = 0;
        //   startY = 0;
        //   endX = this.get('width');
        //   endY = this.get('height');
        // }
        var viewWidth = endX - startX;
        var viewHeight = endY - startY;
        this.set('viewRange', new BBox(startX, startY, viewWidth, viewHeight)); // 获取子 view 整体范围（包含坐标轴）
        var padding = parsePadding(this.get('padding'));
        var top = padding[0], right = padding[1], bottom = padding[2], left = padding[3];
        var panelRange = new BBox(startX + left, startY + top, viewWidth - left - right, viewHeight - top - bottom);
        this.set('panelRange', panelRange); // 获取子 view 绘图区域范围，即 elements 绘图范围
    };
    View.prototype._initData = function () {
        // now do nothing here.
    };
    View.prototype._initOptions = function () {
        var _this = this;
        var options = _.mix({}, this.get('options')); // shadow copy
        if (!options.scales) {
            options.scales = {};
        }
        if (!options.coord) {
            options.coord = {};
        }
        // animate 默认为 true，只有显示设置为 false 的时候，才为 false
        if (!_.isUndefined(options.animate)) {
            this.set('animate', !!options.animate);
        }
        // TODO guides, annotations
        if (options.elements && options.elements.length) {
            _.each(options.elements, function (cfg) {
                _this._createElement(cfg);
            });
        }
        var scaleController = this.get('scaleController');
        if (scaleController) {
            scaleController.defs = options.scales;
        }
        var coordController = this.get('coordController');
        if (coordController) {
            coordController.reset(options.coord);
        }
        this.set('options', options);
    };
    View.prototype._drawGuides = function () {
        if (!this.get('keepLegend')) {
            this._renderLegend();
        }
        this._renderAnnotations();
        this._renderAxes();
        this._renderTooltip();
    };
    View.prototype._renderAxes = function () {
        var options = this.get('options');
        var axesOptions = options.axes;
        if (axesOptions === false) {
            return; // 不渲染
        }
        var axisController = this.get('axisController');
        // 如果直接传入 this.get('backgroundGroup')，当调用 axisController.clear() 时，会将 annotationController 创建的 backgroundGroup 销毁
        axisController.container = this.get('backgroundGroup').addGroup({
            name: 'axisGroup',
        });
        axisController.coord = this.get('coord');
        axisController.options = _.get(options, 'axes', {});
        var xScale = this.getXScale();
        var yScales = this.getYScales();
        var viewId = this.get('id');
        axisController.createAxis(xScale, yScales, viewId);
    };
    View.prototype._renderTooltip = function () {
        var options = this.get('options');
        // 用户没有配置 tooltip 或者未显示关闭，则进行 tooltip 的渲染
        if (_.isNil(options.tooltip) || options.tooltip !== false) {
            var tooltipController = this.get('tooltipController');
            tooltipController.options = options.tooltip || {};
            tooltipController.renderTooltip();
        }
    };
    View.prototype._initControllers = function () {
        var options = this.get('options');
        var theme = this.get('theme');
        var canvas = this.get('canvas');
        var scaleController = new ScaleController(options.scales); // TODO 支持透传图表尺寸等
        this.set('scaleController', scaleController);
        var coordController = new CoordController(options.coord);
        this.set('coordController', coordController);
        var eventController = new EventController({
            canvas: this.get('canvas'),
            view: this,
        });
        this.set('eventController', eventController);
        var shapeStateController = new ShapeStateController({
            view: this,
        });
        this.set('shapeStateController', shapeStateController);
        var legendController = new LegendController({ view: this });
        this.set('legendController', legendController);
        var annotationController = new AnnController({
            theme: this.get('theme'),
            view: this,
            frontgroundGroup: this.get('frontgroundGroup').addGroup(),
            backgroundGroup: this.get('backgroundGroup').addGroup(),
            // @ts-ignore
            options: options.annotations || [],
        });
        this.set('annotationController', annotationController);
        var axisController = new AxisController({
            canvas: canvas,
            theme: theme,
        });
        this.set('axisController', axisController);
        var tooltipController = new TooltipController({
            view: this,
            theme: theme,
        });
        this.set('tooltipController', tooltipController);
    };
    View.prototype._initScale = function (field, data) {
        if (data === void 0) { data = []; }
        var scales = this.get('scales');
        // const parent = this.get('parent');
        var scale = scales[field];
        var _data = data;
        // let scale = scales[field];
        // const filteredData = this.get('filteredData'); // 过滤后的数据
        var legendFields = this._getLegendFields();
        // 过滤导致数据为空或者 field 字2段参与了图例生成，都使用全局数据，使图例过滤前后图形映射通道保持一致
        if (!_data.length || legendFields.indexOf(field) !== -1) {
            _data = this.get('data') || [];
        }
        var scaleController = this.get('scaleController');
        if (!scale) {
            scale = scaleController.createScale(field, _data);
            // TODO due with scale syncing, etc.
            scales[field] = scale; // 存储至 scales 变量中
        }
        return scale;
    };
    View.prototype._createElement = function (cfg) {
        var type = cfg.type;
        var element;
        if (getElement(type)) {
            var elementCfg = __assign(__assign({}, cfg), { container: this.get('panelGroup').addGroup(), frontgroundGroup: this.get('frontgroundGroup').addGroup(), view: this, canvas: this.get('canvas'), theme: this.get('theme') });
            var ElementCtor = getElement(type);
            element = new ElementCtor(elementCfg);
            _.each(cfg, function (v, k) {
                if (element[k]) {
                    element[k](v); // 只支持 options
                }
            });
            this._addElement(element);
        }
    };
    View.prototype._addElement = function (element) {
        var elements = this.get('elements');
        elements.push(element);
        element.bindStates();
    };
    View.prototype._drawElements = function () {
        this.emit('beforedrawelements');
        _.each(this.get('elements'), function (element) {
            element.paint();
        });
        this.emit('afterdrawelements');
    };
    View.prototype._clearElements = function () {
        _.each(this.get('elements'), function (element) {
            element.clear();
        });
    };
    View.prototype._destroyElements = function () {
        var elements = this.get('elements');
        while (elements.length > 0) {
            var element = elements.shift();
            element.destroy();
        }
    };
    View.prototype._clearInner = function () {
        this.set('scales', {});
        this.emit('beforeclearinner');
        var options = this.get('options');
        options.elements = [];
        this._clearElements();
        // clear facet
        var facet = this.get('facet');
        if (facet)
            facet.clear();
        var annotationController = this.get('annotationController');
        annotationController && annotationController.reset();
        var axisController = this.get('axisController');
        axisController && axisController.clear();
        var tooltipController = this.get('tooltipController');
        tooltipController && tooltipController.clear();
        // 当不需要保留图例的时候，需要将图例清空，否则 legend 还会残留
        if (!this.get('keepLegend')) {
            var legendController = this.get('legendController');
            legendController && legendController.clear();
        }
        // _addBackShape() 在 render() 方法中调用，为了防止重复创建，需要清空
        var backgroundGroup = this.get('backgroundGroup');
        var panelGroup = this.get('panelGroup');
        backgroundGroup.get('backShape') && backgroundGroup.get('backShape').remove();
        panelGroup.get('backShape') && panelGroup.get('backShape').remove();
        this.emit('afterclearinner');
    };
    View.prototype._beforeRender = function () {
        _.each(this.get('views'), function (view) {
            view._beforeRender();
        });
        this._initView();
    };
    View.prototype._initView = function () {
        this._execFilters();
        this._initCoord();
        this.emit('beforeinitelements');
        this._initElements();
        this._adjustScales();
    };
    View.prototype._initCoord = function () {
        var panelRange = this.get('panelRange');
        var coordController = this.get('coordController');
        var coord = coordController.createCoord(panelRange.bl, panelRange.tr);
        this.set('coord', coord);
    };
    View.prototype._getScales = function (dim) {
        var elements = this.get('elements');
        return _.reduce(elements, function (result, element) {
            var scale = dim === 'x' ? element.getXScale() : element.getYScale();
            if (scale && !_.has(result, scale.field)) {
                result[scale.field] = scale;
            }
            return result;
        }, {});
    };
    View.prototype._initElements = function () {
        var filteredData = this.get('filteredData');
        var coord = this.get('coord');
        var viewId = this.get('id');
        var options = this.get('options');
        var animate = this.get('animate');
        var widthRatio = this.get('widthRatio');
        var isShareTooltip = options.tooltip && options.tooltip.shared;
        _.each(this.get('elements'), function (element, i) {
            element.set('data', filteredData);
            element.set('coord', coord);
            element.set('id', viewId + "-element-" + i);
            element.set('animate', animate);
            element.set('widthRatio', _.deepMix({}, widthRatio, element.get('widthRatio')));
            _.isBoolean(isShareTooltip) && element.set('shareTooltip', isShareTooltip);
            element.init();
        });
    };
    View.prototype._adjustScales = function () {
        // 调整分类度量的 range 属性
        this._adjustCategoryScalesRange();
        // 特殊逻辑：柱状图数值轴默认从 0 开始
        var elements = this.get('elements');
        var scaleDefs = this.get('scaleController').defs;
        elements.forEach(function (element) {
            if (element.get('type') === 'interval') {
                var yScale = element.getYScale();
                var field = yScale.field, min = yScale.min, max = yScale.max, type = yScale.type;
                // 如果用户使用 view.scale() 自己定义了 min，则以用户的为准
                // time 类型不做调整
                if (!(scaleDefs[field] && scaleDefs[field].min) && type !== 'time') {
                    if (min > 0) {
                        yScale.change({
                            min: 0,
                        });
                    }
                    else if (max <= 0) { // 当柱状图全为负值时也需要从 0 开始生长
                        yScale.change({
                            max: 0,
                        });
                    }
                }
            }
        });
    };
    // 调整 x y 两个维度分类度量的 range 属性
    View.prototype._adjustCategoryScalesRange = function () {
        var coord = this.get('coord');
        var xScale = this.getXScale();
        var yScales = this.getYScales();
        var widthRatio = this.get('widthRatio');
        var scales = [];
        xScale && scales.push(xScale); // 一维图表没有 x 度量
        scales = scales.concat(yScales);
        var inFullCircle = isFullCircle(coord);
        var scaleController = this.get('scaleController');
        var scaleDefs = scaleController.defs;
        scales.forEach(function (scale) {
            var field = scale.field, values = scale.values;
            // 分类或者常量度量，同时用户没有通过 view.scale() 配置 range 属性
            if ((scale.isCategory || scale.isIdentity) && values && !(scaleDefs[field] && scaleDefs[field].range)) {
                var count = values.length;
                var range = void 0;
                if (count === 1) {
                    range = [0.5, 1]; // 只有一个分类时,防止计算出现 [ 0.5,0.5 ] 的状态
                }
                else {
                    var wr = 1;
                    var offset = 0;
                    if (inFullCircle) {
                        if (!coord.isTransposed) {
                            range = [0, 1 - 1 / count];
                        }
                        else {
                            wr = widthRatio.multiplePie;
                            offset = 1 / count * wr;
                            range = [offset / 2, 1 - offset / 2];
                        }
                    }
                    else {
                        offset = 1 / count * 1 / 2; // 两边留下分类空间的一半
                        range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时
                    }
                }
                scale.range = range;
            }
        });
    };
    // 过滤数据
    View.prototype._execFilters = function () {
        var data = this.get('data');
        var result = this.get('data') || [];
        var filters = this._getFilters();
        if (filters) {
            result = result.filter(function (obj) {
                var rst = true;
                _.each(filters, function (callback, field) {
                    if (callback) {
                        rst = callback(obj[field], obj);
                        if (!rst) {
                            return false;
                        }
                    }
                });
                return rst;
            });
        }
        this.set('filteredData', result);
    };
    View.prototype._addBackShape = function () {
        // TODO：再飞，有没有更好的办法？
        // add backgroundGroup backShape
        var backgroundGroup = this.get('backgroundGroup');
        var viewRange = this.get('viewRange');
        var backShapeAttrs = {
            x: viewRange.x,
            y: viewRange.y,
            width: viewRange.width,
            height: viewRange.height,
            fill: 'rgba(255,255,255,0)',
        };
        var backgroundStyle = _.mix(this.get('theme').backgroundStyle, this.get('backgroundStyle'));
        var backgroundBackShape = backgroundGroup.addShape('rect', {
            attrs: _.mix(backShapeAttrs, backgroundStyle),
            zIndex: -1,
        });
        backgroundGroup.set('backShape', backgroundBackShape);
        backgroundGroup.sort();
        // add panelGroup backShape
        var panelGroup = this.get('panelGroup');
        var panelRange = this.get('panelRange');
        var panelBackShape = panelGroup.addShape('rect', {
            attrs: {
                x: panelRange.x,
                y: panelRange.y,
                width: panelRange.width,
                height: panelRange.height,
                fill: 'rgba(255,255,255,0)',
            },
            zIndex: -1,
        });
        panelGroup.set('backShape', panelBackShape);
        panelGroup.sort();
    };
    View.prototype._destroyViewGroups = function () {
        this.get('frontgroundGroup').remove();
        this.get('backgroundGroup').remove();
        this.get('panelGroup').remove();
        this.set('frontgroundGroup', null);
        this.set('backgroundGroup', null);
        this.set('panelGroup', null);
    };
    View.prototype._canvasDraw = function (stopDrawing) {
        var canvas = this.get('canvas');
        if (!stopDrawing) {
            var views = this.get('views');
            // sorting
            if (this.get('animate')) {
                // start animation
                var isUpdate_1 = this.get('isUpdate');
                _.each(views, function (view) {
                    Animate.execAnimation(view, isUpdate_1);
                });
                Animate.execAnimation(this, isUpdate_1);
                canvas.draw();
            }
            else {
                canvas.draw();
            }
        }
    };
    View.prototype._renderLegend = function () {
        var legendController = this.get('legendController');
        legendController.render();
    };
    View.prototype._renderAnnotations = function () {
        var coord = this.get('coord');
        var annotationController = this.get('annotationController');
        annotationController.xScales = this._getScales('x');
        annotationController.yScales = this._getScales('y');
        annotationController.render(coord);
    };
    View.prototype._getLegendFields = function () {
        var fields = [];
        var elements = this.get('elements');
        elements.forEach(function (element) {
            var elementFields = element.getLegendFields();
            fields = fields.concat(elementFields);
        });
        return _.uniq(fields);
    };
    // interaction相关
    View.prototype._setInteraction = function (type, interaction) {
        var interactions = this.get('interactions');
        if (interactions[type]) {
            interactions[type].destroy();
        }
        interactions[type] = interaction;
    };
    return View;
}(Base));
export default View;
// TODO mixin element methods
export var registerViewPrototype = function (key, Ctor) {
    View.prototype[key] = function (cfg) {
        if (cfg === void 0) { cfg = {}; }
        cfg.view = this;
        cfg.theme = this.get('theme');
        cfg.container = this.get('panelGroup').addGroup();
        cfg.frontgroundGroup = this.get('frontgroundGroup').addGroup();
        cfg.canvas = this.get('canvas');
        var element = new Ctor(cfg);
        this._addElement(element);
        return element;
    };
};
//# sourceMappingURL=view.js.map