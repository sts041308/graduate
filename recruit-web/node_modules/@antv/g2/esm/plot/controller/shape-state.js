import { __assign } from "tslib";
var ShapeStateController = /** @class */ (function () {
    function ShapeStateController(cfg) {
        if (cfg === void 0) { cfg = { view: null }; }
        this._states = {};
        this._stateStack = {};
        this.view = cfg.view;
    }
    ShapeStateController.prototype.setState = function (name, exp, draw) {
        this._stateStack[name] = { exp: exp, draw: draw };
        this._onUpdate();
    };
    ShapeStateController.prototype.getState = function (name) {
        return this._states[name];
    };
    ShapeStateController.prototype.getAllStates = function () {
        return this._states;
    };
    ShapeStateController.prototype.clear = function () {
        this._states = {};
        this._stateStack = {};
        if (this._changeTimer) {
            clearTimeout(this._changeTimer);
            this._changeTimer = null;
        }
    };
    ShapeStateController.prototype._onUpdate = function () {
        var _this = this;
        var stateStack = this._stateStack;
        if (this._changeTimer) {
            clearTimeout(this._changeTimer);
            this._changeTimer = null;
        }
        this._changeTimer = setTimeout(function () {
            for (var name_1 in stateStack) {
                var state = stateStack[name_1];
                var exp = state.exp;
                if (!_this._states[name_1] || _this._states[name_1] !== exp) {
                    // update states
                    _this._states[name_1] = exp;
                    // dispatch state event
                    _this._triggerEvent(name_1, state);
                }
            }
            // clear stack
            _this._stateStack = {};
        }, 16);
    };
    ShapeStateController.prototype._triggerEvent = function (name, exp) {
        this.view.emit(name + ":change", __assign({ name: name }, exp));
    };
    return ShapeStateController;
}());
export default ShapeStateController;
//# sourceMappingURL=shape-state.js.map