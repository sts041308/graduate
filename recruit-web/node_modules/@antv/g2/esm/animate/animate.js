/**
 * @fileOverview Default animation configuration for elements
 */
import * as _ from '@antv/util';
import Action from './action';
var defaultAnimationCfg = {
    appear: {
        duration: 450,
        easing: 'easeQuadOut',
    },
    update: {
        duration: 450,
        easing: 'easeQuadInOut',
    },
    enter: {
        duration: 400,
        easing: 'easeQuadInOut',
        delay: 100,
    },
    leave: {
        duration: 350,
        easing: 'easeQuadIn',
    },
};
var Animate = {
    line: {
        appear: function () {
            return Action.appear.groupWaveIn;
        },
        enter: function () {
            return Action.enter.clipIn;
        },
        leave: function () {
            return Action.leave.lineWidthOut;
        },
    },
    path: {
        appear: function () {
            return Action.appear.groupWaveIn;
        },
        enter: function () {
            return Action.enter.clipIn;
        },
        leave: function () {
            return Action.leave.lineWidthOut;
        },
    },
    area: {
        appear: function () {
            return Action.appear.groupWaveIn;
        },
        enter: function () {
            return Action.enter.fadeIn;
        },
        leave: function () {
            return Action.leave.fadeOut;
        },
        cfg: {
            appear: {
                duration: 500,
                easing: 'easeQuadOut',
            },
            update: {
                duration: 450,
                easing: 'easeQuadInOut',
            },
            enter: {
                duration: 600,
                delay: 150,
                easing: 'easeQuadInOut',
            },
            leave: {
                easing: 'easeQuadOut',
                duration: 350,
            },
        },
    },
    polygon: {
        appear: function () {
            return Action.appear.fadeIn;
        },
        enter: function () {
            return Action.enter.zoomIn;
        },
        leave: function () {
            return Action.leave.zoomOut;
        },
    },
    edge: {
        appear: function () {
            return Action.appear.pathIn;
        },
        enter: function () {
            return Action.enter.pathIn;
        },
        leave: function () {
            return Action.leave.pathOut;
        },
    },
    interval: {
        appear: function (coord) {
            var result;
            if (coord.isPolar) { // polar coordinate
                result = Action.appear.groupScaleInXY;
                if (coord.isTransposed) { // pie chart
                    result = Action.appear.groupWaveIn;
                }
            }
            else {
                result = coord.isTransposed ? Action.appear.groupScaleInX : Action.appear.groupScaleInY;
            }
            return result;
        },
        enter: function (coord) {
            if (coord.isRect || coord.isTransposed || coord.type === 'theta') {
                return Action.enter.fadeIn;
            }
            return Action.enter.zoomIn;
        },
        leave: function () {
            return Action.leave.fadeOut;
        },
        update: function (coord) {
            if (coord.type === 'theta') {
                return Action.update.fanIn; // TODO: G animate 接口支持 onFrame 属性之后可以改进饼图的更新动画
            }
        },
    },
    point: {
        appear: function () {
            return Action.appear.zoomIn;
        },
        enter: function () {
            return Action.enter.zoomIn;
        },
        leave: function () {
            return Action.leave.zoomOut;
        },
    },
    text: {
        appear: function () {
            return Action.appear.zoomIn;
        },
        enter: function () {
            return Action.enter.zoomIn;
        },
        leave: function () {
            return Action.leave.zoomOut;
        },
    },
    kline: {
        appear: function () {
            return Action.appear.groupWaveIn;
        },
        enter: function () {
            return Action.enter.clipIn;
        },
        leave: function () {
            return Action.leave.lineWidthOut;
        },
    },
    box: {
        appear: function () {
            return Action.appear.groupWaveIn;
        },
        enter: function () {
            return Action.enter.clipIn;
        },
        leave: function () {
            return Action.leave.lineWidthOut;
        },
    },
    heatmap: null,
    label: {
        appear: function () {
            return Action.appear.fadeIn;
        },
        enter: function () {
            return Action.enter.fadeIn;
        },
        leave: function () {
            return Action.leave.fadeOut;
        },
        cfg: {
            appear: {
                duration: 900,
            },
        },
    },
    'axis-label': {
        enter: function () {
            return Action.appear.fadeIn;
        },
        leave: function () {
            return Action.leave.fadeOut;
        },
        update: function (coord) {
            if (coord.isPolar) {
                return Action.appear.fadeIn;
            }
        },
    },
    'axis-ticks': {
        enter: function () {
            return Action.appear.fadeIn;
        },
        leave: function () {
            return Action.leave.fadeOut;
        },
        update: function (coord) {
            if (coord.isPolar) {
                return Action.appear.fadeIn;
            }
        },
    },
    'axis-grid': {
        enter: function () {
            return Action.appear.fadeIn;
        },
        leave: function () {
            return Action.leave.fadeOut;
        },
        update: function (coord) {
            if (coord.isPolar) {
                return Action.appear.fadeIn;
            }
        },
    },
    'axis-grid-rect': {
        enter: function () {
            return Action.appear.fadeIn;
        },
        leave: function () {
            return Action.leave.fadeOut;
        },
        update: function () {
            return Action.leave.fadeIn;
        },
    },
};
Animate.Action = Action;
Animate.defaultCfg = defaultAnimationCfg;
// 获取动画
Animate.getAnimation = function (elementType, coord, animationType) {
    var elementAnimateCfg = this[elementType];
    if (elementAnimateCfg) {
        var animation = elementAnimateCfg[animationType];
        if (_.isFunction(animation)) {
            return animation(coord);
        }
    }
    return false;
};
// 获取动画配置
Animate.getAnimateCfg = function (elementType, animationType) {
    var defaultCfg = defaultAnimationCfg[animationType];
    if (this[elementType] && this[elementType].cfg && this[elementType].cfg[animationType]) {
        return _.deepMix({}, defaultCfg, this[elementType].cfg[animationType]);
    }
    return defaultCfg;
};
// 注册动画
Animate.registerAnimation = function (animationType, animationName, animationFun) {
    if (!this.Action[animationType]) {
        this.Action[animationType] = {};
    }
    this.Action[animationType][animationName] = animationFun;
};
export default Animate;
//# sourceMappingURL=animate.js.map