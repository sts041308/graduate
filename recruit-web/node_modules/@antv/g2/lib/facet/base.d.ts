import { Group } from '@antv/g';
import View from '../plot/view';
import { FacetData, Datum, Region } from './interface';
/**
 * facet 基类
 *  - 定义生命周期，方便自定义 facet
 *  - 提供基础的生命流程方法
 *
 * 生命周期：
 *
 * 初始化 init
 * 1. 初始化容器
 * 2. 数据分面，生成分面布局信息
 *
 * 渲染阶段 render
 * 1. view 创建
 * 2. title
 * 3. axis
 *
 * 清除阶段 clear
 * 1. 清除 view
 * 2. 清除事件
 * 3. 清除 group
 */
export declare abstract class Facet {
    view: View;
    cfg: any;
    container: Group;
    facets: FacetData[];
    destroyed: boolean;
    constructor(view: View, cfg: any);
    /**
     * 初始化过程
     */
    protected init(): void;
    private _createContainer;
    /**
     * 渲染分面，由上层 view 调用。包括：
     *  - 分面 view
     *  - 轴
     *  - title
     *
     *  子类可以复写，添加一些其他组件，比如滚动条等
     */
    render(): void;
    /**
     * 初始化 view
     */
    private _renderViews;
    /**
     * 创建 分面 view
     */
    private _createFacetViews;
    /**
     * 从 view 中清除 facetView
     */
    private _clearFacetViews;
    /**
     * 根据 facet 生成 view，可以给上层自定义使用
     * @param facet
     */
    protected facetToView(facet: FacetData): View;
    /**
     * 清空，clear 之后如果还需要使用，需要重新调用 init 初始化过程
     * 一般在数据有变更的时候调用，重新进行数据的分面逻辑
     */
    clear(): void;
    /**
     * 销毁
     */
    destroy(): void;
    protected beforeProcessView(view: View, facet: FacetData): void;
    protected afterProcessView(view: View, facet: FacetData): void;
    protected abstract generateFacets(data: Datum[]): FacetData[];
    protected abstract renderTitle(): void;
    protected abstract renderAxis(): void;
    /**
     * 获取这个字段对应的所有值，数组
     * @protected
     * @param data 数据
     * @param field 字段名
     * @return 字段对应的值
     */
    protected getFieldValues(data: Datum[], field: string): string[];
    /**
     * 获得每个分面的 region，平分区域
     * @param rows
     * @param cols
     * @param xIndex
     * @param yIndex
     */
    protected getRegion(rows: any, cols: any, xIndex: any, yIndex: any): Region;
}
