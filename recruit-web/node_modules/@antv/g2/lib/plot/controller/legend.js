"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var legend_1 = require("@antv/component/lib/legend");
var _ = require("@antv/util");
var base_1 = require("../../element/shape/base");
var MARKER_SIZE = 4.5;
var STROKE_MARKERS = [
    'cross',
    'tick',
    'plus',
    'hyphen',
    'line',
    'hollowCircle',
    'hollowSquare',
    'hollowDiamond',
    'hollowTriangle',
    'hollowTriangleDown',
    'hollowHexagon',
    'hollowBowtie',
];
var findTargetScale = function (scales, compareScale) {
    return _.find(scales, function (scale) {
        var scaleValues = [].concat(scale.values);
        var compareScaleValues = [].concat(compareScale.values);
        return (scale.type === compareScale.type &&
            scale.field === compareScale.field &&
            _.isEqual(scaleValues.sort(), compareScaleValues.sort()));
    });
};
var LegendController = /** @class */ (function () {
    function LegendController(cfg) {
        // 类内部属性
        // 生成的所有 legend 实例
        this.legends = [];
        var view = cfg.view;
        this.view = view;
        this.theme = view.get('theme');
        // 需要用到 plot 的属性，在这里先定义出来
    }
    /**
     * 生成并渲染 legend
     */
    LegendController.prototype.render = function () {
        var _this = this;
        this.clear();
        var legendOptions = this.options;
        // 没有关闭实例
        if (_.isObject(legendOptions)) {
            // 用户自定义图例
            if (legendOptions.custom) {
                var legend = this.addCustomLegend();
                this.legends.push(legend);
            }
            else {
                var elements = this.view.getElements();
                var scales_1 = [];
                _.each(elements, function (element) {
                    var view = element.get('view');
                    var attrs = element.getAttrsForLegend();
                    _.each(attrs, function (attr) {
                        var type = attr.type;
                        var scale = attr.getScale(type);
                        if (scale && scale.field && scale.type !== 'identity' && !findTargetScale(scales_1, scale)) {
                            scales_1.push(scale);
                            var filteredValues = view.getFilteredOutValues(scale.field);
                            var legend = _this.addLegend(legendOptions, scale, attr, element, filteredValues);
                            // 创建成功，则放入到数组中
                            if (legend) {
                                _this.legends.push(legend);
                            }
                        }
                    });
                });
            }
            this.alignLegends();
        }
    };
    /**
     * todo 显示隐藏图例
     * @param visible
     */
    LegendController.prototype.changeVisible = function (visible) {
        _.each(this.legends, function (legend) {
            /* legend 暂不支持这个方法 */
            // legend.changeVisible(visible);
        });
    };
    /**
     * 清空，销毁生成的 legend
     */
    LegendController.prototype.clear = function () {
        // 1. 销毁 Legends 实例
        _.each(this.legends, function (legend) {
            legend.destroy();
        });
        this.legends = [];
        // 2. 重置配置
        this.reset();
    };
    /**
     * 重置配置项
     */
    LegendController.prototype.reset = function () {
        this.init();
    };
    /**
     * 初始化 legend 相关的属性
     */
    LegendController.prototype.init = function () {
        this.options = this.getLegendOptions();
        this.panelRange = this.view.get('panelRange');
        this.viewRange = this.view.get('viewRange');
        this.container = this.view.get('frontgroundGroup');
    };
    /**
     * 根据相关的配置，添加一个图例
     * @param legendOptions
     * @param scale
     * @param attr
     * @param element
     * @param filteredValues
     */
    LegendController.prototype.addLegend = function (legendOptions, scale, attr, element, filteredValues) {
        var field = scale.field;
        var fieldOption = legendOptions.fields && legendOptions.fields[field];
        if (fieldOption === false) {
            // 用户关闭 field 对应的图例
            return;
        }
        // 自定义图例
        if (fieldOption && fieldOption.custom) {
            return this.addCustomLegend(field);
        }
        /**
         * 其他情况为连续或者分类图例的创建过程
         * 取 position 逻辑：
         * 1. 如果 field 上有，则取 field 上的
         * 2. 如果 field 上没有，则取全局的 legendOption.position
         * 3. 如果全局也没有配置，那么给一个默认值，从主题上取
         */
        var position = this.getFieldLegendConfig(field, 'position', this.theme.defaultLegendPosition);
        position = this.adjustPosition(position);
        var legend = scale.isLinear
            ? this.addContinuousLegend(scale, attr, position)
            : this.addCategoryLegend(scale, attr, element, filteredValues, position);
        if (legend) {
            this.bindHoverEvent(legend, field);
        }
        return legend;
    };
    /**
     * 添加连续图例
     * @param scale
     * @param attr
     * @param position
     */
    LegendController.prototype.addContinuousLegend = function (scale, attr, position) {
        var container = this.container.addGroup({ name: 'legend' });
        var field = scale.field;
        var ticks = scale.getTicks();
        // 构造图例的 items
        var items = _.map(ticks, function (tick) {
            var value = tick.value; // scale 后的值
            var tickValue = tick.tickValue; // tick text value
            var originalValue = scale.invert(value); // original value
            var attrValue = attr.mapping(originalValue).join('');
            return {
                value: tickValue,
                color: attrValue,
            };
        });
        var containsMinValue = !!_.find(ticks, function (tick) { return tick.value === 0; });
        var containsMaxValue = !!_.find(ticks, function (tick) { return tick.value === 1; });
        if (!containsMinValue) {
            var attrValue = attr.mapping(0).join('');
            items.push({
                value: scale.min,
                color: attrValue,
            });
        }
        if (!containsMaxValue) {
            var attrValue = attr.mapping(0).join('');
            items.push({
                value: scale.max,
                color: attrValue,
            });
        }
        var legendOptions = this.options;
        var positionArr = position.split('-');
        var defaultCfg = this.theme.legend[positionArr[0]]; // 获取默认的图例主题配置
        var legendCfg = _.deepMix({}, defaultCfg, this.getFieldLegendOption(field, legendOptions), {
            items: items,
            attr: attr,
            formatter: scale.formatter,
            container: container,
            position: position,
        });
        if (legendCfg.showTitle) {
            _.mix(legendCfg, { title: scale.field });
        }
        var legend;
        if (attr.type === 'color') {
            legend = new legend_1.Color(legendCfg);
        }
        else if (attr.type === 'size') {
            legend = new legend_1.Size(legendCfg);
        }
        else {
            return;
        }
        this.bindFilterEvent(legend, scale);
        return legend;
    };
    /**
     * 添加分类图例
     * @param scale
     * @param attr
     * @param element
     * @param filteredValues
     * @param position
     */
    LegendController.prototype.addCategoryLegend = function (scale, attr, element, filteredValues, position) {
        var _this = this;
        var legendOptions = this.options;
        var field = scale.field;
        var fieldOption = legendOptions.fields ? legendOptions.fields[field] : null;
        var items = [];
        var ticks = scale.getTicks();
        var isByAttr = true;
        var shapeType = element.get('shapeType') || 'point';
        var shape = element.getDefaultValue('shape') || shapeType || 'point';
        if (legendOptions.marker) {
            // 用户全局自定义图例的marker
            shape = legendOptions.marker;
            shapeType = 'point';
            isByAttr = false;
        }
        if (fieldOption && fieldOption.marker) {
            // 用户自定义图例的marker
            shape = fieldOption.marker;
            shapeType = 'point';
            isByAttr = false;
        }
        var view = this.view;
        var viewTheme = this.theme;
        var canvas = view.get('canvas');
        var panelGroup = view.get('panelGroup');
        var panelGroupClip = panelGroup.attr('clip');
        var panelGroupClipBox = panelGroupClip ? panelGroupClip.getBBox() : undefined;
        var panelRange = view.get('panelRange');
        var viewRange = view.get('viewRange');
        var posArray = position.split('-');
        var maxLength = posArray[0] === 'right' || posArray[0] === 'left' // TODO
            ? panelGroupClipBox
                ? panelGroupClipBox.height
                : panelRange.height
            : panelGroupClipBox
                ? viewRange.width - (panelRange.width - panelGroupClipBox.width)
                : viewRange.width;
        _.each(ticks, function (tick) {
            var text = tick.text;
            var name = text;
            var scaleValue = tick.value;
            var value = scale.invert(scaleValue);
            var cfg = {
                isInCircle: element.isInCircle(),
            };
            var checked = filteredValues ? _this.isFiltered(scale, filteredValues, value) : true;
            var colorAttr = element.getAttr('color');
            var shapeAttr = element.getAttr('shape');
            if (colorAttr) {
                // 存在颜色映射
                if (colorAttr.callback && colorAttr.callback.length > 1) {
                    // 多参数映射，阻止程序报错
                    var restArgs = Array(colorAttr.callback.length - 1).fill('');
                    cfg.color = colorAttr.mapping.apply(colorAttr, tslib_1.__spreadArrays([value], restArgs)).join('') || viewTheme.defaultColor;
                }
                else {
                    cfg.color = colorAttr.mapping(value).join('') || viewTheme.defaultColor;
                }
            }
            if (isByAttr && shapeAttr && shapeAttr.scales.length) {
                // 存在形状映射
                if (shapeAttr.callback && shapeAttr.callback.length > 1) {
                    // 多参数映射，阻止程序报错
                    var restArgs = Array(shapeAttr.callback.length - 1).fill('');
                    shape = shapeAttr.mapping.apply(shapeAttr, tslib_1.__spreadArrays([value], restArgs)).join('');
                }
                else {
                    shape = shapeAttr.mapping(value).join('');
                }
            }
            var shapeObject = base_1.getShapeFactory(shapeType);
            var marker = shapeObject.getMarkerStyle(shape, cfg);
            // 补充 marker 为自定义形状场景。
            if (_.isFunction(shape)) {
                marker.symbol = shape;
            }
            items.push({
                value: name,
                dataValue: value,
                checked: checked,
                marker: marker,
            });
        });
        var useHtml = !!legendOptions.useHtml || !!(fieldOption && fieldOption.useHtml);
        var defaultLegendCfg;
        var layout;
        var maxWidth;
        var maxHeight;
        switch (posArray[0]) {
            case 'left':
                /*maxHeight = viewRange.height;
                  maxWidth = panelRange.x - viewRange.x;*/
                maxHeight = panelGroupClipBox ? panelGroupClipBox.height : panelRange.height;
                maxWidth = panelRange.x - viewRange.x;
                layout = 'vertical';
                break;
            case 'right':
                /*maxHeight = viewRange.height;
                  maxWidth = viewRange.tr.x - panelRange.tr.x;*/
                maxHeight = panelGroupClipBox ? panelGroupClipBox.height : panelRange.height;
                maxWidth = viewRange.tr.x - panelRange.tr.x;
                layout = 'vertical';
                break;
            case 'top':
                /*maxHeight = panelRange.tr.y - viewRange.tr.y;
                  maxWidth = viewRange.width;*/
                maxHeight = panelRange.tr.y - viewRange.tr.y;
                maxWidth = panelGroupClipBox ? viewRange.width - (panelRange.width - panelGroupClipBox.width) : viewRange.width;
                layout = 'horizontal';
                break;
            case 'bottom':
                /*maxHeight = viewRange.br.y - panelRange.br.y;
                  maxWidth = viewRange.width;*/
                maxHeight = viewRange.br.y - panelRange.br.y;
                maxWidth = panelGroupClipBox ? viewRange.width - (panelRange.width - panelGroupClipBox.width) : viewRange.width;
                layout = 'horizontal';
                break;
            default:
                break;
        }
        if (useHtml) {
            defaultLegendCfg = _.mix({}, viewTheme.legend.html, {
                maxHeight: maxHeight,
                maxWidth: maxWidth,
                layout: layout,
            });
        }
        else {
            defaultLegendCfg = _.mix({}, viewTheme.legend[posArray[0]], {
                maxHeight: maxHeight,
                maxWidth: maxWidth,
                layout: layout,
                container: this.container.addGroup({ name: 'legend' }),
            });
        }
        var legendCfg = _.deepMix({}, defaultLegendCfg, legendOptions, fieldOption, {
            maxLength: maxLength,
            canvas: canvas,
            items: items,
            position: position,
        });
        if (legendCfg.showTitle) {
            _.mix(legendCfg, {
                title: scale.alias || scale.field,
            });
        }
        var legend = useHtml ? new legend_1.HtmlCategory(legendCfg) : new legend_1.CanvasCategory(legendCfg);
        this.bindClickEvent(legend, scale, filteredValues, legendCfg.onClick);
        return legend;
    };
    /**
     * 添加自定义图例
     * @param field
     */
    LegendController.prototype.addCustomLegend = function (field) {
        var viewTheme = this.theme;
        var view = this.view;
        var container = this.container.addGroup({ name: 'legend' });
        var canvas = container.get('canvas');
        var panelRange = this.panelRange;
        var legendOptions = this.options;
        var fieldOption;
        if (_.isObject(legendOptions)) {
            fieldOption = legendOptions.fields ? legendOptions.fields[field] : {};
        }
        var position = fieldOption.position || legendOptions.position || viewTheme.defaultLegendPosition;
        position = this.adjustPosition(position);
        var items = fieldOption.items || legendOptions.items;
        if (!items) {
            return;
        }
        _.each(items, function (item) {
            if (!_.isPlainObject(item.marker)) {
                // 直接传入字符串或者回调函数时转换为对象，如 item.marker = 'circle'
                item.marker = {
                    symbol: item.marker || 'circle',
                    radius: MARKER_SIZE,
                };
                if (_.contains(STROKE_MARKERS, item.marker.symbol)) {
                    // 支持描边 marker 的绘制
                    item.marker.stroke = item.color;
                }
                else {
                    item.marker.fill = item.color;
                }
            }
            else {
                // 用户传入对象 item.marker = { symbol: 'circle', fill: 'red', radius: 3 }
                item.marker.radius = item.marker.radius || MARKER_SIZE;
            }
            var symbol = item.marker.symbol;
            if (_.isString(symbol) && symbol.indexOf('hollow') !== -1) {
                // 支持 hollowCircle 等
                item.marker.symbol = _.lowerFirst(symbol.substr(6));
            }
            item.checked = _.isNil(item.checked) ? true : item.checked;
        });
        var posArray = position.split('-');
        var maxLength = posArray[0] === 'right' || posArray[0] === 'left' ? panelRange.height : this.viewRange.width;
        var legendCfg = _.deepMix({}, viewTheme.legend[posArray[0]], legendOptions, fieldOption, {
            maxLength: maxLength,
            viewTheme: viewTheme,
            items: items,
            container: container,
            canvas: canvas,
        });
        var useHtml = !!legendCfg.useHtml;
        var legend = useHtml ? new legend_1.HtmlCategory(legendCfg) : new legend_1.CanvasCategory(legendCfg);
        legend.on('itemclick', function (ev) {
            if (legendOptions.onClick) {
                // 用户自定义图例点击事件
                legendOptions.onClick(ev);
            }
        });
        this.bindHoverEvent(legend); // 用户自定义 hover 图例项的事件交互
        return legend;
    };
    /**
     * 根据 position 布局图例位置，将图例 moveTo 到对应的位置
     */
    LegendController.prototype.alignLegends = function () {
        var _this = this;
        var totalRegion = this.getRegion();
        this.totalRegion = totalRegion;
        var legendGroup = this.groupLegendByPosition();
        var i = 0;
        _.each(legendGroup, function (legendItems, position) {
            var region = totalRegion.subs[i];
            _.each(legendItems, function (legend, index) {
                var pre = legendItems[index - 1];
                // if (!(legend.get('useHtml') && !legend.get('autoPosition'))) {
                _this.alignLegend(legend, pre, region, position);
                // }
            });
            i++;
        });
    };
    /**
     * 布局某些方法需要根据view的方法来写
     * @param legend
     * @param pre
     * @param region
     * @param position
     */
    LegendController.prototype.alignLegend = function (legend, pre, region, position) {
        var viewTheme = this.theme;
        var width = this.viewRange.width;
        var height = this.viewRange.height;
        var totalRegion = this.totalRegion;
        var legendGroup = this.groupLegendByPosition();
        var backPlot = this.viewRange; // 背景 BBox
        var offsetX = legend.get('offsetX') || 0;
        var offsetY = legend.get('offsetY') || 0;
        var legendHeight = legend.getHeight();
        var legendWidth = legend.getWidth();
        var borderMargin = viewTheme.legend.margin;
        var innerMargin = viewTheme.legend.legendMargin;
        var legendNum = legendGroup[position].length;
        var posArray = position.split('-');
        var x = 0;
        var y = 0;
        var tempoRegion = legendNum > 1 ? totalRegion : region;
        if (posArray[0] === 'left' || posArray[0] === 'right') {
            height = backPlot.maxY;
            x = this.getXAlign(posArray[0], width, region, backPlot, legendWidth, borderMargin);
            if (pre) {
                var preY = pre.get('y');
                y = preY + pre.getHeight() + innerMargin;
            }
            else {
                y = this.getYAlignVertical(posArray[1], height, tempoRegion, backPlot, 0, borderMargin, this.viewRange.height);
            }
        }
        else if (posArray[0] === 'top' || posArray[0] === 'bottom') {
            y = this.getYAlignHorizontal(posArray[0], height, region, backPlot, legendHeight, borderMargin);
            if (pre) {
                var preWidth = pre.getWidth();
                var preX = pre.get('x');
                x = preX + preWidth + innerMargin;
            }
            else {
                x = this.getXAlign(posArray[1], width, tempoRegion, backPlot, legendWidth, borderMargin);
            }
        }
        legend.moveTo(x + offsetX, y + offsetY);
    };
    // @ts-ignore
    LegendController.prototype.getXAlign = function (pos, width, region, backPlot, legendWidth, borderMargin) {
        var x = pos === 'left' ? backPlot.minX + borderMargin[3] : backPlot.maxX - borderMargin[1] - legendWidth;
        if (pos === 'center') {
            x = (width - region.totalWidth) / 2;
        }
        return x;
    };
    LegendController.prototype.getYAlignHorizontal = function (pos, height, region, backPlot, legendHeight, borderMargin) {
        var y = pos === 'top' ? backPlot.minY + borderMargin[0] : backPlot.maxY - borderMargin[2] - legendHeight;
        return y;
    };
    LegendController.prototype.getYAlignVertical = function (pos, height, region, backPlot, legendHeight, borderMargin, canvasHeight) {
        var y = pos === 'top' ? backPlot.minY + borderMargin[0] : backPlot.maxY - region.totalHeight - borderMargin[2];
        if (pos === 'center') {
            // y = (canvasHeight - region.totalHeight) / 2;
            y = backPlot.minY + (backPlot.height - region.totalHeight) / 2;
        }
        return y;
    };
    LegendController.prototype.adjustPosition = function (position) {
        var positionArr = position.split('-');
        if (positionArr.length === 1) {
            var pos = positionArr[0];
            return pos === 'left'
                ? 'left-bottom'
                : pos === 'right'
                    ? 'right-bottom'
                    : pos === 'top'
                        ? 'top-center'
                        : pos === 'bottom'
                            ? 'bottom-center'
                            : '';
        }
        return positionArr.slice(0, 2).join('-');
    };
    LegendController.prototype.bindClickEvent = function (legend, scale, filteredValues, onClick) {
        var _this = this;
        var view = this.view;
        var field = scale.field;
        legend.on('itemclick', function (ev) {
            if (onClick) {
                // 用户自定义图例点击交互行为
                onClick(ev);
            }
            else {
                var item = ev.item;
                var checked = ev.checked;
                var isSingeSelected_1 = legend.get('selectedMode') === 'single'; // 图例的选中模式
                var clickedValue_1 = item.dataValue; // import: 需要取该图例项原始的数值
                if (checked) {
                    _.pull(filteredValues, clickedValue_1);
                    if (_this.isFieldInView(field, clickedValue_1)) {
                        view.filter(field, function (f) {
                            return isSingeSelected_1 ? f === clickedValue_1 : !_.contains(filteredValues, f);
                        });
                    }
                }
                else if (!isSingeSelected_1) {
                    // 未选中状态
                    filteredValues.push(clickedValue_1);
                    if (_this.isFieldInView(field, clickedValue_1)) {
                        view.filter(field, function (f) {
                            return !_.contains(filteredValues, f);
                        });
                    }
                }
                view.set('keepLegend', true); // 图例不重新渲染
                // view.set('keepPadding', true); // 边框不重新计算
                view.repaint(); // 在动画开启的状态下，图例过滤会触发更新动画，需要设置 view.set('isUpdate', true);
                // view.set('keepPadding', false);
                view.set('keepLegend', false);
            }
        });
    };
    /* 图例的 hover 事件 */
    LegendController.prototype.bindHoverEvent = function (legend, field) {
        var onMouseover = legend.get('onMouseover');
        var onMouseleave = legend.get('onMouseleave');
        legend.on('itemmouseover', function (ev) {
            if (onMouseover) {
                // 由用户自定义 onHover 交互行为
                onMouseover(ev);
            }
        });
        legend.on('itemmouseleave', function (ev) {
            if (onMouseleave) {
                onMouseleave(ev);
            }
        });
    };
    LegendController.prototype.getRegion = function () {
        var _this = this;
        var theme = this.theme;
        var innerMargin = theme.legend.legendMargin;
        var subs = [];
        var totalWidth = 0;
        var totalHeight = 0;
        var legendGroup = this.groupLegendByPosition();
        _.each(legendGroup, function (legendItems) {
            var subRegion = _this.getSubRegion(legendItems);
            subs.push(subRegion);
            totalWidth += subRegion.totalWidth + innerMargin;
            totalHeight += subRegion.totalHeight + innerMargin;
        });
        return {
            totalWidth: totalWidth,
            totalHeight: totalHeight,
            subs: subs,
        };
    };
    LegendController.prototype.getSubRegion = function (legends) {
        var maxWidth = 0;
        var maxHeight = 0;
        var totalWidth = 0;
        var totalHeight = 0;
        _.each(legends, function (legend) {
            var width = legend.getWidth();
            var height = legend.getHeight();
            if (maxWidth < width) {
                maxWidth = width;
            }
            totalWidth += width;
            if (maxHeight < height) {
                maxHeight = height;
            }
            totalHeight += height;
        });
        return {
            maxWidth: maxWidth,
            totalWidth: totalWidth,
            maxHeight: maxHeight,
            totalHeight: totalHeight,
        };
    };
    LegendController.prototype.isFiltered = function (scale, filterVals, scaleValue) {
        if (!scale.isCategory) {
            return true;
        }
        var rst = true;
        _.each(filterVals, function (val) {
            if (scale.getText(val) === scale.getText(scaleValue)) {
                rst = false;
                return false;
            }
        });
        return rst;
    };
    LegendController.prototype.isFieldInView = function (field, value) {
        var flag = false;
        var scales = this.view.get('scales');
        var fieldScale = scales[field];
        if (fieldScale && fieldScale.values) {
            flag = _.contains(fieldScale.values, value);
        }
        return flag;
    };
    LegendController.prototype.getLegendOptions = function () {
        return _.get(this.view.get('options'), 'legends', {} // 默认为空
        );
    };
    /**
     * 拿某一个字段上图例的配置，举例 position
     * 如果 field 上拿不到则使用 全局的，如果全局也没有，那么使用主题配置的默认
     * @param key
     * @param filed
     * @param defaultValue
     */
    LegendController.prototype.getFieldLegendConfig = function (filed, key, defaultValue) {
        var legendOptions = this.options;
        var fieldOption = _.get(legendOptions, "fields." + filed, {});
        return fieldOption[key] ? fieldOption[key] : legendOptions[key] ? legendOptions[key] : defaultValue;
    };
    /**
     * 连续图例，监听 item filter 事件
     * @param legend
     * @param scale
     */
    LegendController.prototype.bindFilterEvent = function (legend, scale) {
        var _this = this;
        var field = scale.field;
        legend.on('itemfilter', function (_a) {
            var range = _a.range;
            var min = range[0], max = range[1];
            // 根据 legend 范围来
            _this.filterShape(field, min, max);
            // todo heatmap 特殊逻辑
            // const elements = this.view.getElements();
            // _.each(elements, (element: Element) => {
            //   if (element.get('type') === 'heatmap') {
            //     _.requestAnimationFrame(() => {
            //       element.drawWithRange(range);
            //     });
            //   }
            // });
        });
    };
    /**
     * 过滤 view 中的 shape，超过范围的隐藏，范围内的显示
     * @param field 字段
     * @param min 最小值
     * @param max 最大值
     */
    LegendController.prototype.filterShape = function (field, min, max) {
        var _this = this;
        var callback = function (record, shape, element, view) {
            var v = record[field];
            if (_.isNil(v)) {
                shape.show();
            }
            else {
                var visible = v >= min && v <= max;
                // shape 带 label，则还需要隐藏 label
                _this.filterLabels(shape, element, visible);
                // 显示还是隐藏 shape
                visible ? shape.show() : shape.hide();
            }
        };
        // 针对 view 中的每一个 shape 执行 callback
        this.view.eachShape(callback);
    };
    /**
     * 根据位置进行图例分类
     * @param position 图例位置
     */
    LegendController.prototype.groupLegendByPosition = function () {
        return _.groupBy(this.legends, function (legend) { return legend.get('position'); });
    };
    /**
     * 处理 shape 上的 label 显示还是隐藏
     * @param shape
     * @param element
     * @param visible
     */
    LegendController.prototype.filterLabels = function (shape, element, visible) {
        if (shape.get('gLabel')) {
            // shape 中缓存了 gLabel Shape
            shape.get('gLabel').set('visible', visible);
        }
        else {
            /* 从 label 中获取 shape 对应的 label item */
            var labelOptions = element.get('labelOptions');
            if (!_.isEmpty(_.get(labelOptions, 'fields'))) {
                var xField_1 = element.getXScale().field;
                var yField_1 = element.getYScale().field;
                var shapeData_1 = shape.get('origin')._origin;
                var labels = element.get('labels');
                _.each(labels, function (label) {
                    var labelData = label.get('origin') || [];
                    if (labelData[xField_1] === shapeData_1[xField_1] && labelData[yField_1] === shapeData_1[yField_1]) {
                        label.set('visible', visible);
                        shape.set('gLabel', label);
                    }
                });
            }
        }
    };
    /**
     * 获取某一个字段的 legendOption；如果不存在字段配置，则使用全局配置
     * @param field
     * @param defaultValue
     */
    LegendController.prototype.getFieldLegendOption = function (field, defaultValue) {
        if (defaultValue === void 0) { defaultValue = {}; }
        return _.get(this.getLegendOptions(), "fields." + field, defaultValue);
    };
    return LegendController;
}());
exports.default = LegendController;
//# sourceMappingURL=legend.js.map