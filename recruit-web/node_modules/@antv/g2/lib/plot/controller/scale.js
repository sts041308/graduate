"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @description scale 的控制器
 */
var _ = require("@antv/util");
var dependents_1 = require("../../dependents");
// tslint:disable-next-line
var dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))(\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;
var Types;
(function (Types) {
    Types["Linear"] = "linear";
    Types["Cat"] = "cat";
    Types["Time"] = "time";
})(Types || (Types = {}));
var ScaleController = /** @class */ (function () {
    function ScaleController(cfg) {
        this.defs = {}; // Scale 配置项信息
        this.defs = cfg;
    }
    ScaleController.prototype.createScale = function (field, data) {
        var def = this.defs[field];
        var scale;
        // 如果数据为空直接返回常量度量
        if (!data || !data.length) {
            if (def && def.type) {
                var Scale = dependents_1.getScale(def.type);
                scale = new Scale(def);
            }
            else {
                var Identity = dependents_1.getScale('identity');
                scale = new Identity({
                    field: field.toString(),
                    values: [field],
                });
            }
            return scale;
        }
        var firstValue = _.firstValue(data, field);
        if (_.isNumber(field) || (_.isNil(firstValue)) && !def) {
            var Identity = dependents_1.getScale('identity');
            scale = new Identity({
                field: field.toString(),
                values: [field],
            });
        }
        else { // 如果已经定义过这个度量
            var type = _.get(def, 'type', this._getDefaultType(field, data));
            var cfg = this._getScaleCfg(type, field, data);
            if (def) {
                _.mix(cfg, def);
            }
            var Scale = dependents_1.getScale(type);
            scale = new Scale(cfg);
        }
        return scale;
    };
    ScaleController.prototype._getDefaultType = function (field, data) {
        var type = Types.Linear;
        var value = _.firstValue(data, field);
        if (_.isArray(value)) {
            value = value[0];
        }
        if (dateRegex.test(value)) {
            type = Types.Time;
        }
        else if (_.isString(value)) {
            type = Types.Cat;
        }
        return type;
    };
    ScaleController.prototype._getScaleCfg = function (type, field, data) {
        var values = _.valuesOfKey(data, field);
        var cfg = {
            field: field,
            values: values,
        };
        if (type !== 'cat' && type !== 'timeCat' && type !== 'time') {
            var _a = _.getRange(values), min = _a.min, max = _a.max;
            cfg.min = min;
            cfg.max = max;
            cfg.nice = true;
        }
        if (type === 'time') {
            cfg.nice = false;
        }
        return cfg;
    };
    return ScaleController;
}());
exports.default = ScaleController;
//# sourceMappingURL=scale.js.map