"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("@antv/util");
function isBackgroundShape(view, shape) {
    var backgroundBkShape = view.get('backgroundGroup').get('backShape');
    var panelBkShape = view.get('panelGroup').get('backShape');
    if (backgroundBkShape === shape || panelBkShape === shape) {
        return true;
    }
    return false;
}
function registerData(eventObj) {
    if (eventObj.target && eventObj.target.get('origin')) {
        eventObj.data = eventObj.target.get('origin');
    }
}
function isSameShape(shape1, shape2) {
    if (shape1 && shape2 && shape1 === shape2) {
        return true;
    }
    return false;
}
function isInView(target, view, canvas) {
    if (target !== canvas && view.isShapeInView(target)) {
        return true;
    }
    return false;
}
function isInPanel(target, panelGroup) {
    var parent = target;
    while (parent = parent.get('parent')) {
        if (parent === panelGroup) {
            return true;
        }
    }
    return false;
}
var EventController = /** @class */ (function () {
    function EventController(cfg) {
        if (cfg === void 0) { cfg = { view: null, canvas: null }; }
        this.view = cfg.view;
        this.canvas = cfg.canvas;
        this._panelGroup = this.view.get('panelGroup');
        this._eventHandlers = [];
        this._pixelRatio = this.canvas.get('pixelRatio');
    }
    EventController.prototype._getEventObj = function (ev) {
        var obj = {
            x: ev.x / this._pixelRatio,
            y: ev.y / this._pixelRatio,
            target: ev.target,
            event: ev.event,
        };
        return obj;
    };
    EventController.prototype._triggerShapeEvent = function (shape, eventName, eventObj) {
        var shapeName = shape.name;
        if (shapeName && !shape.get('destroyed')) {
            var view = this.view;
            var name_1 = shapeName + ":" + eventName;
            eventObj.view = view;
            eventObj.appendInfo = shape.get('appendInfo'); // appendInfo is defined by user
            view.emit(name_1, eventObj);
        }
    };
    EventController.prototype._addEvent = function (target, eventType, handler) {
        target.on(eventType, handler);
        this._eventHandlers.push({ target: target, type: eventType, handler: handler });
    };
    EventController.prototype.bindEvents = function () {
        var container = this.view.get('container');
        this._addEvent(container, 'mousedown', _.wrapBehavior(this, '_onEvents'));
        this._addEvent(container, 'mousemove', _.wrapBehavior(this, '_onMove'));
        this._addEvent(container, 'mouseup', _.wrapBehavior(this, '_onEvents'));
        this._addEvent(container, 'click', _.wrapBehavior(this, '_onEvents'));
        this._addEvent(container, 'dblclick', _.wrapBehavior(this, '_onEvents'));
        this._addEvent(container, 'contextmenu', _.wrapBehavior(this, '_onEvents'));
        this._addEvent(container, 'wheel', _.wrapBehavior(this, '_onEvents'));
        this._addEvent(container, 'touchstart', _.wrapBehavior(this, '_onEvents'));
        this._addEvent(container, 'touchmove', _.wrapBehavior(this, '_onEvents'));
        this._addEvent(container, 'touchend', _.wrapBehavior(this, '_onEvents'));
        this._addEvent(this.canvas, 'mousemove', _.wrapBehavior(this, '_onCanvasMove'));
        var canvasDom = this.canvas.get('canvasDOM');
        this._canvasDomLeaveHandler = _.wrapBehavior(this, '_onCanvasDomLeave');
        canvasDom.addEventListener('mouseleave', this._canvasDomLeaveHandler);
    };
    EventController.prototype._onEvents = function (ev) {
        var eventType = ev.type;
        var eventObj = this._getEventObj(ev);
        var target = ev.target;
        registerData(eventObj);
        var isbk = isBackgroundShape(this.view, target);
        if (!isbk) {
            this._triggerShapeEvent(target, eventType, eventObj);
        }
        /*panel event*/
        var targetParent = target.get('parent');
        if (targetParent) { // 当调用 view.clear()，target 为 canvas 画布本身，此时 targetParent 为 null
            var parentName = targetParent.get('name');
            if (parentName && parentName === 'panelGroup') {
                this.view.emit("panel:" + eventType, eventObj);
            }
        }
        this.view.emit(eventType, eventObj);
    };
    EventController.prototype._onMove = function (ev) {
        /*dispatch mousemove events*/
        var eventObj = this._getEventObj(ev);
        var target = ev.target;
        registerData(eventObj);
        this.view.emit('mousemove', eventObj);
        var isbkTarget = isBackgroundShape(this.view, target);
        if (!isbkTarget) {
            this._triggerShapeEvent(target, 'mousemove', eventObj);
        }
        var lastShape = this._lastShape;
        var isbklastShape = isBackgroundShape(this.view, lastShape);
        if (lastShape && !isbklastShape && !isSameShape(lastShape, target)) {
            var leaveObj = this._getEventObj(ev);
            registerData(leaveObj);
            this._triggerShapeEvent(lastShape, 'mouseleave', eventObj);
        }
        if (!isbkTarget && !isSameShape(lastShape, target)) {
            var enterObj = this._getEventObj(ev);
            registerData(enterObj);
            this._triggerShapeEvent(target, 'mouseenter', enterObj);
        }
        var isTargetInPanel = isInPanel(target, this._panelGroup);
        var isLastShapeInPanel = lastShape ? isInPanel(lastShape, this._panelGroup) : false;
        if (isTargetInPanel) {
            if (!isLastShapeInPanel) {
                this.view.emit('panel:mouseenter', eventObj);
            }
            else {
                this.view.emit('panel:mousemove', eventObj);
            }
        }
        else {
            if (isLastShapeInPanel) {
                this.view.emit('panel:mouseleave', eventObj);
            }
        }
        this._lastShape = target;
    };
    EventController.prototype._onCanvasMove = function (ev) {
        var event = _.isArray(ev) ? ev[0] : ev;
        var eventObj = this._getEventObj(event);
        var canvas = this.canvas;
        var view = this.view;
        var target = event.target;
        var targetInView = isInView(target, view, canvas);
        var lastTargetInView = this._lastCanvasTarget ? isInView(this._lastCanvasTarget, view, canvas) : false;
        if (target !== this._lastCanvasTarget) {
            if (lastTargetInView && !targetInView) {
                this.view.emit('mouseleave', eventObj);
            }
            else if (!lastTargetInView && targetInView) {
                this.view.emit('mouseenter', eventObj);
            }
        }
        this._lastCanvasTarget = target;
    };
    EventController.prototype._onCanvasDomLeave = function (ev) {
        // 解决padding为0时的panel leave问题
        var eventObj = this._getEventObj(ev);
        // ev.event,  g事件的才有。解决移动太快的时候, wrapBehavior 触发的 event === undefined；
        eventObj.event = ev;
        this.view.emit('panel:mouseleave', eventObj);
    };
    EventController.prototype.clearEvents = function () {
        var eventHandlers = this._eventHandlers;
        _.each(eventHandlers, function (eh) {
            eh.target.off(eh.type, eh.handler);
        });
        var canvasDom = this.canvas.get('canvasDOM');
        canvasDom.removeEventListener('mouseleave', this._canvasDomLeaveHandler);
    };
    return EventController;
}());
exports.default = EventController;
//# sourceMappingURL=event.js.map