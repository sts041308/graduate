"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var domUtil = require("@antv/dom-util");
var g_1 = require("@antv/g");
var _ = require("@antv/util");
var global_1 = require("../global");
var view_1 = require("./view");
var Plot = /** @class */ (function (_super) {
    tslib_1.__extends(Plot, _super);
    function Plot(cfg) {
        return _super.call(this, tslib_1.__assign({ containerDOM: null, containerId: null, width: global_1.default.width, height: global_1.default.height, pixelRatio: global_1.default.pixelRatio, renderer: global_1.default.renderer, forceFit: false }, cfg)) || this;
    }
    Plot.prototype.init = function () {
        this.set('id', _.uniqueId('chart'));
        this._initCanvas();
        this._initEvents();
        _super.prototype.init.call(this);
    };
    /**
     * 修改画布的大小，用于外部做自适应
     * @param width
     * @param height
     * @param autoRender
     */
    Plot.prototype.changeSize = function (width, height, autoRender) {
        if (autoRender === void 0) { autoRender = true; }
        var canvas = this.get('canvas');
        canvas.changeSize(width, height);
        // 设置宽高之后，重新计算 region 大小（viewRange、panelRange）
        this.set('width', width);
        this.set('height', height);
        this.initRegion();
        if (autoRender) {
            // 重新绘制
            this.render();
            this.emit('afterchangesize');
        }
        return this;
    };
    Plot.prototype.render = function (stopDrawing) {
        _super.prototype.render.call(this, stopDrawing);
        this.get('canvas').draw();
        return this;
    };
    Plot.prototype.destroy = function () {
        window.removeEventListener('resize', _.getWrapBehavior(this, '_initForceFitEvent'));
        _super.prototype.destroy.call(this);
    };
    Plot.prototype._initCanvas = function () {
        var canvas = new g_1.Canvas({
            containerDOM: this.get('containerDOM'),
            containerId: this.get('containerId'),
            width: this.get('width'),
            height: this.get('height'),
            renderer: this.get('renderer'),
            pixelRatio: this.get('pixelRatio'),
        });
        this.set('canvas', canvas);
        this.set('container', canvas);
        if (this.get('forceFit')) {
            var container = this._getContainerDOM();
            var width = domUtil.getWidth(container, this.get('width'));
            this.set('width', width);
        }
    };
    Plot.prototype._initEvents = function () {
        if (this.get('forceFit')) {
            window.addEventListener('resize', _.wrapBehavior(this, '_initForceFitEvent'));
        }
    };
    Plot.prototype._initForceFitEvent = function () {
        var timer = setTimeout(_.wrapBehavior(this, 'forceFit'), 200);
        clearTimeout(this.get('resizeTimer'));
        this.set('resizeTimer', timer);
    };
    /**
     * 自适应宽度
     * @chainable
     * @return {Chart} 图表对象
     */
    Plot.prototype.forceFit = function () {
        if (this.destroyed) {
            return;
        }
        var container = this._getContainerDOM();
        var oldWidth = this.get('width');
        var width = domUtil.getWidth(container, oldWidth);
        if (width !== 0 && width !== oldWidth) {
            var height = this.get('height');
            this.changeSize(width, height);
        }
        return this;
    };
    Plot.prototype._getContainerDOM = function () {
        var container = this.get('containerDOM');
        if (!_.isElement(container)) {
            container = document.getElementById(this.get('containerId'));
        }
        return container;
    };
    return Plot;
}(view_1.default));
exports.default = Plot;
//# sourceMappingURL=plot.js.map