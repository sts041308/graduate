"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var pathUtil = require("@antv/path-util");
var _ = require("@antv/util");
var global_1 = require("../../global");
var path_1 = require("../util/path");
var ShapeBase = {
    _coord: null,
    getCoord: function () {
        return this._coord;
    },
    /**
     * 0～1 path 转 画布 path
     * @param path 路径
     * @param islineToArc 是否转换成圆弧
     * @return path 转换到画布坐标的path
     */
    parsePath: function (path, islineToArc) {
        var coord = this._coord;
        var parsedPath = pathUtil.parsePathString(path);
        if (coord.isPolar && islineToArc !== false) {
            parsedPath = path_1.convertPolarPath(coord, parsedPath);
        }
        else {
            parsedPath = path_1.convertNormalPath(coord, parsedPath);
        }
        return parsedPath;
    },
    /**
     * 0～1 point 转 画布 point
     * @param  point 节点
     * @return point 转换后的点
     */
    parsePoint: function (point) {
        var coord = this._coord;
        return coord.convertPoint(point);
    },
    /**
     * 0～1 points 转 画布 points
     * @param points 节点集合
     * @return points 转换后的多个节点
     */
    parsePoints: function (points) {
        var coord = this._coord;
        return points.map(function (point) {
            return coord.convertPoint(point);
        });
    },
    /**
     * @override
     * 创建具体的 G.Shape 实例，并将其添加至 container 绘图容器中，在注册具体的 shape 时由开发者自己定义
     */
    draw: function ( /* cfg: ShapeDrawCFG, container: Group */) { },
};
var ShapeFactoryBase = {
    _theme: global_1.default.theme.shape,
    _coord: null,
    _getShapeStyleByState: function (shapeName, shapeState, cfg) {
        var theme = this._theme;
        var elementName = this.name;
        if (theme && theme[elementName] && theme[elementName][shapeName]) {
            var style = theme[elementName][shapeName][shapeState];
            if (_.isFunction(style)) {
                style = style(cfg);
            }
            return style;
        }
    },
    defaultShapeType: null,
    setCoord: function (coord) {
        this._coord = coord;
    },
    setTheme: function (theme) {
        this._theme = theme;
    },
    getShape: function (type) {
        var t = _.isArray(type) ? type[0] : type;
        var shape = this[t] || this[this.defaultShapeType];
        shape._coord = this._coord;
        return shape;
    },
    getShapePoints: function (type, pointInfo) {
        var shape = this.getShape(type);
        return shape.getPoints ? shape.getPoints(pointInfo) : this.getDefaultPoints(pointInfo);
    },
    /**
     * @override
     */
    getDefaultPoints: function ( /* pointInfo: ShapePointInfo */) {
        return [];
    },
    /**
     * @override
     * 获取每个 shape 对应的缩略图样式
     * @param type 图形类型
     * @param cfg shape 的绘图属性
     */
    getMarkerStyle: function (type, markerCfg) {
        var shape = this.getShape(type);
        if (shape.getMarkerStyle) {
            var markerStyle = shape.getMarkerStyle(markerCfg);
            var theme = this._theme;
            var shapeName = shape.name;
            var elementName = this.name;
            if (theme && theme[elementName] && theme[elementName][shapeName]) {
                markerStyle = _.mix({}, theme[elementName][shapeName].default, markerStyle);
            }
            return markerStyle;
        }
    },
    /**
     * @override
     * 获取对应 type 的 shape 的 inactive 样式
     * @param type shape 类型
     * @param cfg shape 的绘图属性
     */
    getInactiveStyle: function (type, inactiveCfg) {
        var shape = this.getShape(type);
        if (shape.getInactiveStyle) {
            return shape.getInactiveStyle(inactiveCfg);
        }
        return this._getShapeStyleByState(shape.name, 'inactive', inactiveCfg);
    },
    /**
     * @override
     * 获取对应 type 的 shape 的激活样式
     * @param type shape 类型
     * @param cfg shape 的绘图属性
     */
    getActiveStyle: function (type, activeCfg) {
        var shape = this.getShape(type);
        if (shape.getActiveStyle) {
            return shape.getActiveStyle(activeCfg);
        }
        return this._getShapeStyleByState(shape.name, 'active', activeCfg);
    },
    /**
     * @override
     * 获取对应 type 的 shape 的选中样式
     * @param type shape 类型
     * @param cfg shape 的绘图属性
     */
    getSelectedStyle: function (type, selectedCfg) {
        var shape = this.getShape(type);
        if (shape.getSelectedStyle) {
            return shape.getSelectedStyle(selectedCfg);
        }
        return this._getShapeStyleByState(shape.name, 'selected', selectedCfg);
    },
    /**
     * @override
     * 调用具体的 shape 的绘制方法
     */
    drawShape: function (type, cfg, container) {
        var shape = this.getShape(type);
        // 应用 shape 主题配置
        var shapeName = shape.name;
        var theme = this._theme;
        var elementName = this.name;
        if (theme && theme[elementName] && theme[elementName][shapeName]) {
            var defaultShapeStyle = theme[elementName][shapeName].default;
            cfg.style = _.mix({}, defaultShapeStyle, cfg.style);
        }
        var gShape = shape.draw(cfg, container);
        if (gShape) {
            // TODO 支持 Group
            gShape.setSilent('origin', cfg.origin);
            gShape.id = cfg.yIndex ? cfg.id + cfg.yIndex : cfg.id;
            gShape.name = this.name;
        }
        return gShape;
    },
};
var ShapeFactoryMap = {};
// 注册 Element 获取图形的入口
function registerShapeFactory(factoryName, cfg) {
    var className = _.upperFirst(factoryName);
    var geomObj = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, ShapeFactoryBase), cfg), { name: factoryName });
    ShapeFactoryMap[className] = geomObj;
    return geomObj;
}
exports.registerShapeFactory = registerShapeFactory;
// 注册具体的 shape
function registerShape(factoryName, shapeType, cfg) {
    var className = _.upperFirst(factoryName);
    var factory = ShapeFactoryMap[className];
    var shapeObj = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({}, ShapeBase), cfg), { name: shapeType });
    factory[shapeType] = shapeObj;
    return shapeObj;
}
exports.registerShape = registerShape;
// 获取 Element 对应的 shapeFactory
function getShapeFactory(factoryName) {
    var className = _.upperFirst(factoryName);
    return ShapeFactoryMap[className];
}
exports.getShapeFactory = getShapeFactory;
//# sourceMappingURL=base.js.map