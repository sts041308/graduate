/**
 * @description Shape 的管理注册机制
 */
import { Group, Shape } from '@antv/g';
import { Coordinate } from '../../dependents';
import { DataPointType, PointObject, ShapeDrawCFG, ShapeMarkerCfg, ShapePointInfo, ShapeStateCfg } from '../../interface';
interface RegisterShapeFactoryCFG {
    defaultShapeType: string;
    getDefaultPoints?: (pointInfo: ShapePointInfo) => PointObject[];
    getInactiveStyle?: (type: string, inactiveCfg: ShapeStateCfg) => DataPointType;
    getActiveStyle?: (type: string, activeCfg: ShapeStateCfg) => DataPointType;
    getSelectedStyle?: (type: string, selectedCfg: ShapeStateCfg) => DataPointType;
    getMarkerStyle?: (type: string, markerCfg: ShapeMarkerCfg) => DataPointType;
    drawShape?: (type: string | string[], cfg: ShapeDrawCFG, container: Group) => Shape;
}
interface RegisterShapeCFG {
    draw: (cfg: ShapeDrawCFG, container: Group) => Shape;
    getPoints?: (pointInfo: ShapePointInfo) => PointObject[];
    getMarkerStyle?: (markerCfg: ShapeMarkerCfg) => DataPointType;
    getInactiveStyle?: (inactiveCfg: ShapeStateCfg) => DataPointType;
    getActiveStyle?: (activeCfg: ShapeStateCfg) => DataPointType;
    getSelectedStyle?: (selectedCfg: ShapeStateCfg) => DataPointType;
}
export interface ShapeCFG extends RegisterShapeCFG {
    name?: string;
    _coord: Coordinate;
    getCoord: () => Coordinate;
    parsePath: (path: string, islineToArc: boolean) => any[];
    parsePoint: (point: PointObject) => PointObject;
    parsePoints: (points: PointObject[]) => PointObject[];
}
export interface ShapeFactoryCFG extends RegisterShapeFactoryCFG {
    _theme: DataPointType;
    _coord: Coordinate;
    setCoord: (coord: Coordinate) => void;
    setTheme: (theme: DataPointType) => void;
    getShape: (type: string | string[]) => ShapeCFG;
    getShapePoints: (type: string | string[], pointInfo: ShapePointInfo) => PointObject[];
    name?: string;
}
export declare function registerShapeFactory(factoryName: string, cfg: RegisterShapeFactoryCFG): ShapeFactoryCFG;
export declare function registerShape(factoryName: string, shapeType: string, cfg: RegisterShapeCFG): ShapeCFG;
export declare function getShapeFactory(factoryName: string): ShapeFactoryCFG;
export {};
