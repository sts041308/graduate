"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var _ = require("@antv/util");
var base_1 = require("./base");
var shape_1 = require("../util/shape");
function getAttrs(cfg) {
    var attrs = cfg.style;
    shape_1.setFillStyle(attrs, cfg);
    return attrs;
}
function getHollowAttrs(cfg) {
    var attrs = cfg.style;
    shape_1.setStrokeStyle(attrs, cfg);
    return attrs;
}
function getPath(points) {
    var flag = points[0];
    var i = 1;
    var path = [['M', flag.x, flag.y]];
    while (i < points.length) {
        var c = points[i];
        if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {
            path.push(['L', c.x, c.y]);
            if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {
                flag = points[i + 1];
                path.push(['Z']);
                path.push(['M', flag.x, flag.y]);
                i++;
            }
        }
        i++;
    }
    if (!_.isEqual(path[path.length - 1], flag)) {
        path.push(['L', flag.x, flag.y]);
    }
    path.push(['Z']);
    return path;
}
function getMarkerAttrs(markerCfg) {
    var markerStyle = {
        symbol: 'square',
        radius: 4,
    };
    shape_1.setFillStyle(markerStyle, markerCfg);
    return markerStyle;
}
var PolygonShapeFactory = base_1.registerShapeFactory('polygon', {
    defaultShapeType: 'polygon',
    getDefaultPoints: function (pointInfo) {
        var points = [];
        _.each(pointInfo.x, function (subX, index) {
            var subY = pointInfo.y[index];
            points.push({
                x: subX,
                y: subY,
            });
        });
        return points;
    },
});
base_1.registerShape('polygon', 'polygon', {
    draw: function (cfg, container) {
        if (!_.isEmpty(cfg.points)) {
            var attrs = getAttrs(cfg);
            var path = getPath(cfg.points);
            path = this.parsePath(path);
            return container.addShape('path', {
                attrs: _.mix(attrs, {
                    path: path,
                }),
            });
        }
    },
    getMarkerStyle: function (markerCfg) {
        return getMarkerAttrs(markerCfg);
    },
});
base_1.registerShape('polygon', 'hollow', {
    draw: function (cfg, container) {
        if (!_.isEmpty(cfg.points)) {
            var attrs = getHollowAttrs(cfg);
            var path = getPath(cfg.points);
            path = this.parsePath(path);
            return container.addShape('path', {
                attrs: _.mix(attrs, {
                    path: path,
                }),
            });
        }
    },
    getMarkerStyle: function (markerCfg) {
        return getMarkerAttrs(markerCfg);
    },
});
exports.default = PolygonShapeFactory;
//# sourceMappingURL=polygon.js.map