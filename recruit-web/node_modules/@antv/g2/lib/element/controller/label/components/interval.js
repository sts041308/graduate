"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var _ = require("@antv/util");
var base_1 = require("./base");
var IntervalElementLabels = /** @class */ (function (_super) {
    tslib_1.__extends(IntervalElementLabels, _super);
    function IntervalElementLabels() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IntervalElementLabels.prototype.setLabelPosition = function (point, originPoint, index, originPosition) {
        var position = originPosition;
        if (_.isFunction(position)) {
            position = position(originPoint);
        }
        var coord = this.get('coord');
        var transposed = coord.isTransposed;
        var point0 = coord.convertPoint(originPoint.points[0]);
        var point1 = coord.convertPoint(originPoint.points[2]);
        var width = (point0.x - point1.x) / 2 * (transposed ? -1 : 1);
        var height = (point0.y - point1.y) / 2 * (transposed ? -1 : 1);
        switch (position) {
            case 'right':
                if (transposed) {
                    point.x -= width;
                    point.y += height;
                    point.textAlign = point.textAlign || 'center';
                }
                else {
                    point.x -= width;
                    point.y += height;
                    point.textAlign = point.textAlign || 'left';
                }
                break;
            case 'left':
                if (transposed) {
                    point.x -= width;
                    point.y -= height;
                    point.textAlign = point.textAlign || 'center';
                }
                else {
                    point.x += width;
                    point.y += height;
                    point.textAlign = point.textAlign || 'right';
                }
                break;
            case 'bottom':
                if (transposed) {
                    point.x -= (width * 2);
                    point.textAlign = point.textAlign || 'left';
                }
                else {
                    point.y += (height * 2);
                    point.textAlign = point.textAlign || 'center';
                }
                break;
            case 'middle':
                if (transposed) {
                    point.x -= width;
                }
                else {
                    point.y += height;
                }
                point.textAlign = point.textAlign || 'center';
                break;
            case 'top':
                if (transposed) {
                    point.textAlign = point.textAlign || 'left';
                }
                else {
                    point.textAlign = point.textAlign || 'center';
                }
                break;
            default:
                break;
        }
    };
    return IntervalElementLabels;
}(base_1.default));
exports.default = IntervalElementLabels;
//# sourceMappingURL=interval.js.map