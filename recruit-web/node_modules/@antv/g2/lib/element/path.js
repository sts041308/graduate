"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * @description path，路径图，用于绘制无序的线图
 */
var _ = require("@antv/util");
var base_1 = require("./base");
var split_data_1 = require("./util/split-data");
var line_1 = require("./shape/line");
var Path = /** @class */ (function (_super) {
    tslib_1.__extends(Path, _super);
    function Path(cfg) {
        var _this = _super.call(this, tslib_1.__assign({ type: 'path', shapeType: 'line', connectNulls: false, showSinglePoint: false }, cfg)) || this;
        _this.set('shapeFactory', line_1.default); // 设置 path 对应的 shapeFactory
        return _this;
    }
    /**
     * @override
     * 构造绘制 path 需要的属性
     * @param obj 数据
     */
    Path.prototype.getDrawCfg = function (obj) {
        var drawCfg = _super.prototype.getDrawCfg.call(this, obj);
        var isStack = this.hasAdjust('stack');
        return tslib_1.__assign(tslib_1.__assign({}, drawCfg), { isStack: isStack, showSinglePoint: this.get('showSinglePoint') });
    };
    Path.prototype.draw = function (data, container, shapeFactory, index) {
        var _this = this;
        var splitArray = split_data_1.splitData(data, this.get('connectNulls'), this.getYScale().field);
        var cfg = this.getDrawCfg(data[0]);
        cfg.origin = data; // path,line 等图的 origin 是整个数据序列
        _.each(splitArray, function (subData, splitedIndex) {
            if (!_.isEmpty(subData)) {
                cfg.splitedIndex = splitedIndex; // 传入分割片段索引 用于生成id
                cfg.points = subData;
                var geomShape = shapeFactory.drawShape(cfg.shape, cfg, container);
                _this.appendShapeInfo(geomShape, index + splitedIndex);
            }
        });
    };
    return Path;
}(base_1.default));
exports.default = Path;
//# sourceMappingURL=path.js.map