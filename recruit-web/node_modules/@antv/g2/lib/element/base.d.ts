/**
 * @description Element 基类
 */
import { Group, Shape } from '@antv/g';
import { Attribute } from '../dependents';
import { DataPointType, PointObject, ShapeDrawCFG, AdjustCfg } from '../interface';
import Base from '../base';
export declare const FIELD_ORIGIN = "_origin";
export interface AttributeCfg {
    fields?: string[];
    callback?: Function;
    values?: any[];
}
export interface StyleCfg {
    fields?: string[];
    callback?: Function;
    cfg?: DataPointType;
}
interface TooltipCfg {
    fields: string[];
    callback?: Function;
}
declare type callback = (data: DataPointType, i: number) => string;
export interface LabelCfg {
    offset?: number;
    offsetX?: number;
    offsetY?: number;
    textStyle?: DataPointType;
    autoRotate?: boolean;
    rotate?: number;
    labelLine?: boolean | DataPointType;
    content?: string | callback;
    useHtml?: boolean;
    htmlTemplate?: string | callback;
    type?: 'default' | 'scatter' | 'treemap' | 'map';
    position?: 'top' | 'bottom' | 'middle' | 'left' | 'right';
    labelEmit?: boolean;
    labelHeight?: number;
}
declare type LabelCfgCallback = (...args: string[]) => (LabelCfg | null);
export interface LabelOptions {
    fields: string[];
    /** label类型 */
    type?: string;
    callback?: LabelCfgCallback;
}
declare type ColorAttrCallback = (...args: any[]) => string;
declare type ShapeAttrCallback = (...args: any[]) => string | any[];
declare type SizeAttrCallback = (...args: any[]) => number;
declare type OpacityAttrCallback = (...args: any[]) => number;
declare type TooltipCallback = (...args: any[]) => DataPointType;
declare type StyleCallback = (...args: any[]) => DataPointType;
declare type AnimateParamCallback = (index: number, id?: string) => number;
declare type AnimateEasingCallback = (index: number, id?: string) => Function;
declare type Easings = 'easeLinear' | 'easeQuad' | 'easeQuadIn' | 'easeQuadOut' | 'easeQuadInOut' | 'easeCubic' | 'easeCubicIn' | 'easeCubicOut' | 'easeCubicInOut' | 'easePoly' | 'easePolyIn' | 'easePolyOut' | 'easePolyInOut' | 'easeSin' | 'easeSinIn' | 'easeSinOut' | 'easeSinInOut' | 'easeExp' | 'easeExpIn' | 'easeExpOut' | 'easeExpInOut' | 'easeCircle' | 'easeCircleIn' | 'easeCircleOut' | 'easeCircleInOut' | 'easeBounce' | 'easeBounceIn' | 'easeBounceOut' | 'easeBounceInOut' | 'easeBack' | 'easeBackIn' | 'easeBackOut' | 'easeBackInOut' | 'easeElastic' | 'easeElasticIn' | 'easeElasticOut' | 'easeElasticInOut';
declare type AppearAnimation = 'clipIn' | 'zoomIn' | 'pathIn' | 'scaleInY' | 'scaleInX' | 'fanIn' | 'fadeIn' | 'groupWaveIn' | 'groupScaleInX' | 'groupScaleInY' | 'groupScaleInXY';
declare type EnterAnimation = 'clipIn' | 'zoomIn' | 'pathIn' | 'scaleInY' | 'scaleInX' | 'fanIn' | 'fadeIn';
declare type LeaveAnimation = 'lineWidthOut' | 'zoomOut' | 'pathOut' | 'fadeOut' | 'fadeIn';
declare type UpdateAnimation = 'fadeIn' | 'fanIn';
interface AnimateActionCfg {
    easing?: Easings | AnimateEasingCallback;
    delay?: number | AnimateParamCallback;
    duration?: number | AnimateParamCallback;
    callback?: Function;
}
interface AppearAnimateCfg extends AnimateActionCfg {
    animation?: AppearAnimation | string;
}
interface EnterAnimateCfg extends AnimateActionCfg {
    animation?: EnterAnimation | string;
}
interface UpdateAnimateCfg extends AnimateActionCfg {
    animation?: UpdateAnimation | string;
}
interface LeaveAnimateCfg extends AnimateActionCfg {
    animation?: LeaveAnimation | string;
}
interface AnimateCfg {
    appear?: AppearAnimateCfg | false;
    update?: UpdateAnimateCfg | false;
    leave?: LeaveAnimateCfg | false;
    enter?: EnterAnimateCfg | false;
}
export interface ElementConstructor {
    new (cfg: any): Element;
}
export default class Element extends Base {
    constructor(cfg: DataPointType);
    /**
     * 位置通道的映射配置
     * @param cfg 配置项
     */
    position(cfg: string): Element;
    position(cfg: AttributeCfg): Element;
    /**
     * 颜色通道的映射配置
     * @param cfg 颜色通道的映射规则
     */
    color(field: AttributeCfg): Element;
    color(field: string): Element;
    color(field: string, cfg: string[]): Element;
    color(field: string, cfg: ColorAttrCallback): Element;
    /**
     * 形状通道的映射配置
     * @param cfg 形状通道的映射规则
     */
    shape(field: AttributeCfg): Element;
    shape(field: string): Element;
    shape(field: string, cfg: string[]): Element;
    shape(field: string, cfg: ShapeAttrCallback): Element;
    /**
     * TODO：如何支持接收相对值以及绝对值
     * 大小通道的映射配置
     * @param cfg 大小通道的映射规则
     */
    size(field: AttributeCfg): Element;
    size(field: number): Element;
    size(field: string): Element;
    size(field: string, cfg: [number, number]): Element;
    size(field: string, cfg: SizeAttrCallback): Element;
    /**
     * 透明度的映射配置
     * @param cfg
     */
    opacity(field: AttributeCfg): Element;
    opacity(field: number): Element;
    opacity(field: string): Element;
    opacity(field: string, callback: OpacityAttrCallback): Element;
    /**
     * Adjust 数据调整配置
     * @param cfg 数据调整配置项
     */
    adjust(adjustCfg: string): Element;
    adjust(adjustCfg: string[]): Element;
    adjust(adjustCfg: AdjustCfg | AdjustCfg[]): Element;
    /**
     * style 图形样式属性配置
     * @param cfg 图形样式配置
     */
    style(field: StyleCfg): Element;
    style(field: DataPointType): Element;
    style(field: string, callback: StyleCallback): Element;
    /**
     * tooltip 映射配置
     * @param cfg tooltip 配置项
     */
    tooltip(field: TooltipCfg): Element;
    tooltip(field: boolean): Element;
    tooltip(field: string): Element;
    tooltip(field: string, cfg: TooltipCallback): Element;
    /**
     * label 映射配置
     * @param cfg label 配置项
     */
    label(field: LabelOptions): Element;
    label(field: boolean): Element;
    label(field: string, cfg: LabelCfgCallback): Element;
    /**
     * element 上的动画配置
     * @param cfg 动画配置
     */
    animate(cfg: AnimateCfg | boolean): Element;
    /**
     * 配置 element 下 shape 在 active 状态下的样式
     * @param cfg active 的样式，为 false 时表示不允许 active
     */
    active(cfg: DataPointType | false): this;
    /**
     * 配置 element 下 shape 在 selected 状态下的样式
     * @param cfg selected 的样式，为 false 时表示不允许 selected
     */
    selected(cfg: DataPointType | false): this;
    /**
     * 配置 element 下 shape 在 inactive 状态下的样式
     * @param cfg inactive 的样式，为 false 时表示不允许 inactive
     */
    inactive(cfg: DataPointType | false): this;
    /**
     * 初始化 element，生成 attribute, scale 对象，同时对数据进行处理
     */
    init(): void;
    bindStates(): void;
    unbindStates(): void;
    /**
     * 进行数据到图形空间的映射同时绘制图形
     */
    paint(): void;
    clear(): void;
    destroy(): void;
    /**
     * 获取图形属性对应的默认值
     * @param attrName 图形属性名称
     */
    getDefaultValue(attrName: string): any;
    /**
     * 隐藏或者展示 Element
     * @param visible boolean 类型，是否可见
     * @param stopDraw 可选，boolean 类型，是否结束绘画
     */
    changeVisible(visible: boolean, stopDraw?: boolean): void;
    /**
     * 根据图形属性名称获取对应的图形属性对象
     * @param name 图形属性名
     */
    getAttr(name: string): any;
    /**
     * 获取同图例相关的图形属性对象
     */
    getAttrsForLegend(): Attribute[];
    /**
     * 获取 x 方向上的度量
     */
    getXScale(): any;
    /**
     * 获取 y 方向上的度量，目前只支持二维
     */
    getYScale(): any;
    /**
     * 获取 Element 上对应所有的图形对象 shape
     */
    getShapes(): Shape[];
    /**
     * 判断 Element 是否位于极坐标系下
     */
    isInCircle(): boolean;
    /**
     * 为每个 shape 添加额外的信息，用于动画
     * @param shape shape 实例
     * @param index 索引值，绘制的顺序，同数据顺序对应
     */
    appendShapeInfo(shape: Shape, index: number): void;
    /**
     * 判断是否发生同 adjustType 对应的调整
     * @param adjustType adjust 类型
     */
    hasAdjust(adjustType: string): boolean;
    /**
     * 获取图形属性对应的值
     * @param attr 图形属性对象
     * @param record 数据
     */
    getAttrValues(attr: any, record: any): any;
    getSize(obj: any): number;
    getNormalizedSize(obj: any): number;
    /**
     * 获取分组相关的度量
     */
    getGroupScales(): any;
    /**
     * 获取图例的字段集合
     */
    getLegendFields(): any[];
    /**
     * 是否合并 tooltip
     */
    isShareTooltip(): boolean;
    /**
     * 根据画布坐标在 source 中查找匹配的数据
     * @param point 画布坐标
     * @param source 数据源(已排序)
     */
    findPoint(point: PointObject, source: DataPointType[]): any;
    /**
     * 根据数据获取对应的 tooltip items 信息
     * @param data 数据记录
     * @param titleField tooltip title 字段名
     */
    getTooltipItems(data: DataPointType, titleField: string): any;
    /**
     * 获取 Y 轴上的最小值
     */
    getYMinValue(): number;
    /**
     * 为每个 shape 生成唯一标识 ID，用于动画
     * @param dataObj shape 的原始数据
     */
    getShapeId(dataObj: DataPointType): any;
    /**
     * 根据画布坐标点获取对应的原始数据
     * @param point 画布坐标点
     */
    protected getOriginDataByPoint(point: PointObject): {
        [x: number]: any;
    };
    /**
     * @protected
     * 根据数据获取图形的关键点数据
     * @param obj 数据对象
     */
    protected createShapePointsCfg(obj: any): DataPointType;
    /**
     * @protected
     * 根据数据生成图形
     * @param data 需要绘制的数据集合
     * @param container 图形容器
     * @param shapeFactory shape 的管理对象
     * @param index 索引值
     */
    protected draw(data: DataPointType[], container: Group, shapeFactory: any, index: number): void;
    /**
     * @protected
     * 绘制具体的 shape
     * @param obj 需要绘制的一套数据
     * @param container 图形容器
     * @param shapeFactory  shape 的管理对象
     * @param index 索引值
     */
    protected drawPoint(obj: DataPointType, container: Group, shapeFactory: any, index: number): void;
    /**
     * 构造绘图图形需要的属性
     * @param obj 数据
     */
    protected getDrawCfg(obj: any): ShapeDrawCFG;
    protected clearInner(): void;
    private _createAttrOption;
    private _initContainer;
    private _initController;
    private _setAttrOptions;
    createScale(field: string, data?: DataPointType[]): any;
    private _initAttrs;
    private _updateStackRange;
    private _groupData;
    private _saveOrigin;
    private _numeric;
    private _processData;
    private _adjustData;
    private _getShapeFactory;
    private _generatePoints;
    private _normalizeValues;
    private _beforeMapping;
    private _mapping;
    private _convertPoint;
    private _getStyleCfg;
    private _sort;
}
export {};
